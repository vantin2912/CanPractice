
PracticeBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08007574  08007574  00017574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007710  08007710  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007710  08007710  00017710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007718  08007718  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007718  08007718  00017718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800771c  0800771c  0001771c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004c10  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004c84  20004c84  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcbd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000398e  00000000  00000000  0003bd61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  0003f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001488  00000000  00000000  00040cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026fd9  00000000  00000000  00042158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018fbb  00000000  00000000  00069131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7738  00000000  00000000  000820ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00169824  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006108  00000000  00000000  00169874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800755c 	.word	0x0800755c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800755c 	.word	0x0800755c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <CRCInit>:
  NULL,                // memory for control block
  0U                   // size for control block
};


void CRCInit(void) {
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
	uint8_t _crc;
	for (int i = 0; i < 0x100; i++) {
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	e022      	b.n	80005e6 <CRCInit+0x52>
		_crc = i;
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	73fb      	strb	r3, [r7, #15]

		for (uint8_t bit = 0; bit < 8; bit++) _crc = (_crc & 0x80) ? ((_crc << 1) ^ 0x1D) : (_crc << 1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	e012      	b.n	80005d0 <CRCInit+0x3c>
 80005aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	da07      	bge.n	80005c2 <CRCInit+0x2e>
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	b25b      	sxtb	r3, r3
 80005b8:	f083 031d 	eor.w	r3, r3, #29
 80005bc:	b25b      	sxtb	r3, r3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	e002      	b.n	80005c8 <CRCInit+0x34>
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	3301      	adds	r3, #1
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	d9e9      	bls.n	80005aa <CRCInit+0x16>

		crcTable[i] = _crc;
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <CRCInit+0x68>)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	4413      	add	r3, r2
 80005dc:	7bfa      	ldrb	r2, [r7, #15]
 80005de:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 0x100; i++) {
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	3301      	adds	r3, #1
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2bff      	cmp	r3, #255	; 0xff
 80005ea:	ddd9      	ble.n	80005a0 <CRCInit+0xc>
	}
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000090 	.word	0x20000090

08000600 <CalcCRC>:
uint8_t CalcCRC(uint8_t * buf, uint8_t len) {
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
        const uint8_t * ptr = buf;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	60fb      	str	r3, [r7, #12]
        uint8_t _crc = 0xFF;
 8000610:	23ff      	movs	r3, #255	; 0xff
 8000612:	72fb      	strb	r3, [r7, #11]

        while(len--) _crc = crcTable[_crc ^ *ptr++];
 8000614:	e00a      	b.n	800062c <CalcCRC+0x2c>
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	60fa      	str	r2, [r7, #12]
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	4053      	eors	r3, r2
 8000622:	b2db      	uxtb	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <CalcCRC+0x48>)
 8000628:	5c9b      	ldrb	r3, [r3, r2]
 800062a:	72fb      	strb	r3, [r7, #11]
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	1e5a      	subs	r2, r3, #1
 8000630:	70fa      	strb	r2, [r7, #3]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1ef      	bne.n	8000616 <CalcCRC+0x16>

        return ~_crc;
 8000636:	7afb      	ldrb	r3, [r7, #11]
 8000638:	43db      	mvns	r3, r3
 800063a:	b2db      	uxtb	r3, r3
}
 800063c:	4618      	mov	r0, r3
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	20000090 	.word	0x20000090

0800064c <CAN_ConfigFilter>:

static void CAN_ConfigFilter(CAN_HandleTypeDef* hcan)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	; 0x30
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef Filter;
	Filter.FilterActivation = CAN_FILTER_ENABLE;
 8000654:	2301      	movs	r3, #1
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
	Filter.FilterIdHigh = CANRcvID<<5;
 8000658:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 800065c:	60bb      	str	r3, [r7, #8]
	Filter.FilterMode = CAN_FILTERMODE_IDLIST;
 800065e:	2301      	movs	r3, #1
 8000660:	623b      	str	r3, [r7, #32]
	Filter.FilterScale = CAN_FILTERSCALE_16BIT;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
	Filter.FilterBank = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	61fb      	str	r3, [r7, #28]
	Filter.FilterFIFOAssignment = CAN_FilterFIFO0;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
	Filter.SlaveStartFilterBank =20;
 800066e:	2314      	movs	r3, #20
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_CAN_ConfigFilter(hcan, &Filter);
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	4619      	mov	r1, r3
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f000 fda7 	bl	80011cc <HAL_CAN_ConfigFilter>

}
 800067e:	bf00      	nop
 8000680:	3730      	adds	r7, #48	; 0x30
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <CAN_Config>:

void CAN_Config(CAN_HandleTypeDef* hcan)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	CRCInit();
 8000690:	f7ff ff80 	bl	8000594 <CRCInit>
	CAN_ConfigFilter(hcan);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ffd9 	bl	800064c <CAN_ConfigFilter>
	RcvDataMutex = osMutexNew(&RcvDataMutex_attr);
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <CAN_Config+0x2c>)
 800069c:	f003 f8fc 	bl	8003898 <osMutexNew>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <CAN_Config+0x30>)
 80006a4:	6013      	str	r3, [r2, #0]

	HAL_CAN_Start(hcan);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 fe70 	bl	800138c <HAL_CAN_Start>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	08007610 	.word	0x08007610
 80006b8:	20000198 	.word	0x20000198

080006bc <CAN_Receive>:

void CAN_Receive(CAN_HandleTypeDef* hcan)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08e      	sub	sp, #56	; 0x38
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Status;
	CAN_RxHeaderTypeDef Can_Header = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	615a      	str	r2, [r3, #20]
 80006d6:	619a      	str	r2, [r3, #24]
	uint32_t FreeLevel;
	FreeLevel = HAL_CAN_GetRxFifoFillLevel(hcan, CAN_FILTER_FIFO0);
 80006d8:	2100      	movs	r1, #0
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f001 f8bc 	bl	8001858 <HAL_CAN_GetRxFifoFillLevel>
 80006e0:	6378      	str	r0, [r7, #52]	; 0x34
	uint8_t RcvBuffer[8]={0};
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
	while(FreeLevel > 0)
 80006ea:	e03f      	b.n	800076c <CAN_Receive+0xb0>
	{
		Status = HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_Header, RcvBuffer);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	f107 0214 	add.w	r2, r7, #20
 80006f4:	2100      	movs	r1, #0
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 ff9c 	bl	8001634 <HAL_CAN_GetRxMessage>
 80006fc:	4603      	mov	r3, r0
 80006fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		if(Status != HAL_OK) return;
 8000702:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000706:	2b00      	cmp	r3, #0
 8000708:	d134      	bne.n	8000774 <CAN_Receive+0xb8>

//		MyPrintf("Practice Rcv ID = %.8lx Len = %ld \r\n", Can_Header.StdId, Can_Header.DLC);
		for(uint8_t i = 0; i< Can_Header.DLC ;++i)
 800070a:	2300      	movs	r3, #0
 800070c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000710:	e00e      	b.n	8000730 <CAN_Receive+0x74>
		{
			MyPrintf("%d ", RcvBuffer[i]);
 8000712:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000716:	3338      	adds	r3, #56	; 0x38
 8000718:	443b      	add	r3, r7
 800071a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800071e:	4619      	mov	r1, r3
 8000720:	4816      	ldr	r0, [pc, #88]	; (800077c <CAN_Receive+0xc0>)
 8000722:	f000 f89d 	bl	8000860 <MyPrintf>
		for(uint8_t i = 0; i< Can_Header.DLC ;++i)
 8000726:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800072a:	3301      	adds	r3, #1
 800072c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000730:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	429a      	cmp	r2, r3
 8000738:	d3eb      	bcc.n	8000712 <CAN_Receive+0x56>
		}
		MyPrintf("\r\n");
 800073a:	4811      	ldr	r0, [pc, #68]	; (8000780 <CAN_Receive+0xc4>)
 800073c:	f000 f890 	bl	8000860 <MyPrintf>
		if(Can_Header.StdId == CANRcvID)
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	2ba2      	cmp	r3, #162	; 0xa2
 8000744:	d10d      	bne.n	8000762 <CAN_Receive+0xa6>
		{
			osMutexAcquire(RcvDataMutex, 0);
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <CAN_Receive+0xc8>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f003 f929 	bl	80039a4 <osMutexAcquire>
 8000752:	89ba      	ldrh	r2, [r7, #12]
			memcpy(CAN_FrameData, RcvBuffer,2);
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <CAN_Receive+0xcc>)
 8000756:	801a      	strh	r2, [r3, #0]
			osMutexRelease(RcvDataMutex);
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <CAN_Receive+0xc8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f003 f96c 	bl	8003a3a <osMutexRelease>
		}
		FreeLevel = HAL_CAN_GetRxFifoFillLevel(hcan, CAN_FILTER_FIFO0);
 8000762:	2100      	movs	r1, #0
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f001 f877 	bl	8001858 <HAL_CAN_GetRxFifoFillLevel>
 800076a:	6378      	str	r0, [r7, #52]	; 0x34
	while(FreeLevel > 0)
 800076c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1bc      	bne.n	80006ec <CAN_Receive+0x30>
 8000772:	e000      	b.n	8000776 <CAN_Receive+0xba>
		if(Status != HAL_OK) return;
 8000774:	bf00      	nop
	}
}
 8000776:	3738      	adds	r7, #56	; 0x38
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	08007584 	.word	0x08007584
 8000780:	08007588 	.word	0x08007588
 8000784:	20000198 	.word	0x20000198
 8000788:	20000190 	.word	0x20000190

0800078c <CAN_Transmit>:

void CAN_Transmit(CAN_HandleTypeDef* hcan)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08e      	sub	sp, #56	; 0x38
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef Can_Header = {0};
 8000794:	f107 0318 	add.w	r3, r7, #24
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef Status;
	uint32_t Mailbox = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
	uint32_t FreeLevel = HAL_CAN_GetTxMailboxesFreeLevel(hcan);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f000 ff0d 	bl	80015ca <HAL_CAN_GetTxMailboxesFreeLevel>
 80007b0:	6378      	str	r0, [r7, #52]	; 0x34
	if(FreeLevel == 0) return;
 80007b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d03b      	beq.n	8000830 <CAN_Transmit+0xa4>

	uint8_t TransmitBuffer[8]= {0};
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
	osMutexAcquire(RcvDataMutex, 0);
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <CAN_Transmit+0xac>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 f8ec 	bl	80039a4 <osMutexAcquire>
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <CAN_Transmit+0xb0>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
	memcpy(TransmitBuffer,CAN_FrameData,2);
 80007d0:	81bb      	strh	r3, [r7, #12]
	osMutexRelease(RcvDataMutex);
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <CAN_Transmit+0xac>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 f92f 	bl	8003a3a <osMutexRelease>

	TransmitBuffer[2] = TransmitBuffer[0] + TransmitBuffer[1];
 80007dc:	7b3a      	ldrb	r2, [r7, #12]
 80007de:	7b7b      	ldrb	r3, [r7, #13]
 80007e0:	4413      	add	r3, r2
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	73bb      	strb	r3, [r7, #14]
	TransmitBuffer[7] = CalcCRC(TransmitBuffer, 7);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2107      	movs	r1, #7
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff07 	bl	8000600 <CalcCRC>
 80007f2:	4603      	mov	r3, r0
 80007f4:	74fb      	strb	r3, [r7, #19]

	Can_Header.DLC = 8;
 80007f6:	2308      	movs	r3, #8
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_Header.StdId = CANTransmitID;
 80007fa:	2312      	movs	r3, #18
 80007fc:	61bb      	str	r3, [r7, #24]


	Status = HAL_CAN_AddTxMessage(hcan, &Can_Header, TransmitBuffer, &Mailbox);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	f107 020c 	add.w	r2, r7, #12
 8000806:	f107 0118 	add.w	r1, r7, #24
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 fe02 	bl	8001414 <HAL_CAN_AddTxMessage>
 8000810:	4603      	mov	r3, r0
 8000812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if(Status == HAL_OK)
 8000816:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800081a:	2b00      	cmp	r3, #0
 800081c:	d009      	beq.n	8000832 <CAN_Transmit+0xa6>
	{
//		printf("Message in mailbox %ld \r\n", Mailbox);
	}
	else
	{
		MyPrintf("Transmit Error Status %d Code = 0x%.8lx \r\n", Status, hcan->ErrorCode);
 800081e:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000826:	461a      	mov	r2, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <CAN_Transmit+0xb4>)
 800082a:	f000 f819 	bl	8000860 <MyPrintf>
 800082e:	e000      	b.n	8000832 <CAN_Transmit+0xa6>
	if(FreeLevel == 0) return;
 8000830:	bf00      	nop
	}
}
 8000832:	3738      	adds	r7, #56	; 0x38
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000198 	.word	0x20000198
 800083c:	20000190 	.word	0x20000190
 8000840:	0800758c 	.word	0x0800758c

08000844 <MyPrintf_Init>:
  NULL,                // memory for control block
  0U                   // size for control block
};

void 	MyPrintf_Init()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	PrintfMutex = osMutexNew(&PrintfMutex_attr);
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <MyPrintf_Init+0x14>)
 800084a:	f003 f825 	bl	8003898 <osMutexNew>
 800084e:	4603      	mov	r3, r0
 8000850:	4a02      	ldr	r2, [pc, #8]	; (800085c <MyPrintf_Init+0x18>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	08007620 	.word	0x08007620
 800085c:	2000019c 	.word	0x2000019c

08000860 <MyPrintf>:

int	MyPrintf (const char *__restrict format, ...)
{
 8000860:	b40f      	push	{r0, r1, r2, r3}
 8000862:	b580      	push	{r7, lr}
 8000864:	b09c      	sub	sp, #112	; 0x70
 8000866:	af00      	add	r7, sp, #0
	osMutexAcquire(PrintfMutex, 0);
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MyPrintf+0x7c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 f898 	bl	80039a4 <osMutexAcquire>

	va_list arg;
	char Buffer[PrintBufferSize]={0};
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	2260      	movs	r2, #96	; 0x60
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f006 f97d 	bl	8006b80 <memset>
	size_t size=sizeof(Buffer);
 8000886:	2364      	movs	r3, #100	; 0x64
 8000888:	603b      	str	r3, [r7, #0]
	va_start(arg,format);
 800088a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800088e:	66bb      	str	r3, [r7, #104]	; 0x68
	char* Output  = vasnprintf(Buffer,&size,format,arg);
 8000890:	4639      	mov	r1, r7
 8000892:	1d38      	adds	r0, r7, #4
 8000894:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000896:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000898:	f006 fab8 	bl	8006e0c <vasniprintf>
 800089c:	66f8      	str	r0, [r7, #108]	; 0x6c
	va_end(arg);
	if(Output != NULL)
 800089e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d00d      	beq.n	80008c0 <MyPrintf+0x60>
	{
		HAL_UART_Transmit(&DebugUART,(uint8_t*) Output, size, 10);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	230a      	movs	r3, #10
 80008aa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MyPrintf+0x80>)
 80008ae:	f002 fa9e 	bl	8002dee <HAL_UART_Transmit>

		if(Output != Buffer)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d002      	beq.n	80008c0 <MyPrintf+0x60>
		{

			vPortFree(Output);
 80008ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80008bc:	f006 f808 	bl	80068d0 <vPortFree>
		}
	}
	osMutexRelease(PrintfMutex);
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MyPrintf+0x7c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 f8b8 	bl	8003a3a <osMutexRelease>

	return size;
 80008ca:	683b      	ldr	r3, [r7, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3770      	adds	r7, #112	; 0x70
 80008d0:	46bd      	mov	sp, r7
 80008d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008d6:	b004      	add	sp, #16
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	2000019c 	.word	0x2000019c
 80008e0:	200001c8 	.word	0x200001c8

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e8:	f000 fb32 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f836 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f000 f906 	bl	8000b00 <MX_GPIO_Init>
  MX_CAN1_Init();
 80008f4:	f000 f8a2 	bl	8000a3c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80008f8:	f000 f8d8 	bl	8000aac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008fc:	f002 fe30 	bl	8003560 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of CANTransmit_Timer */
  CANTransmit_TimerHandle = osTimerNew(CANTransmit_Timer_cb, osTimerPeriodic, NULL, &CANTransmit_Timer_attributes);
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <main+0x5c>)
 8000902:	2200      	movs	r2, #0
 8000904:	2101      	movs	r1, #1
 8000906:	480f      	ldr	r0, [pc, #60]	; (8000944 <main+0x60>)
 8000908:	f002 ff1c 	bl	8003744 <osTimerNew>
 800090c:	4603      	mov	r3, r0
 800090e:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <main+0x64>)
 8000910:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  MyPrintf_Init();
 8000912:	f7ff ff97 	bl	8000844 <MyPrintf_Init>
  CAN_Config(&hcan1);
 8000916:	480d      	ldr	r0, [pc, #52]	; (800094c <main+0x68>)
 8000918:	f7ff feb6 	bl	8000688 <CAN_Config>
  osTimerStart(CANTransmit_TimerHandle, 50);
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <main+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2132      	movs	r1, #50	; 0x32
 8000922:	4618      	mov	r0, r3
 8000924:	f002 ff8a 	bl	800383c <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CANRcv */
  CANRcvHandle = osThreadNew(CANRcv_Task, NULL, &CANRcv_attributes);
 8000928:	4a09      	ldr	r2, [pc, #36]	; (8000950 <main+0x6c>)
 800092a:	2100      	movs	r1, #0
 800092c:	4809      	ldr	r0, [pc, #36]	; (8000954 <main+0x70>)
 800092e:	f002 fe61 	bl	80035f4 <osThreadNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a08      	ldr	r2, [pc, #32]	; (8000958 <main+0x74>)
 8000936:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000938:	f002 fe36 	bl	80035a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800093c:	e7fe      	b.n	800093c <main+0x58>
 800093e:	bf00      	nop
 8000940:	08007654 	.word	0x08007654
 8000944:	08000b71 	.word	0x08000b71
 8000948:	20000210 	.word	0x20000210
 800094c:	200001a0 	.word	0x200001a0
 8000950:	08007630 	.word	0x08007630
 8000954:	08000b51 	.word	0x08000b51
 8000958:	2000020c 	.word	0x2000020c

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b094      	sub	sp, #80	; 0x50
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	2230      	movs	r2, #48	; 0x30
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f006 f908 	bl	8006b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <SystemClock_Config+0xd8>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	4a2a      	ldr	r2, [pc, #168]	; (8000a34 <SystemClock_Config+0xd8>)
 800098a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098e:	6413      	str	r3, [r2, #64]	; 0x40
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <SystemClock_Config+0xd8>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <SystemClock_Config+0xdc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a24      	ldr	r2, [pc, #144]	; (8000a38 <SystemClock_Config+0xdc>)
 80009a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <SystemClock_Config+0xdc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c2:	2302      	movs	r3, #2
 80009c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009cc:	2304      	movs	r3, #4
 80009ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009d0:	23b4      	movs	r3, #180	; 0xb4
 80009d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0320 	add.w	r3, r7, #32
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fa3f 	bl	8001e64 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009ec:	f000 f8e0 	bl	8000bb0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009f0:	f001 f9e8 	bl	8001dc4 <HAL_PWREx_EnableOverDrive>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009fa:	f000 f8d9 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	230f      	movs	r3, #15
 8000a00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a02:	2302      	movs	r3, #2
 8000a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	2105      	movs	r1, #5
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fc99 	bl	8002354 <HAL_RCC_ClockConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a28:	f000 f8c2 	bl	8000bb0 <Error_Handler>
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3750      	adds	r7, #80	; 0x50
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_CAN1_Init+0x68>)
 8000a42:	4a19      	ldr	r2, [pc, #100]	; (8000aa8 <MX_CAN1_Init+0x6c>)
 8000a44:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_CAN1_Init+0x68>)
 8000a48:	2205      	movs	r2, #5
 8000a4a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_CAN1_Init+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_CAN1_Init+0x68>)
 8000a54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a58:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_CAN1_Init+0x68>)
 8000a5c:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a60:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <MX_CAN1_Init+0x68>)
 8000a64:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000a68:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_CAN1_Init+0x68>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_CAN1_Init+0x68>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_CAN1_Init+0x68>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_CAN1_Init+0x68>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_CAN1_Init+0x68>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_CAN1_Init+0x68>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_CAN1_Init+0x68>)
 8000a90:	f000 faa0 	bl	8000fd4 <HAL_CAN_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a9a:	f000 f889 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200001a0 	.word	0x200001a0
 8000aa8:	40006400 	.word	0x40006400

08000aac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_USART1_UART_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	f002 f936 	bl	8002d54 <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aee:	f000 f85f 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200001c8 	.word	0x200001c8
 8000afc:	40011000 	.word	0x40011000

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_GPIO_Init+0x4c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <MX_GPIO_Init+0x4c>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_GPIO_Init+0x4c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_GPIO_Init+0x4c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <MX_GPIO_Init+0x4c>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_GPIO_Init+0x4c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <CANRcv_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CANRcv_Task */
void CANRcv_Task(void *argument)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	MyPrintf("Practice Start Rcv\r\n");
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <CANRcv_Task+0x18>)
 8000b5a:	f7ff fe81 	bl	8000860 <MyPrintf>
  for(;;)
  {
    CAN_Receive(&hcan1);
 8000b5e:	4803      	ldr	r0, [pc, #12]	; (8000b6c <CANRcv_Task+0x1c>)
 8000b60:	f7ff fdac 	bl	80006bc <CAN_Receive>
 8000b64:	e7fb      	b.n	8000b5e <CANRcv_Task+0xe>
 8000b66:	bf00      	nop
 8000b68:	080075e0 	.word	0x080075e0
 8000b6c:	200001a0 	.word	0x200001a0

08000b70 <CANTransmit_Timer_cb>:
  /* USER CODE END 5 */
}

/* CANTransmit_Timer_cb function */
void CANTransmit_Timer_cb(void *argument)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CANTransmit_Timer_cb */
//	MyPrintf("Practice Transmit\r\n");
	CAN_Transmit(&hcan1);
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <CANTransmit_Timer_cb+0x18>)
 8000b7a:	f7ff fe07 	bl	800078c <CAN_Transmit>
  /* USER CODE END CANTransmit_Timer_cb */
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001a0 	.word	0x200001a0

08000b8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d101      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b9e:	f000 f9f9 	bl	8000f94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40001000 	.word	0x40001000

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_MspInit+0x54>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <HAL_MspInit+0x54>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_MspInit+0x54>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_MspInit+0x54>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_MspInit+0x54>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_MspInit+0x54>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	f06f 0001 	mvn.w	r0, #1
 8000c02:	f000 ff09 	bl	8001a18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_CAN_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12c      	bne.n	8000c90 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_CAN_MspInit+0x88>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_CAN_MspInit+0x88>)
 8000c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_CAN_MspInit+0x88>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_CAN_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <HAL_CAN_MspInit+0x88>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_CAN_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c80:	2309      	movs	r3, #9
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_CAN_MspInit+0x8c>)
 8000c8c:	f000 feee 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	; 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40006400 	.word	0x40006400
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_UART_MspInit+0x84>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12c      	bne.n	8000d20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd0:	f043 0310 	orr.w	r3, r3, #16
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f003 0310 	and.w	r3, r3, #16
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cfe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d10:	2307      	movs	r3, #7
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_UART_MspInit+0x8c>)
 8000d1c:	f000 fea6 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40011000 	.word	0x40011000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08e      	sub	sp, #56	; 0x38
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4b33      	ldr	r3, [pc, #204]	; (8000e18 <HAL_InitTick+0xe4>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	4a32      	ldr	r2, [pc, #200]	; (8000e18 <HAL_InitTick+0xe4>)
 8000d4e:	f043 0310 	orr.w	r3, r3, #16
 8000d52:	6413      	str	r3, [r2, #64]	; 0x40
 8000d54:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <HAL_InitTick+0xe4>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f003 0310 	and.w	r3, r3, #16
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d60:	f107 0210 	add.w	r2, r7, #16
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fd12 	bl	8002794 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d103      	bne.n	8000d82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d7a:	f001 fce3 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8000d7e:	6378      	str	r0, [r7, #52]	; 0x34
 8000d80:	e004      	b.n	8000d8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d82:	f001 fcdf 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8000d86:	4603      	mov	r3, r0
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d8e:	4a23      	ldr	r2, [pc, #140]	; (8000e1c <HAL_InitTick+0xe8>)
 8000d90:	fba2 2303 	umull	r2, r3, r2, r3
 8000d94:	0c9b      	lsrs	r3, r3, #18
 8000d96:	3b01      	subs	r3, #1
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HAL_InitTick+0xec>)
 8000d9c:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <HAL_InitTick+0xf0>)
 8000d9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000da0:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <HAL_InitTick+0xec>)
 8000da2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000da8:	4a1d      	ldr	r2, [pc, #116]	; (8000e20 <HAL_InitTick+0xec>)
 8000daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <HAL_InitTick+0xec>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <HAL_InitTick+0xec>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_InitTick+0xec>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dc0:	4817      	ldr	r0, [pc, #92]	; (8000e20 <HAL_InitTick+0xec>)
 8000dc2:	f001 fd19 	bl	80027f8 <HAL_TIM_Base_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000dcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d11b      	bne.n	8000e0c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dd4:	4812      	ldr	r0, [pc, #72]	; (8000e20 <HAL_InitTick+0xec>)
 8000dd6:	f001 fd69 	bl	80028ac <HAL_TIM_Base_Start_IT>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000de0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d111      	bne.n	8000e0c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000de8:	2036      	movs	r0, #54	; 0x36
 8000dea:	f000 fe31 	bl	8001a50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d808      	bhi.n	8000e06 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	2036      	movs	r0, #54	; 0x36
 8000dfa:	f000 fe0d 	bl	8001a18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_InitTick+0xf4>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	e002      	b.n	8000e0c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3738      	adds	r7, #56	; 0x38
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	431bde83 	.word	0x431bde83
 8000e20:	20000214 	.word	0x20000214
 8000e24:	40001000 	.word	0x40001000
 8000e28:	20000004 	.word	0x20000004

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler+0x4>

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler+0x4>

08000e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <TIM6_DAC_IRQHandler+0x10>)
 8000e5e:	f001 fd95 	bl	800298c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000214 	.word	0x20000214

08000e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e74:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <_sbrk+0x5c>)
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <_sbrk+0x60>)
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <_sbrk+0x64>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <_sbrk+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d207      	bcs.n	8000eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e9c:	f005 fe36 	bl	8006b0c <__errno>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	e009      	b.n	8000ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <_sbrk+0x64>)
 8000ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20030000 	.word	0x20030000
 8000ecc:	00000400 	.word	0x00000400
 8000ed0:	2000025c 	.word	0x2000025c
 8000ed4:	20004c88 	.word	0x20004c88

08000ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f02:	490e      	ldr	r1, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f18:	4c0b      	ldr	r4, [pc, #44]	; (8000f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f26:	f7ff ffd7 	bl	8000ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f005 fdf5 	bl	8006b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fcd9 	bl	80008e4 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f40:	08007720 	.word	0x08007720
  ldr r2, =_sbss
 8000f44:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f48:	20004c84 	.word	0x20004c84

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_Init+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_Init+0x40>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x40>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 fd42 	bl	8001a02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	200f      	movs	r0, #15
 8000f80:	f7ff fed8 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff fe1a 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000260 	.word	0x20000260

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000260 	.word	0x20000260

08000fd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e0ed      	b.n	80011c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff fe0e 	bl	8000c14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0201 	orr.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001008:	f7ff ffd8 	bl	8000fbc <HAL_GetTick>
 800100c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800100e:	e012      	b.n	8001036 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001010:	f7ff ffd4 	bl	8000fbc <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b0a      	cmp	r3, #10
 800101c:	d90b      	bls.n	8001036 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2205      	movs	r2, #5
 800102e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e0c5      	b.n	80011c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0e5      	beq.n	8001010 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0202 	bic.w	r2, r2, #2
 8001052:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001054:	f7ff ffb2 	bl	8000fbc <HAL_GetTick>
 8001058:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800105a:	e012      	b.n	8001082 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800105c:	f7ff ffae 	bl	8000fbc <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b0a      	cmp	r3, #10
 8001068:	d90b      	bls.n	8001082 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2205      	movs	r2, #5
 800107a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e09f      	b.n	80011c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e5      	bne.n	800105c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7e1b      	ldrb	r3, [r3, #24]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d108      	bne.n	80010aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e007      	b.n	80010ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7e5b      	ldrb	r3, [r3, #25]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d108      	bne.n	80010d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e007      	b.n	80010e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7e9b      	ldrb	r3, [r3, #26]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d108      	bne.n	80010fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0220 	orr.w	r2, r2, #32
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e007      	b.n	800110e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0220 	bic.w	r2, r2, #32
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7edb      	ldrb	r3, [r3, #27]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d108      	bne.n	8001128 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0210 	bic.w	r2, r2, #16
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e007      	b.n	8001138 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0210 	orr.w	r2, r2, #16
 8001136:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7f1b      	ldrb	r3, [r3, #28]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d108      	bne.n	8001152 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0208 	orr.w	r2, r2, #8
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e007      	b.n	8001162 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0208 	bic.w	r2, r2, #8
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7f5b      	ldrb	r3, [r3, #29]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d108      	bne.n	800117c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 0204 	orr.w	r2, r2, #4
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e007      	b.n	800118c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0204 	bic.w	r2, r2, #4
 800118a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	ea42 0103 	orr.w	r1, r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011e4:	7cfb      	ldrb	r3, [r7, #19]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d003      	beq.n	80011f2 <HAL_CAN_ConfigFilter+0x26>
 80011ea:	7cfb      	ldrb	r3, [r7, #19]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	f040 80be 	bne.w	800136e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80011f2:	4b65      	ldr	r3, [pc, #404]	; (8001388 <HAL_CAN_ConfigFilter+0x1bc>)
 80011f4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011fc:	f043 0201 	orr.w	r2, r3, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800120c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	431a      	orrs	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	2201      	movs	r2, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43db      	mvns	r3, r3
 8001244:	401a      	ands	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d123      	bne.n	800129c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001276:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3248      	adds	r2, #72	; 0x48
 800127c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001290:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001292:	6979      	ldr	r1, [r7, #20]
 8001294:	3348      	adds	r3, #72	; 0x48
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d122      	bne.n	80012ea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3248      	adds	r2, #72	; 0x48
 80012ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012e0:	6979      	ldr	r1, [r7, #20]
 80012e2:	3348      	adds	r3, #72	; 0x48
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	440b      	add	r3, r1
 80012e8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d109      	bne.n	8001306 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	401a      	ands	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001304:	e007      	b.n	8001316 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	431a      	orrs	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43db      	mvns	r3, r3
 8001328:	401a      	ands	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001330:	e007      	b.n	8001342 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	431a      	orrs	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d107      	bne.n	800135a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	431a      	orrs	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001360:	f023 0201 	bic.w	r2, r3, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e006      	b.n	800137c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
  }
}
 800137c:	4618      	mov	r0, r3
 800137e:	371c      	adds	r7, #28
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40006400 	.word	0x40006400

0800138c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b01      	cmp	r3, #1
 800139e:	d12e      	bne.n	80013fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2202      	movs	r2, #2
 80013a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013b8:	f7ff fe00 	bl	8000fbc <HAL_GetTick>
 80013bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013be:	e012      	b.n	80013e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013c0:	f7ff fdfc 	bl	8000fbc <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b0a      	cmp	r3, #10
 80013cc:	d90b      	bls.n	80013e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2205      	movs	r2, #5
 80013de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e012      	b.n	800140c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e5      	bne.n	80013c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e006      	b.n	800140c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
  }
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001428:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d003      	beq.n	8001440 <HAL_CAN_AddTxMessage+0x2c>
 8001438:	7ffb      	ldrb	r3, [r7, #31]
 800143a:	2b02      	cmp	r3, #2
 800143c:	f040 80b8 	bne.w	80015b0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10a      	bne.n	8001460 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001450:	2b00      	cmp	r3, #0
 8001452:	d105      	bne.n	8001460 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 80a0 	beq.w	80015a0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	0e1b      	lsrs	r3, r3, #24
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d907      	bls.n	8001480 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e09e      	b.n	80015be <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001480:	2201      	movs	r2, #1
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	409a      	lsls	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800149c:	68f9      	ldr	r1, [r7, #12]
 800149e:	6809      	ldr	r1, [r1, #0]
 80014a0:	431a      	orrs	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3318      	adds	r3, #24
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	440b      	add	r3, r1
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e00f      	b.n	80014ce <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014b8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014be:	68f9      	ldr	r1, [r7, #12]
 80014c0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014c2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3318      	adds	r3, #24
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	440b      	add	r3, r1
 80014cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6819      	ldr	r1, [r3, #0]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3318      	adds	r3, #24
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	440b      	add	r3, r1
 80014de:	3304      	adds	r3, #4
 80014e0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	7d1b      	ldrb	r3, [r3, #20]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d111      	bne.n	800150e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3318      	adds	r3, #24
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	3304      	adds	r3, #4
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	6811      	ldr	r1, [r2, #0]
 80014fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3318      	adds	r3, #24
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	440b      	add	r3, r1
 800150a:	3304      	adds	r3, #4
 800150c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3307      	adds	r3, #7
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	061a      	lsls	r2, r3, #24
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3306      	adds	r3, #6
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3305      	adds	r3, #5
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	4313      	orrs	r3, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	3204      	adds	r2, #4
 800152e:	7812      	ldrb	r2, [r2, #0]
 8001530:	4610      	mov	r0, r2
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	6811      	ldr	r1, [r2, #0]
 8001536:	ea43 0200 	orr.w	r2, r3, r0
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	440b      	add	r3, r1
 8001540:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001544:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3303      	adds	r3, #3
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	061a      	lsls	r2, r3, #24
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3302      	adds	r3, #2
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	041b      	lsls	r3, r3, #16
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3301      	adds	r3, #1
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	4313      	orrs	r3, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	7812      	ldrb	r2, [r2, #0]
 8001566:	4610      	mov	r0, r2
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	6811      	ldr	r1, [r2, #0]
 800156c:	ea43 0200 	orr.w	r2, r3, r0
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	440b      	add	r3, r1
 8001576:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800157a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3318      	adds	r3, #24
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	6811      	ldr	r1, [r2, #0]
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3318      	adds	r3, #24
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	440b      	add	r3, r1
 800159a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	e00e      	b.n	80015be <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e006      	b.n	80015be <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
  }
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015dc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80015de:	7afb      	ldrb	r3, [r7, #11]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d002      	beq.n	80015ea <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80015e4:	7afb      	ldrb	r3, [r7, #11]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d11d      	bne.n	8001626 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3301      	adds	r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3301      	adds	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3301      	adds	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001648:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d003      	beq.n	8001658 <HAL_CAN_GetRxMessage+0x24>
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	2b02      	cmp	r3, #2
 8001654:	f040 80f3 	bne.w	800183e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10e      	bne.n	800167c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d116      	bne.n	800169a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0e7      	b.n	800184c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d107      	bne.n	800169a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0d8      	b.n	800184c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	331b      	adds	r3, #27
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	4413      	add	r3, r2
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0204 	and.w	r2, r3, #4
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10c      	bne.n	80016d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	331b      	adds	r3, #27
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	4413      	add	r3, r2
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	0d5b      	lsrs	r3, r3, #21
 80016c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e00b      	b.n	80016ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	331b      	adds	r3, #27
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	4413      	add	r3, r2
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	08db      	lsrs	r3, r3, #3
 80016e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	331b      	adds	r3, #27
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4413      	add	r3, r2
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0202 	and.w	r2, r3, #2
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	331b      	adds	r3, #27
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	4413      	add	r3, r2
 800170c:	3304      	adds	r3, #4
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 020f 	and.w	r2, r3, #15
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	331b      	adds	r3, #27
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	4413      	add	r3, r2
 8001724:	3304      	adds	r3, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b2da      	uxtb	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	331b      	adds	r3, #27
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	3304      	adds	r3, #4
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0c1b      	lsrs	r3, r3, #16
 8001742:	b29a      	uxth	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4413      	add	r3, r2
 8001752:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	4413      	add	r3, r2
 8001768:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	0a1a      	lsrs	r2, r3, #8
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	4413      	add	r3, r2
 8001782:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0c1a      	lsrs	r2, r3, #16
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	3302      	adds	r3, #2
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	4413      	add	r3, r2
 800179c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	0e1a      	lsrs	r2, r3, #24
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	3303      	adds	r3, #3
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	3304      	adds	r3, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0a1a      	lsrs	r2, r3, #8
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	3305      	adds	r3, #5
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	0c1a      	lsrs	r2, r3, #16
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	3306      	adds	r3, #6
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0e1a      	lsrs	r2, r3, #24
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	3307      	adds	r3, #7
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d108      	bne.n	800182a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0220 	orr.w	r2, r2, #32
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	e007      	b.n	800183a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0220 	orr.w	r2, r2, #32
 8001838:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	e006      	b.n	800184c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
  }
}
 800184c:	4618      	mov	r0, r3
 800184e:	371c      	adds	r7, #28
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800186e:	7afb      	ldrb	r3, [r7, #11]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d002      	beq.n	800187a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001874:	7afb      	ldrb	r3, [r7, #11]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d10f      	bne.n	800189a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d106      	bne.n	800188e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	e005      	b.n	800189a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <__NVIC_EnableIRQ+0x38>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ff4c 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2a:	f7ff ff61 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	68b9      	ldr	r1, [r7, #8]
 8001a34:	6978      	ldr	r0, [r7, #20]
 8001a36:	f7ff ffb1 	bl	800199c <NVIC_EncodePriority>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff80 	bl	8001948 <__NVIC_SetPriority>
}
 8001a48:	bf00      	nop
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff54 	bl	800190c <__NVIC_EnableIRQ>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e177      	b.n	8001d78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f040 8166 	bne.w	8001d72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d005      	beq.n	8001abe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d130      	bne.n	8001b20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	2203      	movs	r2, #3
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af4:	2201      	movs	r2, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 0201 	and.w	r2, r3, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d017      	beq.n	8001b5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d123      	bne.n	8001bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	08da      	lsrs	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	220f      	movs	r2, #15
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	08da      	lsrs	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3208      	adds	r2, #8
 8001baa:	69b9      	ldr	r1, [r7, #24]
 8001bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0203 	and.w	r2, r3, #3
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80c0 	beq.w	8001d72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <HAL_GPIO_Init+0x324>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a65      	ldr	r2, [pc, #404]	; (8001d90 <HAL_GPIO_Init+0x324>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <HAL_GPIO_Init+0x324>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0e:	4a61      	ldr	r2, [pc, #388]	; (8001d94 <HAL_GPIO_Init+0x328>)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3302      	adds	r3, #2
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a58      	ldr	r2, [pc, #352]	; (8001d98 <HAL_GPIO_Init+0x32c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d037      	beq.n	8001caa <HAL_GPIO_Init+0x23e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a57      	ldr	r2, [pc, #348]	; (8001d9c <HAL_GPIO_Init+0x330>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d031      	beq.n	8001ca6 <HAL_GPIO_Init+0x23a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a56      	ldr	r2, [pc, #344]	; (8001da0 <HAL_GPIO_Init+0x334>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d02b      	beq.n	8001ca2 <HAL_GPIO_Init+0x236>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a55      	ldr	r2, [pc, #340]	; (8001da4 <HAL_GPIO_Init+0x338>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d025      	beq.n	8001c9e <HAL_GPIO_Init+0x232>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a54      	ldr	r2, [pc, #336]	; (8001da8 <HAL_GPIO_Init+0x33c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d01f      	beq.n	8001c9a <HAL_GPIO_Init+0x22e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a53      	ldr	r2, [pc, #332]	; (8001dac <HAL_GPIO_Init+0x340>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d019      	beq.n	8001c96 <HAL_GPIO_Init+0x22a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_GPIO_Init+0x344>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0x226>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a51      	ldr	r2, [pc, #324]	; (8001db4 <HAL_GPIO_Init+0x348>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00d      	beq.n	8001c8e <HAL_GPIO_Init+0x222>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a50      	ldr	r2, [pc, #320]	; (8001db8 <HAL_GPIO_Init+0x34c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x21e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4f      	ldr	r2, [pc, #316]	; (8001dbc <HAL_GPIO_Init+0x350>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_GPIO_Init+0x21a>
 8001c82:	2309      	movs	r3, #9
 8001c84:	e012      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c86:	230a      	movs	r3, #10
 8001c88:	e010      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	e00e      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c8e:	2307      	movs	r3, #7
 8001c90:	e00c      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c92:	2306      	movs	r3, #6
 8001c94:	e00a      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c96:	2305      	movs	r3, #5
 8001c98:	e008      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e004      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001caa:	2300      	movs	r3, #0
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	f002 0203 	and.w	r2, r2, #3
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	4093      	lsls	r3, r2
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cbc:	4935      	ldr	r1, [pc, #212]	; (8001d94 <HAL_GPIO_Init+0x328>)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cee:	4a34      	ldr	r2, [pc, #208]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf4:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d18:	4a29      	ldr	r2, [pc, #164]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1e:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d42:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3301      	adds	r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	2b0f      	cmp	r3, #15
 8001d7c:	f67f ae84 	bls.w	8001a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40013800 	.word	0x40013800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40021400 	.word	0x40021400
 8001db0:	40021800 	.word	0x40021800
 8001db4:	40021c00 	.word	0x40021c00
 8001db8:	40022000 	.word	0x40022000
 8001dbc:	40022400 	.word	0x40022400
 8001dc0:	40013c00 	.word	0x40013c00

08001dc4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_PWREx_EnableOverDrive+0x90>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <HAL_PWREx_EnableOverDrive+0x90>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_PWREx_EnableOverDrive+0x90>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dea:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_PWREx_EnableOverDrive+0x94>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df0:	f7ff f8e4 	bl	8000fbc <HAL_GetTick>
 8001df4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001df6:	e009      	b.n	8001e0c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001df8:	f7ff f8e0 	bl	8000fbc <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e06:	d901      	bls.n	8001e0c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e01f      	b.n	8001e4c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d1ee      	bne.n	8001df8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e20:	f7ff f8cc 	bl	8000fbc <HAL_GetTick>
 8001e24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e26:	e009      	b.n	8001e3c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e28:	f7ff f8c8 	bl	8000fbc <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e36:	d901      	bls.n	8001e3c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e007      	b.n	8001e4c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e48:	d1ee      	bne.n	8001e28 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	420e0040 	.word	0x420e0040
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	420e0044 	.word	0x420e0044

08001e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e267      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d075      	beq.n	8001f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e82:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d00c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8e:	4b85      	ldr	r3, [pc, #532]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d112      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9a:	4b82      	ldr	r3, [pc, #520]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	4b7e      	ldr	r3, [pc, #504]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d05b      	beq.n	8001f6c <HAL_RCC_OscConfig+0x108>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d157      	bne.n	8001f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e242      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec8:	d106      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x74>
 8001eca:	4b76      	ldr	r3, [pc, #472]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a75      	ldr	r2, [pc, #468]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e01d      	b.n	8001f14 <HAL_RCC_OscConfig+0xb0>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x98>
 8001ee2:	4b70      	ldr	r3, [pc, #448]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a6f      	ldr	r2, [pc, #444]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b6d      	ldr	r3, [pc, #436]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6c      	ldr	r2, [pc, #432]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0xb0>
 8001efc:	4b69      	ldr	r3, [pc, #420]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a68      	ldr	r2, [pc, #416]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a65      	ldr	r2, [pc, #404]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f84e 	bl	8000fbc <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff f84a 	bl	8000fbc <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e207      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0xc0>
 8001f42:	e014      	b.n	8001f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff f83a 	bl	8000fbc <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff f836 	bl	8000fbc <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1f3      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	4b51      	ldr	r3, [pc, #324]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0xe8>
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d063      	beq.n	8002042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d11c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d116      	bne.n	8001fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x152>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e1c7      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4937      	ldr	r1, [pc, #220]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	e03a      	b.n	8002042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd4:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7fe ffef 	bl	8000fbc <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe2:	f7fe ffeb 	bl	8000fbc <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e1a8      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4925      	ldr	r1, [pc, #148]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_OscConfig+0x244>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7fe ffce 	bl	8000fbc <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002024:	f7fe ffca 	bl	8000fbc <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e187      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d036      	beq.n	80020bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_RCC_OscConfig+0x248>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7fe ffae 	bl	8000fbc <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002064:	f7fe ffaa 	bl	8000fbc <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e167      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x200>
 8002082:	e01b      	b.n	80020bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_RCC_OscConfig+0x248>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7fe ff97 	bl	8000fbc <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	e00e      	b.n	80020b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002092:	f7fe ff93 	bl	8000fbc <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d907      	bls.n	80020b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e150      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
 80020a4:	40023800 	.word	0x40023800
 80020a8:	42470000 	.word	0x42470000
 80020ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	4b88      	ldr	r3, [pc, #544]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ea      	bne.n	8002092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8097 	beq.w	80021f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b81      	ldr	r3, [pc, #516]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b7d      	ldr	r3, [pc, #500]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a7c      	ldr	r2, [pc, #496]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b7a      	ldr	r3, [pc, #488]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b77      	ldr	r3, [pc, #476]	; (80022d8 <HAL_RCC_OscConfig+0x474>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d118      	bne.n	8002138 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002106:	4b74      	ldr	r3, [pc, #464]	; (80022d8 <HAL_RCC_OscConfig+0x474>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a73      	ldr	r2, [pc, #460]	; (80022d8 <HAL_RCC_OscConfig+0x474>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002112:	f7fe ff53 	bl	8000fbc <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7fe ff4f 	bl	8000fbc <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e10c      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x474>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x2ea>
 8002140:	4b64      	ldr	r3, [pc, #400]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	4a63      	ldr	r2, [pc, #396]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6713      	str	r3, [r2, #112]	; 0x70
 800214c:	e01c      	b.n	8002188 <HAL_RCC_OscConfig+0x324>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x30c>
 8002156:	4b5f      	ldr	r3, [pc, #380]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a5e      	ldr	r2, [pc, #376]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
 8002162:	4b5c      	ldr	r3, [pc, #368]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	4a5b      	ldr	r2, [pc, #364]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6713      	str	r3, [r2, #112]	; 0x70
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0x324>
 8002170:	4b58      	ldr	r3, [pc, #352]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4a57      	ldr	r2, [pc, #348]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6713      	str	r3, [r2, #112]	; 0x70
 800217c:	4b55      	ldr	r3, [pc, #340]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a54      	ldr	r2, [pc, #336]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7fe ff14 	bl	8000fbc <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	e00a      	b.n	80021ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe ff10 	bl	8000fbc <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0cb      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ae:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0ee      	beq.n	8002198 <HAL_RCC_OscConfig+0x334>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7fe fefe 	bl	8000fbc <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c2:	e00a      	b.n	80021da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7fe fefa 	bl	8000fbc <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0b5      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021da:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1ee      	bne.n	80021c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80a1 	beq.w	8002344 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002202:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d05c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d141      	bne.n	800229a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b31      	ldr	r3, [pc, #196]	; (80022dc <HAL_RCC_OscConfig+0x478>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fece 	bl	8000fbc <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe feca 	bl	8000fbc <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e087      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	3b01      	subs	r3, #1
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	491b      	ldr	r1, [pc, #108]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_RCC_OscConfig+0x478>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7fe fea3 	bl	8000fbc <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227a:	f7fe fe9f 	bl	8000fbc <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e05c      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x416>
 8002298:	e054      	b.n	8002344 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_RCC_OscConfig+0x478>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7fe fe8c 	bl	8000fbc <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a8:	f7fe fe88 	bl	8000fbc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e045      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x444>
 80022c6:	e03d      	b.n	8002344 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e038      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40007000 	.word	0x40007000
 80022dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x4ec>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d028      	beq.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d121      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d11a      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002318:	4293      	cmp	r3, r2
 800231a:	d111      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	3b01      	subs	r3, #1
 800232a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0cc      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b68      	ldr	r3, [pc, #416]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d90c      	bls.n	8002390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b65      	ldr	r3, [pc, #404]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b63      	ldr	r3, [pc, #396]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0b8      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a8:	4b59      	ldr	r3, [pc, #356]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a58      	ldr	r2, [pc, #352]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c0:	4b53      	ldr	r3, [pc, #332]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4a52      	ldr	r2, [pc, #328]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b50      	ldr	r3, [pc, #320]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	494d      	ldr	r1, [pc, #308]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d044      	beq.n	8002474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d119      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e07f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d003      	beq.n	8002412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240e:	2b03      	cmp	r3, #3
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002412:	4b3f      	ldr	r3, [pc, #252]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e06f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e067      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4b37      	ldr	r3, [pc, #220]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f023 0203 	bic.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4934      	ldr	r1, [pc, #208]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002444:	f7fe fdba 	bl	8000fbc <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	e00a      	b.n	8002462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7fe fdb6 	bl	8000fbc <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e04f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 020c 	and.w	r2, r3, #12
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	429a      	cmp	r2, r3
 8002472:	d1eb      	bne.n	800244c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002474:	4b25      	ldr	r3, [pc, #148]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d20c      	bcs.n	800249c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e032      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4916      	ldr	r1, [pc, #88]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	490e      	ldr	r1, [pc, #56]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024da:	f000 f821 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80024de:	4602      	mov	r2, r0
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	490a      	ldr	r1, [pc, #40]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	5ccb      	ldrb	r3, [r1, r3]
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fc1a 	bl	8000d34 <HAL_InitTick>

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023c00 	.word	0x40023c00
 8002510:	40023800 	.word	0x40023800
 8002514:	08007664 	.word	0x08007664
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002524:	b094      	sub	sp, #80	; 0x50
 8002526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	647b      	str	r3, [r7, #68]	; 0x44
 800252c:	2300      	movs	r3, #0
 800252e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002530:	2300      	movs	r3, #0
 8002532:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002538:	4b79      	ldr	r3, [pc, #484]	; (8002720 <HAL_RCC_GetSysClockFreq+0x200>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d00d      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x40>
 8002544:	2b08      	cmp	r3, #8
 8002546:	f200 80e1 	bhi.w	800270c <HAL_RCC_GetSysClockFreq+0x1ec>
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x34>
 800254e:	2b04      	cmp	r3, #4
 8002550:	d003      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x3a>
 8002552:	e0db      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b73      	ldr	r3, [pc, #460]	; (8002724 <HAL_RCC_GetSysClockFreq+0x204>)
 8002556:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002558:	e0db      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255a:	4b73      	ldr	r3, [pc, #460]	; (8002728 <HAL_RCC_GetSysClockFreq+0x208>)
 800255c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800255e:	e0d8      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002560:	4b6f      	ldr	r3, [pc, #444]	; (8002720 <HAL_RCC_GetSysClockFreq+0x200>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002568:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256a:	4b6d      	ldr	r3, [pc, #436]	; (8002720 <HAL_RCC_GetSysClockFreq+0x200>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d063      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b6a      	ldr	r3, [pc, #424]	; (8002720 <HAL_RCC_GetSysClockFreq+0x200>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	2200      	movs	r2, #0
 800257e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002580:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002588:	633b      	str	r3, [r7, #48]	; 0x30
 800258a:	2300      	movs	r3, #0
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
 800258e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002592:	4622      	mov	r2, r4
 8002594:	462b      	mov	r3, r5
 8002596:	f04f 0000 	mov.w	r0, #0
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	0159      	lsls	r1, r3, #5
 80025a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a4:	0150      	lsls	r0, r2, #5
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4621      	mov	r1, r4
 80025ac:	1a51      	subs	r1, r2, r1
 80025ae:	6139      	str	r1, [r7, #16]
 80025b0:	4629      	mov	r1, r5
 80025b2:	eb63 0301 	sbc.w	r3, r3, r1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025c4:	4659      	mov	r1, fp
 80025c6:	018b      	lsls	r3, r1, #6
 80025c8:	4651      	mov	r1, sl
 80025ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ce:	4651      	mov	r1, sl
 80025d0:	018a      	lsls	r2, r1, #6
 80025d2:	4651      	mov	r1, sl
 80025d4:	ebb2 0801 	subs.w	r8, r2, r1
 80025d8:	4659      	mov	r1, fp
 80025da:	eb63 0901 	sbc.w	r9, r3, r1
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025f2:	4690      	mov	r8, r2
 80025f4:	4699      	mov	r9, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	eb18 0303 	adds.w	r3, r8, r3
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	462b      	mov	r3, r5
 8002600:	eb49 0303 	adc.w	r3, r9, r3
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002612:	4629      	mov	r1, r5
 8002614:	024b      	lsls	r3, r1, #9
 8002616:	4621      	mov	r1, r4
 8002618:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800261c:	4621      	mov	r1, r4
 800261e:	024a      	lsls	r2, r1, #9
 8002620:	4610      	mov	r0, r2
 8002622:	4619      	mov	r1, r3
 8002624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002626:	2200      	movs	r2, #0
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
 800262a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800262c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002630:	f7fd fe2e 	bl	8000290 <__aeabi_uldivmod>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4613      	mov	r3, r2
 800263a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800263c:	e058      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263e:	4b38      	ldr	r3, [pc, #224]	; (8002720 <HAL_RCC_GetSysClockFreq+0x200>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	2200      	movs	r2, #0
 8002646:	4618      	mov	r0, r3
 8002648:	4611      	mov	r1, r2
 800264a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	2300      	movs	r3, #0
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
 8002654:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002658:	4642      	mov	r2, r8
 800265a:	464b      	mov	r3, r9
 800265c:	f04f 0000 	mov.w	r0, #0
 8002660:	f04f 0100 	mov.w	r1, #0
 8002664:	0159      	lsls	r1, r3, #5
 8002666:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800266a:	0150      	lsls	r0, r2, #5
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4641      	mov	r1, r8
 8002672:	ebb2 0a01 	subs.w	sl, r2, r1
 8002676:	4649      	mov	r1, r9
 8002678:	eb63 0b01 	sbc.w	fp, r3, r1
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002688:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800268c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002690:	ebb2 040a 	subs.w	r4, r2, sl
 8002694:	eb63 050b 	sbc.w	r5, r3, fp
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	00eb      	lsls	r3, r5, #3
 80026a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026a6:	00e2      	lsls	r2, r4, #3
 80026a8:	4614      	mov	r4, r2
 80026aa:	461d      	mov	r5, r3
 80026ac:	4643      	mov	r3, r8
 80026ae:	18e3      	adds	r3, r4, r3
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	464b      	mov	r3, r9
 80026b4:	eb45 0303 	adc.w	r3, r5, r3
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026c6:	4629      	mov	r1, r5
 80026c8:	028b      	lsls	r3, r1, #10
 80026ca:	4621      	mov	r1, r4
 80026cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026d0:	4621      	mov	r1, r4
 80026d2:	028a      	lsls	r2, r1, #10
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026da:	2200      	movs	r2, #0
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	61fa      	str	r2, [r7, #28]
 80026e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026e4:	f7fd fdd4 	bl	8000290 <__aeabi_uldivmod>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4613      	mov	r3, r2
 80026ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	3301      	adds	r3, #1
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800270a:	e002      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCC_GetSysClockFreq+0x204>)
 800270e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002714:	4618      	mov	r0, r3
 8002716:	3750      	adds	r7, #80	; 0x50
 8002718:	46bd      	mov	sp, r7
 800271a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	00f42400 	.word	0x00f42400
 8002728:	007a1200 	.word	0x007a1200

0800272c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_RCC_GetHCLKFreq+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000000 	.word	0x20000000

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002748:	f7ff fff0 	bl	800272c <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0a9b      	lsrs	r3, r3, #10
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4903      	ldr	r1, [pc, #12]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	08007674 	.word	0x08007674

0800276c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002770:	f7ff ffdc 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0b5b      	lsrs	r3, r3, #13
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4903      	ldr	r1, [pc, #12]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	08007674 	.word	0x08007674

08002794 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	220f      	movs	r2, #15
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_RCC_GetClockConfig+0x5c>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0203 	and.w	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_RCC_GetClockConfig+0x5c>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_RCC_GetClockConfig+0x5c>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <HAL_RCC_GetClockConfig+0x5c>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	08db      	lsrs	r3, r3, #3
 80027ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027d6:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <HAL_RCC_GetClockConfig+0x60>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 020f 	and.w	r2, r3, #15
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	601a      	str	r2, [r3, #0]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40023c00 	.word	0x40023c00

080027f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e041      	b.n	800288e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f839 	bl	8002896 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3304      	adds	r3, #4
 8002834:	4619      	mov	r1, r3
 8002836:	4610      	mov	r0, r2
 8002838:	f000 f9d8 	bl	8002bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d001      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e04e      	b.n	8002962 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a23      	ldr	r2, [pc, #140]	; (8002970 <HAL_TIM_Base_Start_IT+0xc4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d022      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ee:	d01d      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1f      	ldr	r2, [pc, #124]	; (8002974 <HAL_TIM_Base_Start_IT+0xc8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d018      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <HAL_TIM_Base_Start_IT+0xcc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d013      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1c      	ldr	r2, [pc, #112]	; (800297c <HAL_TIM_Base_Start_IT+0xd0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00e      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <HAL_TIM_Base_Start_IT+0xd4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d009      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <HAL_TIM_Base_Start_IT+0xd8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d004      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a18      	ldr	r2, [pc, #96]	; (8002988 <HAL_TIM_Base_Start_IT+0xdc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d111      	bne.n	8002950 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b06      	cmp	r3, #6
 800293c:	d010      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0201 	orr.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294e:	e007      	b.n	8002960 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40010000 	.word	0x40010000
 8002974:	40000400 	.word	0x40000400
 8002978:	40000800 	.word	0x40000800
 800297c:	40000c00 	.word	0x40000c00
 8002980:	40010400 	.word	0x40010400
 8002984:	40014000 	.word	0x40014000
 8002988:	40001800 	.word	0x40001800

0800298c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d122      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d11b      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0202 	mvn.w	r2, #2
 80029b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f8ee 	bl	8002bb0 <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f8e0 	bl	8002b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f8f1 	bl	8002bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d122      	bne.n	8002a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d11b      	bne.n	8002a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0204 	mvn.w	r2, #4
 8002a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2202      	movs	r2, #2
 8002a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8c4 	bl	8002bb0 <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8b6 	bl	8002b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f8c7 	bl	8002bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d122      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d11b      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0208 	mvn.w	r2, #8
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2204      	movs	r2, #4
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f89a 	bl	8002bb0 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f88c 	bl	8002b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f89d 	bl	8002bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	d122      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0210 	mvn.w	r2, #16
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2208      	movs	r2, #8
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f870 	bl	8002bb0 <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f862 	bl	8002b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f873 	bl	8002bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d10e      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d107      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0201 	mvn.w	r2, #1
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe f83e 	bl	8000b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d10e      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d107      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f902 	bl	8002d40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b40      	cmp	r3, #64	; 0x40
 8002b56:	d107      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f838 	bl	8002bd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0220 	mvn.w	r2, #32
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8cc 	bl	8002d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a40      	ldr	r2, [pc, #256]	; (8002d00 <TIM_Base_SetConfig+0x114>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0a:	d00f      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a3d      	ldr	r2, [pc, #244]	; (8002d04 <TIM_Base_SetConfig+0x118>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00b      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a3c      	ldr	r2, [pc, #240]	; (8002d08 <TIM_Base_SetConfig+0x11c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d007      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a3b      	ldr	r2, [pc, #236]	; (8002d0c <TIM_Base_SetConfig+0x120>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d003      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a3a      	ldr	r2, [pc, #232]	; (8002d10 <TIM_Base_SetConfig+0x124>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d108      	bne.n	8002c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a2f      	ldr	r2, [pc, #188]	; (8002d00 <TIM_Base_SetConfig+0x114>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d02b      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4c:	d027      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <TIM_Base_SetConfig+0x118>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d023      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a2b      	ldr	r2, [pc, #172]	; (8002d08 <TIM_Base_SetConfig+0x11c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01f      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a2a      	ldr	r2, [pc, #168]	; (8002d0c <TIM_Base_SetConfig+0x120>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01b      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a29      	ldr	r2, [pc, #164]	; (8002d10 <TIM_Base_SetConfig+0x124>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d017      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a28      	ldr	r2, [pc, #160]	; (8002d14 <TIM_Base_SetConfig+0x128>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <TIM_Base_SetConfig+0x12c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00f      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a26      	ldr	r2, [pc, #152]	; (8002d1c <TIM_Base_SetConfig+0x130>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00b      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <TIM_Base_SetConfig+0x134>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d007      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <TIM_Base_SetConfig+0x138>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d003      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a23      	ldr	r2, [pc, #140]	; (8002d28 <TIM_Base_SetConfig+0x13c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d108      	bne.n	8002cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <TIM_Base_SetConfig+0x114>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_Base_SetConfig+0xf8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <TIM_Base_SetConfig+0x124>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d103      	bne.n	8002cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	615a      	str	r2, [r3, #20]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	40010400 	.word	0x40010400
 8002d14:	40014000 	.word	0x40014000
 8002d18:	40014400 	.word	0x40014400
 8002d1c:	40014800 	.word	0x40014800
 8002d20:	40001800 	.word	0x40001800
 8002d24:	40001c00 	.word	0x40001c00
 8002d28:	40002000 	.word	0x40002000

08002d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e03f      	b.n	8002de6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fd ff92 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2224      	movs	r2, #36	; 0x24
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f929 	bl	8002ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b08a      	sub	sp, #40	; 0x28
 8002df2:	af02      	add	r7, sp, #8
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d17c      	bne.n	8002f08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_UART_Transmit+0x2c>
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e075      	b.n	8002f0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_UART_Transmit+0x3e>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e06e      	b.n	8002f0a <HAL_UART_Transmit+0x11c>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2221      	movs	r2, #33	; 0x21
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e42:	f7fe f8bb 	bl	8000fbc <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	88fa      	ldrh	r2, [r7, #6]
 8002e4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	88fa      	ldrh	r2, [r7, #6]
 8002e52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5c:	d108      	bne.n	8002e70 <HAL_UART_Transmit+0x82>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d104      	bne.n	8002e70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	e003      	b.n	8002e78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e80:	e02a      	b.n	8002ed8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2180      	movs	r1, #128	; 0x80
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f840 	bl	8002f12 <UART_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e036      	b.n	8002f0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	e007      	b.n	8002eca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1cf      	bne.n	8002e82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2140      	movs	r1, #64	; 0x40
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f810 	bl	8002f12 <UART_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e006      	b.n	8002f0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3720      	adds	r7, #32
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b090      	sub	sp, #64	; 0x40
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	603b      	str	r3, [r7, #0]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f22:	e050      	b.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2a:	d04c      	beq.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f32:	f7fe f843 	bl	8000fbc <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d241      	bcs.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	330c      	adds	r3, #12
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	330c      	adds	r3, #12
 8002f60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f62:	637a      	str	r2, [r7, #52]	; 0x34
 8002f64:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e5      	bne.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3314      	adds	r3, #20
 8002f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	613b      	str	r3, [r7, #16]
   return(result);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3314      	adds	r3, #20
 8002f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f96:	623a      	str	r2, [r7, #32]
 8002f98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	69f9      	ldr	r1, [r7, #28]
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e5      	bne.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e00f      	b.n	8002fe6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	bf0c      	ite	eq
 8002fd6:	2301      	moveq	r3, #1
 8002fd8:	2300      	movne	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d09f      	beq.n	8002f24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3740      	adds	r7, #64	; 0x40
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff4:	b0c0      	sub	sp, #256	; 0x100
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	68d9      	ldr	r1, [r3, #12]
 800300e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	ea40 0301 	orr.w	r3, r0, r1
 8003018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800301a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	431a      	orrs	r2, r3
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	431a      	orrs	r2, r3
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003048:	f021 010c 	bic.w	r1, r1, #12
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003056:	430b      	orrs	r3, r1
 8003058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306a:	6999      	ldr	r1, [r3, #24]
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	ea40 0301 	orr.w	r3, r0, r1
 8003076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b8f      	ldr	r3, [pc, #572]	; (80032bc <UART_SetConfig+0x2cc>)
 8003080:	429a      	cmp	r2, r3
 8003082:	d005      	beq.n	8003090 <UART_SetConfig+0xa0>
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b8d      	ldr	r3, [pc, #564]	; (80032c0 <UART_SetConfig+0x2d0>)
 800308c:	429a      	cmp	r2, r3
 800308e:	d104      	bne.n	800309a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7ff fb6c 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8003094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003098:	e003      	b.n	80030a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800309a:	f7ff fb53 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 800309e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ac:	f040 810c 	bne.w	80032c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030c2:	4622      	mov	r2, r4
 80030c4:	462b      	mov	r3, r5
 80030c6:	1891      	adds	r1, r2, r2
 80030c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80030ca:	415b      	adcs	r3, r3
 80030cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030d2:	4621      	mov	r1, r4
 80030d4:	eb12 0801 	adds.w	r8, r2, r1
 80030d8:	4629      	mov	r1, r5
 80030da:	eb43 0901 	adc.w	r9, r3, r1
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030f2:	4690      	mov	r8, r2
 80030f4:	4699      	mov	r9, r3
 80030f6:	4623      	mov	r3, r4
 80030f8:	eb18 0303 	adds.w	r3, r8, r3
 80030fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003100:	462b      	mov	r3, r5
 8003102:	eb49 0303 	adc.w	r3, r9, r3
 8003106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003116:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800311a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800311e:	460b      	mov	r3, r1
 8003120:	18db      	adds	r3, r3, r3
 8003122:	653b      	str	r3, [r7, #80]	; 0x50
 8003124:	4613      	mov	r3, r2
 8003126:	eb42 0303 	adc.w	r3, r2, r3
 800312a:	657b      	str	r3, [r7, #84]	; 0x54
 800312c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003134:	f7fd f8ac 	bl	8000290 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <UART_SetConfig+0x2d4>)
 800313e:	fba3 2302 	umull	r2, r3, r3, r2
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	011c      	lsls	r4, r3, #4
 8003146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800314a:	2200      	movs	r2, #0
 800314c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003150:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003158:	4642      	mov	r2, r8
 800315a:	464b      	mov	r3, r9
 800315c:	1891      	adds	r1, r2, r2
 800315e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003160:	415b      	adcs	r3, r3
 8003162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003168:	4641      	mov	r1, r8
 800316a:	eb12 0a01 	adds.w	sl, r2, r1
 800316e:	4649      	mov	r1, r9
 8003170:	eb43 0b01 	adc.w	fp, r3, r1
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003188:	4692      	mov	sl, r2
 800318a:	469b      	mov	fp, r3
 800318c:	4643      	mov	r3, r8
 800318e:	eb1a 0303 	adds.w	r3, sl, r3
 8003192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003196:	464b      	mov	r3, r9
 8003198:	eb4b 0303 	adc.w	r3, fp, r3
 800319c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031b4:	460b      	mov	r3, r1
 80031b6:	18db      	adds	r3, r3, r3
 80031b8:	643b      	str	r3, [r7, #64]	; 0x40
 80031ba:	4613      	mov	r3, r2
 80031bc:	eb42 0303 	adc.w	r3, r2, r3
 80031c0:	647b      	str	r3, [r7, #68]	; 0x44
 80031c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031ca:	f7fd f861 	bl	8000290 <__aeabi_uldivmod>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	4b3b      	ldr	r3, [pc, #236]	; (80032c4 <UART_SetConfig+0x2d4>)
 80031d6:	fba3 2301 	umull	r2, r3, r3, r1
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	2264      	movs	r2, #100	; 0x64
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	1acb      	subs	r3, r1, r3
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031ea:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <UART_SetConfig+0x2d4>)
 80031ec:	fba3 2302 	umull	r2, r3, r3, r2
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031f8:	441c      	add	r4, r3
 80031fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800320c:	4642      	mov	r2, r8
 800320e:	464b      	mov	r3, r9
 8003210:	1891      	adds	r1, r2, r2
 8003212:	63b9      	str	r1, [r7, #56]	; 0x38
 8003214:	415b      	adcs	r3, r3
 8003216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800321c:	4641      	mov	r1, r8
 800321e:	1851      	adds	r1, r2, r1
 8003220:	6339      	str	r1, [r7, #48]	; 0x30
 8003222:	4649      	mov	r1, r9
 8003224:	414b      	adcs	r3, r1
 8003226:	637b      	str	r3, [r7, #52]	; 0x34
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003234:	4659      	mov	r1, fp
 8003236:	00cb      	lsls	r3, r1, #3
 8003238:	4651      	mov	r1, sl
 800323a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323e:	4651      	mov	r1, sl
 8003240:	00ca      	lsls	r2, r1, #3
 8003242:	4610      	mov	r0, r2
 8003244:	4619      	mov	r1, r3
 8003246:	4603      	mov	r3, r0
 8003248:	4642      	mov	r2, r8
 800324a:	189b      	adds	r3, r3, r2
 800324c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003250:	464b      	mov	r3, r9
 8003252:	460a      	mov	r2, r1
 8003254:	eb42 0303 	adc.w	r3, r2, r3
 8003258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003268:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800326c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003270:	460b      	mov	r3, r1
 8003272:	18db      	adds	r3, r3, r3
 8003274:	62bb      	str	r3, [r7, #40]	; 0x28
 8003276:	4613      	mov	r3, r2
 8003278:	eb42 0303 	adc.w	r3, r2, r3
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003286:	f7fd f803 	bl	8000290 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <UART_SetConfig+0x2d4>)
 8003290:	fba3 1302 	umull	r1, r3, r3, r2
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	2164      	movs	r1, #100	; 0x64
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	3332      	adds	r3, #50	; 0x32
 80032a2:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <UART_SetConfig+0x2d4>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	f003 0207 	and.w	r2, r3, #7
 80032ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4422      	add	r2, r4
 80032b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032b8:	e105      	b.n	80034c6 <UART_SetConfig+0x4d6>
 80032ba:	bf00      	nop
 80032bc:	40011000 	.word	0x40011000
 80032c0:	40011400 	.word	0x40011400
 80032c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032da:	4642      	mov	r2, r8
 80032dc:	464b      	mov	r3, r9
 80032de:	1891      	adds	r1, r2, r2
 80032e0:	6239      	str	r1, [r7, #32]
 80032e2:	415b      	adcs	r3, r3
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
 80032e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032ea:	4641      	mov	r1, r8
 80032ec:	1854      	adds	r4, r2, r1
 80032ee:	4649      	mov	r1, r9
 80032f0:	eb43 0501 	adc.w	r5, r3, r1
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	00eb      	lsls	r3, r5, #3
 80032fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003302:	00e2      	lsls	r2, r4, #3
 8003304:	4614      	mov	r4, r2
 8003306:	461d      	mov	r5, r3
 8003308:	4643      	mov	r3, r8
 800330a:	18e3      	adds	r3, r4, r3
 800330c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003310:	464b      	mov	r3, r9
 8003312:	eb45 0303 	adc.w	r3, r5, r3
 8003316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800331a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003336:	4629      	mov	r1, r5
 8003338:	008b      	lsls	r3, r1, #2
 800333a:	4621      	mov	r1, r4
 800333c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003340:	4621      	mov	r1, r4
 8003342:	008a      	lsls	r2, r1, #2
 8003344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003348:	f7fc ffa2 	bl	8000290 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4b60      	ldr	r3, [pc, #384]	; (80034d4 <UART_SetConfig+0x4e4>)
 8003352:	fba3 2302 	umull	r2, r3, r3, r2
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	011c      	lsls	r4, r3, #4
 800335a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800335e:	2200      	movs	r2, #0
 8003360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800336c:	4642      	mov	r2, r8
 800336e:	464b      	mov	r3, r9
 8003370:	1891      	adds	r1, r2, r2
 8003372:	61b9      	str	r1, [r7, #24]
 8003374:	415b      	adcs	r3, r3
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800337c:	4641      	mov	r1, r8
 800337e:	1851      	adds	r1, r2, r1
 8003380:	6139      	str	r1, [r7, #16]
 8003382:	4649      	mov	r1, r9
 8003384:	414b      	adcs	r3, r1
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003394:	4659      	mov	r1, fp
 8003396:	00cb      	lsls	r3, r1, #3
 8003398:	4651      	mov	r1, sl
 800339a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800339e:	4651      	mov	r1, sl
 80033a0:	00ca      	lsls	r2, r1, #3
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	4642      	mov	r2, r8
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033b0:	464b      	mov	r3, r9
 80033b2:	460a      	mov	r2, r1
 80033b4:	eb42 0303 	adc.w	r3, r2, r3
 80033b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80033c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033d4:	4649      	mov	r1, r9
 80033d6:	008b      	lsls	r3, r1, #2
 80033d8:	4641      	mov	r1, r8
 80033da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033de:	4641      	mov	r1, r8
 80033e0:	008a      	lsls	r2, r1, #2
 80033e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033e6:	f7fc ff53 	bl	8000290 <__aeabi_uldivmod>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <UART_SetConfig+0x4e4>)
 80033f0:	fba3 1302 	umull	r1, r3, r3, r2
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	2164      	movs	r1, #100	; 0x64
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	3332      	adds	r3, #50	; 0x32
 8003402:	4a34      	ldr	r2, [pc, #208]	; (80034d4 <UART_SetConfig+0x4e4>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800340e:	441c      	add	r4, r3
 8003410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003414:	2200      	movs	r2, #0
 8003416:	673b      	str	r3, [r7, #112]	; 0x70
 8003418:	677a      	str	r2, [r7, #116]	; 0x74
 800341a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800341e:	4642      	mov	r2, r8
 8003420:	464b      	mov	r3, r9
 8003422:	1891      	adds	r1, r2, r2
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	415b      	adcs	r3, r3
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800342e:	4641      	mov	r1, r8
 8003430:	1851      	adds	r1, r2, r1
 8003432:	6039      	str	r1, [r7, #0]
 8003434:	4649      	mov	r1, r9
 8003436:	414b      	adcs	r3, r1
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003446:	4659      	mov	r1, fp
 8003448:	00cb      	lsls	r3, r1, #3
 800344a:	4651      	mov	r1, sl
 800344c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003450:	4651      	mov	r1, sl
 8003452:	00ca      	lsls	r2, r1, #3
 8003454:	4610      	mov	r0, r2
 8003456:	4619      	mov	r1, r3
 8003458:	4603      	mov	r3, r0
 800345a:	4642      	mov	r2, r8
 800345c:	189b      	adds	r3, r3, r2
 800345e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003460:	464b      	mov	r3, r9
 8003462:	460a      	mov	r2, r1
 8003464:	eb42 0303 	adc.w	r3, r2, r3
 8003468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	663b      	str	r3, [r7, #96]	; 0x60
 8003474:	667a      	str	r2, [r7, #100]	; 0x64
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003482:	4649      	mov	r1, r9
 8003484:	008b      	lsls	r3, r1, #2
 8003486:	4641      	mov	r1, r8
 8003488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800348c:	4641      	mov	r1, r8
 800348e:	008a      	lsls	r2, r1, #2
 8003490:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003494:	f7fc fefc 	bl	8000290 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <UART_SetConfig+0x4e4>)
 800349e:	fba3 1302 	umull	r1, r3, r3, r2
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2164      	movs	r1, #100	; 0x64
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	3332      	adds	r3, #50	; 0x32
 80034b0:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <UART_SetConfig+0x4e4>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	f003 020f 	and.w	r2, r3, #15
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4422      	add	r2, r4
 80034c4:	609a      	str	r2, [r3, #8]
}
 80034c6:	bf00      	nop
 80034c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034cc:	46bd      	mov	sp, r7
 80034ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d2:	bf00      	nop
 80034d4:	51eb851f 	.word	0x51eb851f

080034d8 <__NVIC_SetPriority>:
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	6039      	str	r1, [r7, #0]
 80034e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	db0a      	blt.n	8003502 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	490c      	ldr	r1, [pc, #48]	; (8003524 <__NVIC_SetPriority+0x4c>)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	0112      	lsls	r2, r2, #4
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	440b      	add	r3, r1
 80034fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003500:	e00a      	b.n	8003518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4908      	ldr	r1, [pc, #32]	; (8003528 <__NVIC_SetPriority+0x50>)
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	3b04      	subs	r3, #4
 8003510:	0112      	lsls	r2, r2, #4
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	440b      	add	r3, r1
 8003516:	761a      	strb	r2, [r3, #24]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000e100 	.word	0xe000e100
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <SysTick_Handler+0x1c>)
 8003532:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003534:	f002 f8ca 	bl	80056cc <xTaskGetSchedulerState>
 8003538:	4603      	mov	r3, r0
 800353a:	2b01      	cmp	r3, #1
 800353c:	d001      	beq.n	8003542 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800353e:	f003 f86b 	bl	8006618 <xPortSysTickHandler>
  }
}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	e000e010 	.word	0xe000e010

0800354c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003550:	2100      	movs	r1, #0
 8003552:	f06f 0004 	mvn.w	r0, #4
 8003556:	f7ff ffbf 	bl	80034d8 <__NVIC_SetPriority>
#endif
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003566:	f3ef 8305 	mrs	r3, IPSR
 800356a:	603b      	str	r3, [r7, #0]
  return(result);
 800356c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003572:	f06f 0305 	mvn.w	r3, #5
 8003576:	607b      	str	r3, [r7, #4]
 8003578:	e00c      	b.n	8003594 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <osKernelInitialize+0x44>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d105      	bne.n	800358e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <osKernelInitialize+0x44>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003588:	2300      	movs	r3, #0
 800358a:	607b      	str	r3, [r7, #4]
 800358c:	e002      	b.n	8003594 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800358e:	f04f 33ff 	mov.w	r3, #4294967295
 8003592:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003594:	687b      	ldr	r3, [r7, #4]
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000264 	.word	0x20000264

080035a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ae:	f3ef 8305 	mrs	r3, IPSR
 80035b2:	603b      	str	r3, [r7, #0]
  return(result);
 80035b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80035ba:	f06f 0305 	mvn.w	r3, #5
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	e010      	b.n	80035e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <osKernelStart+0x48>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d109      	bne.n	80035de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80035ca:	f7ff ffbf 	bl	800354c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80035ce:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <osKernelStart+0x48>)
 80035d0:	2202      	movs	r2, #2
 80035d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80035d4:	f001 fc0e 	bl	8004df4 <vTaskStartScheduler>
      stat = osOK;
 80035d8:	2300      	movs	r3, #0
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	e002      	b.n	80035e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80035de:	f04f 33ff 	mov.w	r3, #4294967295
 80035e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80035e4:	687b      	ldr	r3, [r7, #4]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000264 	.word	0x20000264

080035f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08e      	sub	sp, #56	; 0x38
 80035f8:	af04      	add	r7, sp, #16
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003604:	f3ef 8305 	mrs	r3, IPSR
 8003608:	617b      	str	r3, [r7, #20]
  return(result);
 800360a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800360c:	2b00      	cmp	r3, #0
 800360e:	d17e      	bne.n	800370e <osThreadNew+0x11a>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d07b      	beq.n	800370e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800361a:	2318      	movs	r3, #24
 800361c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295
 8003626:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d045      	beq.n	80036ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <osThreadNew+0x48>
        name = attr->name;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <osThreadNew+0x6e>
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b38      	cmp	r3, #56	; 0x38
 8003654:	d805      	bhi.n	8003662 <osThreadNew+0x6e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <osThreadNew+0x72>
        return (NULL);
 8003662:	2300      	movs	r3, #0
 8003664:	e054      	b.n	8003710 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	089b      	lsrs	r3, r3, #2
 8003674:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00e      	beq.n	800369c <osThreadNew+0xa8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2bbb      	cmp	r3, #187	; 0xbb
 8003684:	d90a      	bls.n	800369c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800368a:	2b00      	cmp	r3, #0
 800368c:	d006      	beq.n	800369c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <osThreadNew+0xa8>
        mem = 1;
 8003696:	2301      	movs	r3, #1
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	e010      	b.n	80036be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10c      	bne.n	80036be <osThreadNew+0xca>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d108      	bne.n	80036be <osThreadNew+0xca>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <osThreadNew+0xca>
          mem = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	e001      	b.n	80036be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d110      	bne.n	80036e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036cc:	9202      	str	r2, [sp, #8]
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6a3a      	ldr	r2, [r7, #32]
 80036d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f001 f9d2 	bl	8004a84 <xTaskCreateStatic>
 80036e0:	4603      	mov	r3, r0
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	e013      	b.n	800370e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d110      	bne.n	800370e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	f107 0310 	add.w	r3, r7, #16
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f001 fa1d 	bl	8004b3e <xTaskCreate>
 8003704:	4603      	mov	r3, r0
 8003706:	2b01      	cmp	r3, #1
 8003708:	d001      	beq.n	800370e <osThreadNew+0x11a>
            hTask = NULL;
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800370e:	693b      	ldr	r3, [r7, #16]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3728      	adds	r7, #40	; 0x28
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f002 fd99 	bl	8006258 <pvTimerGetTimerID>
 8003726:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <TimerCallback+0x22>
    callb->func (callb->arg);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	6852      	ldr	r2, [r2, #4]
 8003736:	4610      	mov	r0, r2
 8003738:	4798      	blx	r3
  }
}
 800373a:	bf00      	nop
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	460b      	mov	r3, r1
 8003752:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003758:	f3ef 8305 	mrs	r3, IPSR
 800375c:	613b      	str	r3, [r7, #16]
  return(result);
 800375e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8003760:	2b00      	cmp	r3, #0
 8003762:	d163      	bne.n	800382c <osTimerNew+0xe8>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d060      	beq.n	800382c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800376a:	2008      	movs	r0, #8
 800376c:	f002 ffe4 	bl	8006738 <pvPortMalloc>
 8003770:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d059      	beq.n	800382c <osTimerNew+0xe8>
      callb->func = func;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8003784:	7afb      	ldrb	r3, [r7, #11]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <osTimerNew+0x4c>
        reload = pdFALSE;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	e001      	b.n	8003794 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
 8003798:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01c      	beq.n	80037de <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <osTimerNew+0x6e>
          name = attr->name;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d006      	beq.n	80037c8 <osTimerNew+0x84>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b2b      	cmp	r3, #43	; 0x2b
 80037c0:	d902      	bls.n	80037c8 <osTimerNew+0x84>
          mem = 1;
 80037c2:	2301      	movs	r3, #1
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	e00c      	b.n	80037e2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d108      	bne.n	80037e2 <osTimerNew+0x9e>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d104      	bne.n	80037e2 <osTimerNew+0x9e>
            mem = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	e001      	b.n	80037e2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d10c      	bne.n	8003802 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	9301      	str	r3, [sp, #4]
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <osTimerNew+0xf4>)
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	2101      	movs	r1, #1
 80037f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037fa:	f002 f9ae 	bl	8005b5a <xTimerCreateStatic>
 80037fe:	6238      	str	r0, [r7, #32]
 8003800:	e00b      	b.n	800381a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d108      	bne.n	800381a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <osTimerNew+0xf4>)
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	2101      	movs	r1, #1
 8003812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003814:	f002 f980 	bl	8005b18 <xTimerCreate>
 8003818:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <osTimerNew+0xe8>
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <osTimerNew+0xe8>
        vPortFree (callb);
 8003826:	6978      	ldr	r0, [r7, #20]
 8003828:	f003 f852 	bl	80068d0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800382c:	6a3b      	ldr	r3, [r7, #32]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3728      	adds	r7, #40	; 0x28
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	08003719 	.word	0x08003719

0800383c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af02      	add	r7, sp, #8
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800384a:	f3ef 8305 	mrs	r3, IPSR
 800384e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003850:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <osTimerStart+0x22>
    stat = osErrorISR;
 8003856:	f06f 0305 	mvn.w	r3, #5
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	e017      	b.n	800388e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d103      	bne.n	800386c <osTimerStart+0x30>
    stat = osErrorParameter;
 8003864:	f06f 0303 	mvn.w	r3, #3
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e010      	b.n	800388e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800386c:	2300      	movs	r3, #0
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	2104      	movs	r1, #4
 8003876:	6938      	ldr	r0, [r7, #16]
 8003878:	f002 f9e8 	bl	8005c4c <xTimerGenericCommand>
 800387c:	4603      	mov	r3, r0
 800387e:	2b01      	cmp	r3, #1
 8003880:	d102      	bne.n	8003888 <osTimerStart+0x4c>
      stat = osOK;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	e002      	b.n	800388e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8003888:	f06f 0302 	mvn.w	r3, #2
 800388c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800388e:	697b      	ldr	r3, [r7, #20]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038a4:	f3ef 8305 	mrs	r3, IPSR
 80038a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80038aa:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d174      	bne.n	800399a <osMutexNew+0x102>
    if (attr != NULL) {
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <osMutexNew+0x26>
      type = attr->attr_bits;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e001      	b.n	80038c2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <osMutexNew+0x3a>
      rmtx = 1U;
 80038cc:	2301      	movs	r3, #1
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	e001      	b.n	80038d6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d15c      	bne.n	800399a <osMutexNew+0x102>
      mem = -1;
 80038e0:	f04f 33ff 	mov.w	r3, #4294967295
 80038e4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d015      	beq.n	8003918 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d006      	beq.n	8003902 <osMutexNew+0x6a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b4f      	cmp	r3, #79	; 0x4f
 80038fa:	d902      	bls.n	8003902 <osMutexNew+0x6a>
          mem = 1;
 80038fc:	2301      	movs	r3, #1
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	e00c      	b.n	800391c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d108      	bne.n	800391c <osMutexNew+0x84>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <osMutexNew+0x84>
            mem = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	e001      	b.n	800391c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d112      	bne.n	8003948 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4619      	mov	r1, r3
 800392e:	2004      	movs	r0, #4
 8003930:	f000 fb17 	bl	8003f62 <xQueueCreateMutexStatic>
 8003934:	61f8      	str	r0, [r7, #28]
 8003936:	e016      	b.n	8003966 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4619      	mov	r1, r3
 800393e:	2001      	movs	r0, #1
 8003940:	f000 fb0f 	bl	8003f62 <xQueueCreateMutexStatic>
 8003944:	61f8      	str	r0, [r7, #28]
 8003946:	e00e      	b.n	8003966 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003954:	2004      	movs	r0, #4
 8003956:	f000 faec 	bl	8003f32 <xQueueCreateMutex>
 800395a:	61f8      	str	r0, [r7, #28]
 800395c:	e003      	b.n	8003966 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800395e:	2001      	movs	r0, #1
 8003960:	f000 fae7 	bl	8003f32 <xQueueCreateMutex>
 8003964:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00c      	beq.n	8003986 <osMutexNew+0xee>
        if (attr != NULL) {
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <osMutexNew+0xe2>
          name = attr->name;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	e001      	b.n	800397e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800397e:	68f9      	ldr	r1, [r7, #12]
 8003980:	69f8      	ldr	r0, [r7, #28]
 8003982:	f001 f821 	bl	80049c8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d006      	beq.n	800399a <osMutexNew+0x102>
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800399a:	69fb      	ldr	r3, [r7, #28]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3720      	adds	r7, #32
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039c2:	f3ef 8305 	mrs	r3, IPSR
 80039c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80039c8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80039ce:	f06f 0305 	mvn.w	r3, #5
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	e02c      	b.n	8003a30 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d103      	bne.n	80039e4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80039dc:	f06f 0303 	mvn.w	r3, #3
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e025      	b.n	8003a30 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d011      	beq.n	8003a0e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80039ea:	6839      	ldr	r1, [r7, #0]
 80039ec:	6938      	ldr	r0, [r7, #16]
 80039ee:	f000 fb07 	bl	8004000 <xQueueTakeMutexRecursive>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d01b      	beq.n	8003a30 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80039fe:	f06f 0301 	mvn.w	r3, #1
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	e014      	b.n	8003a30 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003a06:	f06f 0302 	mvn.w	r3, #2
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	e010      	b.n	8003a30 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003a0e:	6839      	ldr	r1, [r7, #0]
 8003a10:	6938      	ldr	r0, [r7, #16]
 8003a12:	f000 fda5 	bl	8004560 <xQueueSemaphoreTake>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d009      	beq.n	8003a30 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003a22:	f06f 0301 	mvn.w	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e002      	b.n	8003a30 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003a2a:	f06f 0302 	mvn.w	r3, #2
 8003a2e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003a30:	697b      	ldr	r3, [r7, #20]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a56:	f3ef 8305 	mrs	r3, IPSR
 8003a5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a5c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <osMutexRelease+0x30>
    stat = osErrorISR;
 8003a62:	f06f 0305 	mvn.w	r3, #5
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	e01f      	b.n	8003aaa <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d103      	bne.n	8003a78 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003a70:	f06f 0303 	mvn.w	r3, #3
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	e018      	b.n	8003aaa <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003a7e:	6938      	ldr	r0, [r7, #16]
 8003a80:	f000 fa8a 	bl	8003f98 <xQueueGiveMutexRecursive>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d00f      	beq.n	8003aaa <osMutexRelease+0x70>
        stat = osErrorResource;
 8003a8a:	f06f 0302 	mvn.w	r3, #2
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e00b      	b.n	8003aaa <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003a92:	2300      	movs	r3, #0
 8003a94:	2200      	movs	r2, #0
 8003a96:	2100      	movs	r1, #0
 8003a98:	6938      	ldr	r0, [r7, #16]
 8003a9a:	f000 fae7 	bl	800406c <xQueueGenericSend>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d002      	beq.n	8003aaa <osMutexRelease+0x70>
        stat = osErrorResource;
 8003aa4:	f06f 0302 	mvn.w	r3, #2
 8003aa8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003aaa:	697b      	ldr	r3, [r7, #20]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4a07      	ldr	r2, [pc, #28]	; (8003ae0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003ac4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4a06      	ldr	r2, [pc, #24]	; (8003ae4 <vApplicationGetIdleTaskMemory+0x30>)
 8003aca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	601a      	str	r2, [r3, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000268 	.word	0x20000268
 8003ae4:	20000324 	.word	0x20000324

08003ae8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <vApplicationGetTimerTaskMemory+0x2c>)
 8003af8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4a06      	ldr	r2, [pc, #24]	; (8003b18 <vApplicationGetTimerTaskMemory+0x30>)
 8003afe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b06:	601a      	str	r2, [r3, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	20000524 	.word	0x20000524
 8003b18:	200005e0 	.word	0x200005e0

08003b1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f103 0208 	add.w	r2, r3, #8
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f04f 32ff 	mov.w	r2, #4294967295
 8003b34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f103 0208 	add.w	r2, r3, #8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f103 0208 	add.w	r2, r3, #8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d103      	bne.n	8003bde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	e00c      	b.n	8003bf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3308      	adds	r3, #8
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	e002      	b.n	8003bec <vListInsert+0x2e>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d2f6      	bcs.n	8003be6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	601a      	str	r2, [r3, #0]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6892      	ldr	r2, [r2, #8]
 8003c46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6852      	ldr	r2, [r2, #4]
 8003c50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d103      	bne.n	8003c64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	1e5a      	subs	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003caa:	bf00      	nop
 8003cac:	e7fe      	b.n	8003cac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003cae:	f002 fc21 	bl	80064f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	68f9      	ldr	r1, [r7, #12]
 8003cbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cbe:	fb01 f303 	mul.w	r3, r1, r3
 8003cc2:	441a      	add	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	68f9      	ldr	r1, [r7, #12]
 8003ce2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	441a      	add	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	22ff      	movs	r2, #255	; 0xff
 8003cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	22ff      	movs	r2, #255	; 0xff
 8003cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d114      	bne.n	8003d2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01a      	beq.n	8003d42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3310      	adds	r3, #16
 8003d10:	4618      	mov	r0, r3
 8003d12:	f001 fb09 	bl	8005328 <xTaskRemoveFromEventList>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d012      	beq.n	8003d42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <xQueueGenericReset+0xcc>)
 8003d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	e009      	b.n	8003d42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3310      	adds	r3, #16
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff fef2 	bl	8003b1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3324      	adds	r3, #36	; 0x24
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff feed 	bl	8003b1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d42:	f002 fc07 	bl	8006554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d46:	2301      	movs	r3, #1
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	e000ed04 	.word	0xe000ed04

08003d54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08e      	sub	sp, #56	; 0x38
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10a      	bne.n	8003d7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10a      	bne.n	8003d9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d96:	bf00      	nop
 8003d98:	e7fe      	b.n	8003d98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <xQueueGenericCreateStatic+0x52>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <xQueueGenericCreateStatic+0x56>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <xQueueGenericCreateStatic+0x58>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	623b      	str	r3, [r7, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d102      	bne.n	8003dd2 <xQueueGenericCreateStatic+0x7e>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <xQueueGenericCreateStatic+0x82>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <xQueueGenericCreateStatic+0x84>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	61fb      	str	r3, [r7, #28]
}
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003df2:	2350      	movs	r3, #80	; 0x50
 8003df4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b50      	cmp	r3, #80	; 0x50
 8003dfa:	d00a      	beq.n	8003e12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	61bb      	str	r3, [r7, #24]
}
 8003e0e:	bf00      	nop
 8003e10:	e7fe      	b.n	8003e10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f83f 	bl	8003eb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3730      	adds	r7, #48	; 0x30
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	; 0x28
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	613b      	str	r3, [r7, #16]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	3350      	adds	r3, #80	; 0x50
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f002 fc5b 	bl	8006738 <pvPortMalloc>
 8003e82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d011      	beq.n	8003eae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	3350      	adds	r3, #80	; 0x50
 8003e92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e9c:	79fa      	ldrb	r2, [r7, #7]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f805 	bl	8003eb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003eae:	69bb      	ldr	r3, [r7, #24]
	}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3720      	adds	r7, #32
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d103      	bne.n	8003ed4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e002      	b.n	8003eda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	69b8      	ldr	r0, [r7, #24]
 8003eea:	f7ff fecb 	bl	8003c84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	78fa      	ldrb	r2, [r7, #3]
 8003ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00e      	beq.n	8003f2a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003f1e:	2300      	movs	r3, #0
 8003f20:	2200      	movs	r2, #0
 8003f22:	2100      	movs	r1, #0
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f8a1 	bl	800406c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	461a      	mov	r2, r3
 8003f48:	6939      	ldr	r1, [r7, #16]
 8003f4a:	6978      	ldr	r0, [r7, #20]
 8003f4c:	f7ff ff7a 	bl	8003e44 <xQueueGenericCreate>
 8003f50:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f7ff ffd3 	bl	8003efe <prvInitialiseMutex>

		return xNewQueue;
 8003f58:	68fb      	ldr	r3, [r7, #12]
	}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b088      	sub	sp, #32
 8003f66:	af02      	add	r7, sp, #8
 8003f68:	4603      	mov	r3, r0
 8003f6a:	6039      	str	r1, [r7, #0]
 8003f6c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	6939      	ldr	r1, [r7, #16]
 8003f80:	6978      	ldr	r0, [r7, #20]
 8003f82:	f7ff fee7 	bl	8003d54 <xQueueGenericCreateStatic>
 8003f86:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff ffb8 	bl	8003efe <prvInitialiseMutex>

		return xNewQueue;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
	}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	60fb      	str	r3, [r7, #12]
}
 8003fbc:	bf00      	nop
 8003fbe:	e7fe      	b.n	8003fbe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	689c      	ldr	r4, [r3, #8]
 8003fc4:	f001 fb72 	bl	80056ac <xTaskGetCurrentTaskHandle>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	429c      	cmp	r4, r3
 8003fcc:	d111      	bne.n	8003ff2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	1e5a      	subs	r2, r3, #1
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	6938      	ldr	r0, [r7, #16]
 8003fe8:	f000 f840 	bl	800406c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003fec:	2301      	movs	r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e001      	b.n	8003ff6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003ff6:	697b      	ldr	r3, [r7, #20]
	}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd90      	pop	{r4, r7, pc}

08004000 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	60fb      	str	r3, [r7, #12]
}
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	689c      	ldr	r4, [r3, #8]
 800402e:	f001 fb3d 	bl	80056ac <xTaskGetCurrentTaskHandle>
 8004032:	4603      	mov	r3, r0
 8004034:	429c      	cmp	r4, r3
 8004036:	d107      	bne.n	8004048 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004042:	2301      	movs	r3, #1
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e00c      	b.n	8004062 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004048:	6839      	ldr	r1, [r7, #0]
 800404a:	6938      	ldr	r0, [r7, #16]
 800404c:	f000 fa88 	bl	8004560 <xQueueSemaphoreTake>
 8004050:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d004      	beq.n	8004062 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004062:	697b      	ldr	r3, [r7, #20]
	}
 8004064:	4618      	mov	r0, r3
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	bd90      	pop	{r4, r7, pc}

0800406c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08e      	sub	sp, #56	; 0x38
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800407a:	2300      	movs	r3, #0
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <xQueueGenericSend+0x32>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800409a:	bf00      	nop
 800409c:	e7fe      	b.n	800409c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d103      	bne.n	80040ac <xQueueGenericSend+0x40>
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <xQueueGenericSend+0x44>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <xQueueGenericSend+0x46>
 80040b0:	2300      	movs	r3, #0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <xQueueGenericSend+0x60>
	__asm volatile
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040c8:	bf00      	nop
 80040ca:	e7fe      	b.n	80040ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d103      	bne.n	80040da <xQueueGenericSend+0x6e>
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <xQueueGenericSend+0x72>
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <xQueueGenericSend+0x74>
 80040de:	2300      	movs	r3, #0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <xQueueGenericSend+0x8e>
	__asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	623b      	str	r3, [r7, #32]
}
 80040f6:	bf00      	nop
 80040f8:	e7fe      	b.n	80040f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040fa:	f001 fae7 	bl	80056cc <xTaskGetSchedulerState>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <xQueueGenericSend+0x9e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <xQueueGenericSend+0xa2>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <xQueueGenericSend+0xa4>
 800410e:	2300      	movs	r3, #0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <xQueueGenericSend+0xbe>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	61fb      	str	r3, [r7, #28]
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800412a:	f002 f9e3 	bl	80064f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <xQueueGenericSend+0xd4>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d129      	bne.n	8004194 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004146:	f000 fb2f 	bl	80047a8 <prvCopyDataToQueue>
 800414a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	d010      	beq.n	8004176 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	3324      	adds	r3, #36	; 0x24
 8004158:	4618      	mov	r0, r3
 800415a:	f001 f8e5 	bl	8005328 <xTaskRemoveFromEventList>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d013      	beq.n	800418c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004164:	4b3f      	ldr	r3, [pc, #252]	; (8004264 <xQueueGenericSend+0x1f8>)
 8004166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	e00a      	b.n	800418c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800417c:	4b39      	ldr	r3, [pc, #228]	; (8004264 <xQueueGenericSend+0x1f8>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800418c:	f002 f9e2 	bl	8006554 <vPortExitCritical>
				return pdPASS;
 8004190:	2301      	movs	r3, #1
 8004192:	e063      	b.n	800425c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d103      	bne.n	80041a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800419a:	f002 f9db 	bl	8006554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	e05c      	b.n	800425c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	4618      	mov	r0, r3
 80041ae:	f001 f91f 	bl	80053f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041b2:	2301      	movs	r3, #1
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041b6:	f002 f9cd 	bl	8006554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041ba:	f000 fe8b 	bl	8004ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041be:	f002 f999 	bl	80064f4 <vPortEnterCritical>
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d103      	bne.n	80041d8 <xQueueGenericSend+0x16c>
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041de:	b25b      	sxtb	r3, r3
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d103      	bne.n	80041ee <xQueueGenericSend+0x182>
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ee:	f002 f9b1 	bl	8006554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041f2:	1d3a      	adds	r2, r7, #4
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 f90e 	bl	800541c <xTaskCheckForTimeOut>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d124      	bne.n	8004250 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004208:	f000 fbc6 	bl	8004998 <prvIsQueueFull>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d018      	beq.n	8004244 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	3310      	adds	r3, #16
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f001 f834 	bl	8005288 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004222:	f000 fb51 	bl	80048c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004226:	f000 fe63 	bl	8004ef0 <xTaskResumeAll>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	f47f af7c 	bne.w	800412a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <xQueueGenericSend+0x1f8>)
 8004234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	e772      	b.n	800412a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004246:	f000 fb3f 	bl	80048c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800424a:	f000 fe51 	bl	8004ef0 <xTaskResumeAll>
 800424e:	e76c      	b.n	800412a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004252:	f000 fb39 	bl	80048c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004256:	f000 fe4b 	bl	8004ef0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800425a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800425c:	4618      	mov	r0, r3
 800425e:	3738      	adds	r7, #56	; 0x38
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	e000ed04 	.word	0xe000ed04

08004268 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b090      	sub	sp, #64	; 0x40
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d103      	bne.n	80042a4 <xQueueGenericSendFromISR+0x3c>
 800429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <xQueueGenericSendFromISR+0x40>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <xQueueGenericSendFromISR+0x42>
 80042a8:	2300      	movs	r3, #0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042c0:	bf00      	nop
 80042c2:	e7fe      	b.n	80042c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d103      	bne.n	80042d2 <xQueueGenericSendFromISR+0x6a>
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <xQueueGenericSendFromISR+0x6e>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <xQueueGenericSendFromISR+0x70>
 80042d6:	2300      	movs	r3, #0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	623b      	str	r3, [r7, #32]
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042f2:	f002 f9e1 	bl	80066b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042f6:	f3ef 8211 	mrs	r2, BASEPRI
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	61fa      	str	r2, [r7, #28]
 800430c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800430e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	429a      	cmp	r2, r3
 800431c:	d302      	bcc.n	8004324 <xQueueGenericSendFromISR+0xbc>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d12f      	bne.n	8004384 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800432a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800433a:	f000 fa35 	bl	80047a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800433e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d112      	bne.n	800436e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	2b00      	cmp	r3, #0
 800434e:	d016      	beq.n	800437e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004352:	3324      	adds	r3, #36	; 0x24
 8004354:	4618      	mov	r0, r3
 8004356:	f000 ffe7 	bl	8005328 <xTaskRemoveFromEventList>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00e      	beq.n	800437e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	e007      	b.n	800437e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800436e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004372:	3301      	adds	r3, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	b25a      	sxtb	r2, r3
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800437e:	2301      	movs	r3, #1
 8004380:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004382:	e001      	b.n	8004388 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004384:	2300      	movs	r3, #0
 8004386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004392:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004396:	4618      	mov	r0, r3
 8004398:	3740      	adds	r7, #64	; 0x40
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08c      	sub	sp, #48	; 0x30
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80043ac:	2300      	movs	r3, #0
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <xQueueReceive+0x30>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	623b      	str	r3, [r7, #32]
}
 80043cc:	bf00      	nop
 80043ce:	e7fe      	b.n	80043ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <xQueueReceive+0x3e>
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <xQueueReceive+0x42>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <xQueueReceive+0x44>
 80043e2:	2300      	movs	r3, #0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <xQueueReceive+0x5e>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	61fb      	str	r3, [r7, #28]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043fe:	f001 f965 	bl	80056cc <xTaskGetSchedulerState>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d102      	bne.n	800440e <xQueueReceive+0x6e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <xQueueReceive+0x72>
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <xQueueReceive+0x74>
 8004412:	2300      	movs	r3, #0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <xQueueReceive+0x8e>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	61bb      	str	r3, [r7, #24]
}
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800442e:	f002 f861 	bl	80064f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01f      	beq.n	800447e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004442:	f000 fa1b 	bl	800487c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	1e5a      	subs	r2, r3, #1
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00f      	beq.n	8004476 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	3310      	adds	r3, #16
 800445a:	4618      	mov	r0, r3
 800445c:	f000 ff64 	bl	8005328 <xTaskRemoveFromEventList>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d007      	beq.n	8004476 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004466:	4b3d      	ldr	r3, [pc, #244]	; (800455c <xQueueReceive+0x1bc>)
 8004468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004476:	f002 f86d 	bl	8006554 <vPortExitCritical>
				return pdPASS;
 800447a:	2301      	movs	r3, #1
 800447c:	e069      	b.n	8004552 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d103      	bne.n	800448c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004484:	f002 f866 	bl	8006554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004488:	2300      	movs	r3, #0
 800448a:	e062      	b.n	8004552 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004492:	f107 0310 	add.w	r3, r7, #16
 8004496:	4618      	mov	r0, r3
 8004498:	f000 ffaa 	bl	80053f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800449c:	2301      	movs	r3, #1
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044a0:	f002 f858 	bl	8006554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044a4:	f000 fd16 	bl	8004ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044a8:	f002 f824 	bl	80064f4 <vPortEnterCritical>
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044b2:	b25b      	sxtb	r3, r3
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d103      	bne.n	80044c2 <xQueueReceive+0x122>
 80044ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044c8:	b25b      	sxtb	r3, r3
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d103      	bne.n	80044d8 <xQueueReceive+0x138>
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044d8:	f002 f83c 	bl	8006554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044dc:	1d3a      	adds	r2, r7, #4
 80044de:	f107 0310 	add.w	r3, r7, #16
 80044e2:	4611      	mov	r1, r2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 ff99 	bl	800541c <xTaskCheckForTimeOut>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d123      	bne.n	8004538 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f2:	f000 fa3b 	bl	800496c <prvIsQueueEmpty>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d017      	beq.n	800452c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	3324      	adds	r3, #36	; 0x24
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f000 febf 	bl	8005288 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800450a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800450c:	f000 f9dc 	bl	80048c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004510:	f000 fcee 	bl	8004ef0 <xTaskResumeAll>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d189      	bne.n	800442e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <xQueueReceive+0x1bc>)
 800451c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	e780      	b.n	800442e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800452c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800452e:	f000 f9cb 	bl	80048c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004532:	f000 fcdd 	bl	8004ef0 <xTaskResumeAll>
 8004536:	e77a      	b.n	800442e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800453a:	f000 f9c5 	bl	80048c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800453e:	f000 fcd7 	bl	8004ef0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004544:	f000 fa12 	bl	800496c <prvIsQueueEmpty>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	f43f af6f 	beq.w	800442e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004550:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004552:	4618      	mov	r0, r3
 8004554:	3730      	adds	r7, #48	; 0x30
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	e000ed04 	.word	0xe000ed04

08004560 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08e      	sub	sp, #56	; 0x38
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800456a:	2300      	movs	r3, #0
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004572:	2300      	movs	r3, #0
 8004574:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	623b      	str	r3, [r7, #32]
}
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	61fb      	str	r3, [r7, #28]
}
 80045ac:	bf00      	nop
 80045ae:	e7fe      	b.n	80045ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045b0:	f001 f88c 	bl	80056cc <xTaskGetSchedulerState>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d102      	bne.n	80045c0 <xQueueSemaphoreTake+0x60>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <xQueueSemaphoreTake+0x64>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <xQueueSemaphoreTake+0x66>
 80045c4:	2300      	movs	r3, #0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	61bb      	str	r3, [r7, #24]
}
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045e0:	f001 ff88 	bl	80064f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80045e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d024      	beq.n	800463a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	1e5a      	subs	r2, r3, #1
 80045f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004600:	f001 f9da 	bl	80059b8 <pvTaskIncrementMutexHeldCount>
 8004604:	4602      	mov	r2, r0
 8004606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004608:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00f      	beq.n	8004632 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	3310      	adds	r3, #16
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fe86 	bl	8005328 <xTaskRemoveFromEventList>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004622:	4b54      	ldr	r3, [pc, #336]	; (8004774 <xQueueSemaphoreTake+0x214>)
 8004624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004632:	f001 ff8f 	bl	8006554 <vPortExitCritical>
				return pdPASS;
 8004636:	2301      	movs	r3, #1
 8004638:	e097      	b.n	800476a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d111      	bne.n	8004664 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	617b      	str	r3, [r7, #20]
}
 8004658:	bf00      	nop
 800465a:	e7fe      	b.n	800465a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800465c:	f001 ff7a 	bl	8006554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004660:	2300      	movs	r3, #0
 8004662:	e082      	b.n	800476a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800466a:	f107 030c 	add.w	r3, r7, #12
 800466e:	4618      	mov	r0, r3
 8004670:	f000 febe 	bl	80053f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004674:	2301      	movs	r3, #1
 8004676:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004678:	f001 ff6c 	bl	8006554 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800467c:	f000 fc2a 	bl	8004ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004680:	f001 ff38 	bl	80064f4 <vPortEnterCritical>
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800468a:	b25b      	sxtb	r3, r3
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d103      	bne.n	800469a <xQueueSemaphoreTake+0x13a>
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a0:	b25b      	sxtb	r3, r3
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d103      	bne.n	80046b0 <xQueueSemaphoreTake+0x150>
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b0:	f001 ff50 	bl	8006554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046b4:	463a      	mov	r2, r7
 80046b6:	f107 030c 	add.w	r3, r7, #12
 80046ba:	4611      	mov	r1, r2
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fead 	bl	800541c <xTaskCheckForTimeOut>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d132      	bne.n	800472e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046ca:	f000 f94f 	bl	800496c <prvIsQueueEmpty>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d026      	beq.n	8004722 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80046dc:	f001 ff0a 	bl	80064f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 f80f 	bl	8005708 <xTaskPriorityInherit>
 80046ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80046ec:	f001 ff32 	bl	8006554 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	3324      	adds	r3, #36	; 0x24
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	4611      	mov	r1, r2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fdc5 	bl	8005288 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004700:	f000 f8e2 	bl	80048c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004704:	f000 fbf4 	bl	8004ef0 <xTaskResumeAll>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	f47f af68 	bne.w	80045e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004710:	4b18      	ldr	r3, [pc, #96]	; (8004774 <xQueueSemaphoreTake+0x214>)
 8004712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	e75e      	b.n	80045e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004722:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004724:	f000 f8d0 	bl	80048c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004728:	f000 fbe2 	bl	8004ef0 <xTaskResumeAll>
 800472c:	e758      	b.n	80045e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800472e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004730:	f000 f8ca 	bl	80048c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004734:	f000 fbdc 	bl	8004ef0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800473a:	f000 f917 	bl	800496c <prvIsQueueEmpty>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	f43f af4d 	beq.w	80045e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00d      	beq.n	8004768 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800474c:	f001 fed2 	bl	80064f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004752:	f000 f811 	bl	8004778 <prvGetDisinheritPriorityAfterTimeout>
 8004756:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800475e:	4618      	mov	r0, r3
 8004760:	f001 f8a8 	bl	80058b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004764:	f001 fef6 	bl	8006554 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004768:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800476a:	4618      	mov	r0, r3
 800476c:	3738      	adds	r7, #56	; 0x38
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	e000ed04 	.word	0xe000ed04

08004778 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2b00      	cmp	r3, #0
 8004786:	d006      	beq.n	8004796 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e001      	b.n	800479a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800479a:	68fb      	ldr	r3, [r7, #12]
	}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10d      	bne.n	80047e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d14d      	bne.n	800486a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 f800 	bl	80057d8 <xTaskPriorityDisinherit>
 80047d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	e043      	b.n	800486a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d119      	bne.n	800481c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6858      	ldr	r0, [r3, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	461a      	mov	r2, r3
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	f002 f9b6 	bl	8006b64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	441a      	add	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	429a      	cmp	r2, r3
 8004810:	d32b      	bcc.n	800486a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	e026      	b.n	800486a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68d8      	ldr	r0, [r3, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	461a      	mov	r2, r3
 8004826:	68b9      	ldr	r1, [r7, #8]
 8004828:	f002 f99c 	bl	8006b64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	425b      	negs	r3, r3
 8004836:	441a      	add	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d207      	bcs.n	8004858 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	425b      	negs	r3, r3
 8004852:	441a      	add	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d105      	bne.n	800486a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	3b01      	subs	r3, #1
 8004868:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004872:	697b      	ldr	r3, [r7, #20]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d018      	beq.n	80048c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	441a      	add	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d303      	bcc.n	80048b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68d9      	ldr	r1, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	461a      	mov	r2, r3
 80048ba:	6838      	ldr	r0, [r7, #0]
 80048bc:	f002 f952 	bl	8006b64 <memcpy>
	}
}
 80048c0:	bf00      	nop
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048d0:	f001 fe10 	bl	80064f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048dc:	e011      	b.n	8004902 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d012      	beq.n	800490c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3324      	adds	r3, #36	; 0x24
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fd1c 	bl	8005328 <xTaskRemoveFromEventList>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048f6:	f000 fdf3 	bl	80054e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	dce9      	bgt.n	80048de <prvUnlockQueue+0x16>
 800490a:	e000      	b.n	800490e <prvUnlockQueue+0x46>
					break;
 800490c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	22ff      	movs	r2, #255	; 0xff
 8004912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004916:	f001 fe1d 	bl	8006554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800491a:	f001 fdeb 	bl	80064f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004924:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004926:	e011      	b.n	800494c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d012      	beq.n	8004956 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3310      	adds	r3, #16
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fcf7 	bl	8005328 <xTaskRemoveFromEventList>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004940:	f000 fdce 	bl	80054e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004944:	7bbb      	ldrb	r3, [r7, #14]
 8004946:	3b01      	subs	r3, #1
 8004948:	b2db      	uxtb	r3, r3
 800494a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800494c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004950:	2b00      	cmp	r3, #0
 8004952:	dce9      	bgt.n	8004928 <prvUnlockQueue+0x60>
 8004954:	e000      	b.n	8004958 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004956:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	22ff      	movs	r2, #255	; 0xff
 800495c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004960:	f001 fdf8 	bl	8006554 <vPortExitCritical>
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004974:	f001 fdbe 	bl	80064f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004980:	2301      	movs	r3, #1
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	e001      	b.n	800498a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800498a:	f001 fde3 	bl	8006554 <vPortExitCritical>

	return xReturn;
 800498e:	68fb      	ldr	r3, [r7, #12]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049a0:	f001 fda8 	bl	80064f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d102      	bne.n	80049b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e001      	b.n	80049ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049ba:	f001 fdcb 	bl	8006554 <vPortExitCritical>

	return xReturn;
 80049be:	68fb      	ldr	r3, [r7, #12]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	e014      	b.n	8004a02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80049d8:	4a0f      	ldr	r2, [pc, #60]	; (8004a18 <vQueueAddToRegistry+0x50>)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10b      	bne.n	80049fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049e4:	490c      	ldr	r1, [pc, #48]	; (8004a18 <vQueueAddToRegistry+0x50>)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049ee:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <vQueueAddToRegistry+0x50>)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	4413      	add	r3, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049fa:	e006      	b.n	8004a0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3301      	adds	r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b07      	cmp	r3, #7
 8004a06:	d9e7      	bls.n	80049d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	200009e0 	.word	0x200009e0

08004a1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a2c:	f001 fd62 	bl	80064f4 <vPortEnterCritical>
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a36:	b25b      	sxtb	r3, r3
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d103      	bne.n	8004a46 <vQueueWaitForMessageRestricted+0x2a>
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a4c:	b25b      	sxtb	r3, r3
 8004a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a52:	d103      	bne.n	8004a5c <vQueueWaitForMessageRestricted+0x40>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a5c:	f001 fd7a 	bl	8006554 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	3324      	adds	r3, #36	; 0x24
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fc2d 	bl	80052d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a76:	6978      	ldr	r0, [r7, #20]
 8004a78:	f7ff ff26 	bl	80048c8 <prvUnlockQueue>
	}
 8004a7c:	bf00      	nop
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08e      	sub	sp, #56	; 0x38
 8004a88:	af04      	add	r7, sp, #16
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	623b      	str	r3, [r7, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	e7fe      	b.n	8004aac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <xTaskCreateStatic+0x46>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	61fb      	str	r3, [r7, #28]
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004aca:	23bc      	movs	r3, #188	; 0xbc
 8004acc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2bbc      	cmp	r3, #188	; 0xbc
 8004ad2:	d00a      	beq.n	8004aea <xTaskCreateStatic+0x66>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	61bb      	str	r3, [r7, #24]
}
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004aea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d01e      	beq.n	8004b30 <xTaskCreateStatic+0xac>
 8004af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01b      	beq.n	8004b30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	2202      	movs	r2, #2
 8004b06:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	9303      	str	r3, [sp, #12]
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	9302      	str	r3, [sp, #8]
 8004b12:	f107 0314 	add.w	r3, r7, #20
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f850 	bl	8004bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b2a:	f000 f8f3 	bl	8004d14 <prvAddNewTaskToReadyList>
 8004b2e:	e001      	b.n	8004b34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b34:	697b      	ldr	r3, [r7, #20]
	}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3728      	adds	r7, #40	; 0x28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b08c      	sub	sp, #48	; 0x30
 8004b42:	af04      	add	r7, sp, #16
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	603b      	str	r3, [r7, #0]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b4e:	88fb      	ldrh	r3, [r7, #6]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 fdf0 	bl	8006738 <pvPortMalloc>
 8004b58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00e      	beq.n	8004b7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b60:	20bc      	movs	r0, #188	; 0xbc
 8004b62:	f001 fde9 	bl	8006738 <pvPortMalloc>
 8004b66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
 8004b74:	e005      	b.n	8004b82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b76:	6978      	ldr	r0, [r7, #20]
 8004b78:	f001 feaa 	bl	80068d0 <vPortFree>
 8004b7c:	e001      	b.n	8004b82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d017      	beq.n	8004bb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b90:	88fa      	ldrh	r2, [r7, #6]
 8004b92:	2300      	movs	r3, #0
 8004b94:	9303      	str	r3, [sp, #12]
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	9302      	str	r3, [sp, #8]
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	9301      	str	r3, [sp, #4]
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f80e 	bl	8004bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bac:	69f8      	ldr	r0, [r7, #28]
 8004bae:	f000 f8b1 	bl	8004d14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	e002      	b.n	8004bbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
	}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3720      	adds	r7, #32
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	461a      	mov	r2, r3
 8004be0:	21a5      	movs	r1, #165	; 0xa5
 8004be2:	f001 ffcd 	bl	8006b80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f023 0307 	bic.w	r3, r3, #7
 8004bfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	617b      	str	r3, [r7, #20]
}
 8004c1c:	bf00      	nop
 8004c1e:	e7fe      	b.n	8004c1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01f      	beq.n	8004c66 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	e012      	b.n	8004c52 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	7819      	ldrb	r1, [r3, #0]
 8004c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	3334      	adds	r3, #52	; 0x34
 8004c3c:	460a      	mov	r2, r1
 8004c3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d006      	beq.n	8004c5a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	2b0f      	cmp	r3, #15
 8004c56:	d9e9      	bls.n	8004c2c <prvInitialiseNewTask+0x64>
 8004c58:	e000      	b.n	8004c5c <prvInitialiseNewTask+0x94>
			{
				break;
 8004c5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c64:	e003      	b.n	8004c6e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	2b37      	cmp	r3, #55	; 0x37
 8004c72:	d901      	bls.n	8004c78 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c74:	2337      	movs	r3, #55	; 0x37
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	2200      	movs	r2, #0
 8004c88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe ff64 	bl	8003b5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	3318      	adds	r3, #24
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe ff5f 	bl	8003b5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ca2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	3354      	adds	r3, #84	; 0x54
 8004cc8:	2260      	movs	r2, #96	; 0x60
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 ff57 	bl	8006b80 <memset>
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	4a0c      	ldr	r2, [pc, #48]	; (8004d08 <prvInitialiseNewTask+0x140>)
 8004cd6:	659a      	str	r2, [r3, #88]	; 0x58
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	4a0c      	ldr	r2, [pc, #48]	; (8004d0c <prvInitialiseNewTask+0x144>)
 8004cdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	4a0b      	ldr	r2, [pc, #44]	; (8004d10 <prvInitialiseNewTask+0x148>)
 8004ce2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	68f9      	ldr	r1, [r7, #12]
 8004ce8:	69b8      	ldr	r0, [r7, #24]
 8004cea:	f001 fad5 	bl	8006298 <pxPortInitialiseStack>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d00:	bf00      	nop
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	0800769c 	.word	0x0800769c
 8004d0c:	080076bc 	.word	0x080076bc
 8004d10:	0800767c 	.word	0x0800767c

08004d14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d1c:	f001 fbea 	bl	80064f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d20:	4b2d      	ldr	r3, [pc, #180]	; (8004dd8 <prvAddNewTaskToReadyList+0xc4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3301      	adds	r3, #1
 8004d26:	4a2c      	ldr	r2, [pc, #176]	; (8004dd8 <prvAddNewTaskToReadyList+0xc4>)
 8004d28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d2a:	4b2c      	ldr	r3, [pc, #176]	; (8004ddc <prvAddNewTaskToReadyList+0xc8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d32:	4a2a      	ldr	r2, [pc, #168]	; (8004ddc <prvAddNewTaskToReadyList+0xc8>)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d38:	4b27      	ldr	r3, [pc, #156]	; (8004dd8 <prvAddNewTaskToReadyList+0xc4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d110      	bne.n	8004d62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d40:	f000 fbf2 	bl	8005528 <prvInitialiseTaskLists>
 8004d44:	e00d      	b.n	8004d62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d46:	4b26      	ldr	r3, [pc, #152]	; (8004de0 <prvAddNewTaskToReadyList+0xcc>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d4e:	4b23      	ldr	r3, [pc, #140]	; (8004ddc <prvAddNewTaskToReadyList+0xc8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d802      	bhi.n	8004d62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d5c:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <prvAddNewTaskToReadyList+0xc8>)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d62:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <prvAddNewTaskToReadyList+0xd0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3301      	adds	r3, #1
 8004d68:	4a1e      	ldr	r2, [pc, #120]	; (8004de4 <prvAddNewTaskToReadyList+0xd0>)
 8004d6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d6c:	4b1d      	ldr	r3, [pc, #116]	; (8004de4 <prvAddNewTaskToReadyList+0xd0>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d78:	4b1b      	ldr	r3, [pc, #108]	; (8004de8 <prvAddNewTaskToReadyList+0xd4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d903      	bls.n	8004d88 <prvAddNewTaskToReadyList+0x74>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <prvAddNewTaskToReadyList+0xd4>)
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4a15      	ldr	r2, [pc, #84]	; (8004dec <prvAddNewTaskToReadyList+0xd8>)
 8004d96:	441a      	add	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f7fe fee9 	bl	8003b76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004da4:	f001 fbd6 	bl	8006554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004da8:	4b0d      	ldr	r3, [pc, #52]	; (8004de0 <prvAddNewTaskToReadyList+0xcc>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00e      	beq.n	8004dce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <prvAddNewTaskToReadyList+0xc8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d207      	bcs.n	8004dce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004dbe:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <prvAddNewTaskToReadyList+0xdc>)
 8004dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000ef4 	.word	0x20000ef4
 8004ddc:	20000a20 	.word	0x20000a20
 8004de0:	20000f00 	.word	0x20000f00
 8004de4:	20000f10 	.word	0x20000f10
 8004de8:	20000efc 	.word	0x20000efc
 8004dec:	20000a24 	.word	0x20000a24
 8004df0:	e000ed04 	.word	0xe000ed04

08004df4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	; 0x28
 8004df8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e02:	463a      	mov	r2, r7
 8004e04:	1d39      	adds	r1, r7, #4
 8004e06:	f107 0308 	add.w	r3, r7, #8
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe fe52 	bl	8003ab4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e10:	6839      	ldr	r1, [r7, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	9202      	str	r2, [sp, #8]
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	460a      	mov	r2, r1
 8004e22:	4924      	ldr	r1, [pc, #144]	; (8004eb4 <vTaskStartScheduler+0xc0>)
 8004e24:	4824      	ldr	r0, [pc, #144]	; (8004eb8 <vTaskStartScheduler+0xc4>)
 8004e26:	f7ff fe2d 	bl	8004a84 <xTaskCreateStatic>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4a23      	ldr	r2, [pc, #140]	; (8004ebc <vTaskStartScheduler+0xc8>)
 8004e2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e30:	4b22      	ldr	r3, [pc, #136]	; (8004ebc <vTaskStartScheduler+0xc8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e001      	b.n	8004e42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d102      	bne.n	8004e4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e48:	f000 fe1e 	bl	8005a88 <xTimerCreateTimerTask>
 8004e4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d11b      	bne.n	8004e8c <vTaskStartScheduler+0x98>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	613b      	str	r3, [r7, #16]
}
 8004e66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e68:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <vTaskStartScheduler+0xcc>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3354      	adds	r3, #84	; 0x54
 8004e6e:	4a15      	ldr	r2, [pc, #84]	; (8004ec4 <vTaskStartScheduler+0xd0>)
 8004e70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <vTaskStartScheduler+0xd4>)
 8004e74:	f04f 32ff 	mov.w	r2, #4294967295
 8004e78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e7a:	4b14      	ldr	r3, [pc, #80]	; (8004ecc <vTaskStartScheduler+0xd8>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e80:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <vTaskStartScheduler+0xdc>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e86:	f001 fa93 	bl	80063b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e8a:	e00e      	b.n	8004eaa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	d10a      	bne.n	8004eaa <vTaskStartScheduler+0xb6>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	60fb      	str	r3, [r7, #12]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <vTaskStartScheduler+0xb4>
}
 8004eaa:	bf00      	nop
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	080075f8 	.word	0x080075f8
 8004eb8:	080054f9 	.word	0x080054f9
 8004ebc:	20000f18 	.word	0x20000f18
 8004ec0:	20000a20 	.word	0x20000a20
 8004ec4:	20000010 	.word	0x20000010
 8004ec8:	20000f14 	.word	0x20000f14
 8004ecc:	20000f00 	.word	0x20000f00
 8004ed0:	20000ef8 	.word	0x20000ef8

08004ed4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ed8:	4b04      	ldr	r3, [pc, #16]	; (8004eec <vTaskSuspendAll+0x18>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3301      	adds	r3, #1
 8004ede:	4a03      	ldr	r2, [pc, #12]	; (8004eec <vTaskSuspendAll+0x18>)
 8004ee0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ee2:	bf00      	nop
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	20000f1c 	.word	0x20000f1c

08004ef0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004efe:	4b42      	ldr	r3, [pc, #264]	; (8005008 <xTaskResumeAll+0x118>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10a      	bne.n	8004f1c <xTaskResumeAll+0x2c>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	603b      	str	r3, [r7, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	e7fe      	b.n	8004f1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f1c:	f001 faea 	bl	80064f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f20:	4b39      	ldr	r3, [pc, #228]	; (8005008 <xTaskResumeAll+0x118>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	4a38      	ldr	r2, [pc, #224]	; (8005008 <xTaskResumeAll+0x118>)
 8004f28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f2a:	4b37      	ldr	r3, [pc, #220]	; (8005008 <xTaskResumeAll+0x118>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d162      	bne.n	8004ff8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f32:	4b36      	ldr	r3, [pc, #216]	; (800500c <xTaskResumeAll+0x11c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d05e      	beq.n	8004ff8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f3a:	e02f      	b.n	8004f9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f3c:	4b34      	ldr	r3, [pc, #208]	; (8005010 <xTaskResumeAll+0x120>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3318      	adds	r3, #24
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fe fe71 	bl	8003c30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3304      	adds	r3, #4
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe fe6c 	bl	8003c30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5c:	4b2d      	ldr	r3, [pc, #180]	; (8005014 <xTaskResumeAll+0x124>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d903      	bls.n	8004f6c <xTaskResumeAll+0x7c>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	4a2a      	ldr	r2, [pc, #168]	; (8005014 <xTaskResumeAll+0x124>)
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4a27      	ldr	r2, [pc, #156]	; (8005018 <xTaskResumeAll+0x128>)
 8004f7a:	441a      	add	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f7fe fdf7 	bl	8003b76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8c:	4b23      	ldr	r3, [pc, #140]	; (800501c <xTaskResumeAll+0x12c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d302      	bcc.n	8004f9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f96:	4b22      	ldr	r3, [pc, #136]	; (8005020 <xTaskResumeAll+0x130>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f9c:	4b1c      	ldr	r3, [pc, #112]	; (8005010 <xTaskResumeAll+0x120>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1cb      	bne.n	8004f3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004faa:	f000 fb5f 	bl	800566c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004fae:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <xTaskResumeAll+0x134>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d010      	beq.n	8004fdc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fba:	f000 f847 	bl	800504c <xTaskIncrementTick>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004fc4:	4b16      	ldr	r3, [pc, #88]	; (8005020 <xTaskResumeAll+0x130>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f1      	bne.n	8004fba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004fd6:	4b13      	ldr	r3, [pc, #76]	; (8005024 <xTaskResumeAll+0x134>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fdc:	4b10      	ldr	r3, [pc, #64]	; (8005020 <xTaskResumeAll+0x130>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d009      	beq.n	8004ff8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <xTaskResumeAll+0x138>)
 8004fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ff8:	f001 faac 	bl	8006554 <vPortExitCritical>

	return xAlreadyYielded;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000f1c 	.word	0x20000f1c
 800500c:	20000ef4 	.word	0x20000ef4
 8005010:	20000eb4 	.word	0x20000eb4
 8005014:	20000efc 	.word	0x20000efc
 8005018:	20000a24 	.word	0x20000a24
 800501c:	20000a20 	.word	0x20000a20
 8005020:	20000f08 	.word	0x20000f08
 8005024:	20000f04 	.word	0x20000f04
 8005028:	e000ed04 	.word	0xe000ed04

0800502c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005032:	4b05      	ldr	r3, [pc, #20]	; (8005048 <xTaskGetTickCount+0x1c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005038:	687b      	ldr	r3, [r7, #4]
}
 800503a:	4618      	mov	r0, r3
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000ef8 	.word	0x20000ef8

0800504c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005056:	4b4f      	ldr	r3, [pc, #316]	; (8005194 <xTaskIncrementTick+0x148>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 808f 	bne.w	800517e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005060:	4b4d      	ldr	r3, [pc, #308]	; (8005198 <xTaskIncrementTick+0x14c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005068:	4a4b      	ldr	r2, [pc, #300]	; (8005198 <xTaskIncrementTick+0x14c>)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d120      	bne.n	80050b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005074:	4b49      	ldr	r3, [pc, #292]	; (800519c <xTaskIncrementTick+0x150>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <xTaskIncrementTick+0x48>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	603b      	str	r3, [r7, #0]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <xTaskIncrementTick+0x46>
 8005094:	4b41      	ldr	r3, [pc, #260]	; (800519c <xTaskIncrementTick+0x150>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	4b41      	ldr	r3, [pc, #260]	; (80051a0 <xTaskIncrementTick+0x154>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a3f      	ldr	r2, [pc, #252]	; (800519c <xTaskIncrementTick+0x150>)
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	4a3f      	ldr	r2, [pc, #252]	; (80051a0 <xTaskIncrementTick+0x154>)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	4b3e      	ldr	r3, [pc, #248]	; (80051a4 <xTaskIncrementTick+0x158>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3301      	adds	r3, #1
 80050ae:	4a3d      	ldr	r2, [pc, #244]	; (80051a4 <xTaskIncrementTick+0x158>)
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	f000 fadb 	bl	800566c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050b6:	4b3c      	ldr	r3, [pc, #240]	; (80051a8 <xTaskIncrementTick+0x15c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d349      	bcc.n	8005154 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050c0:	4b36      	ldr	r3, [pc, #216]	; (800519c <xTaskIncrementTick+0x150>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d104      	bne.n	80050d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ca:	4b37      	ldr	r3, [pc, #220]	; (80051a8 <xTaskIncrementTick+0x15c>)
 80050cc:	f04f 32ff 	mov.w	r2, #4294967295
 80050d0:	601a      	str	r2, [r3, #0]
					break;
 80050d2:	e03f      	b.n	8005154 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050d4:	4b31      	ldr	r3, [pc, #196]	; (800519c <xTaskIncrementTick+0x150>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d203      	bcs.n	80050f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050ec:	4a2e      	ldr	r2, [pc, #184]	; (80051a8 <xTaskIncrementTick+0x15c>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050f2:	e02f      	b.n	8005154 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fe fd99 	bl	8003c30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	2b00      	cmp	r3, #0
 8005104:	d004      	beq.n	8005110 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	3318      	adds	r3, #24
 800510a:	4618      	mov	r0, r3
 800510c:	f7fe fd90 	bl	8003c30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005114:	4b25      	ldr	r3, [pc, #148]	; (80051ac <xTaskIncrementTick+0x160>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d903      	bls.n	8005124 <xTaskIncrementTick+0xd8>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	4a22      	ldr	r2, [pc, #136]	; (80051ac <xTaskIncrementTick+0x160>)
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <xTaskIncrementTick+0x164>)
 8005132:	441a      	add	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f7fe fd1b 	bl	8003b76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <xTaskIncrementTick+0x168>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	429a      	cmp	r2, r3
 800514c:	d3b8      	bcc.n	80050c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800514e:	2301      	movs	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005152:	e7b5      	b.n	80050c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005154:	4b17      	ldr	r3, [pc, #92]	; (80051b4 <xTaskIncrementTick+0x168>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515a:	4915      	ldr	r1, [pc, #84]	; (80051b0 <xTaskIncrementTick+0x164>)
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d901      	bls.n	8005170 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800516c:	2301      	movs	r3, #1
 800516e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005170:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <xTaskIncrementTick+0x16c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005178:	2301      	movs	r3, #1
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	e004      	b.n	8005188 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800517e:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <xTaskIncrementTick+0x170>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3301      	adds	r3, #1
 8005184:	4a0d      	ldr	r2, [pc, #52]	; (80051bc <xTaskIncrementTick+0x170>)
 8005186:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005188:	697b      	ldr	r3, [r7, #20]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000f1c 	.word	0x20000f1c
 8005198:	20000ef8 	.word	0x20000ef8
 800519c:	20000eac 	.word	0x20000eac
 80051a0:	20000eb0 	.word	0x20000eb0
 80051a4:	20000f0c 	.word	0x20000f0c
 80051a8:	20000f14 	.word	0x20000f14
 80051ac:	20000efc 	.word	0x20000efc
 80051b0:	20000a24 	.word	0x20000a24
 80051b4:	20000a20 	.word	0x20000a20
 80051b8:	20000f08 	.word	0x20000f08
 80051bc:	20000f04 	.word	0x20000f04

080051c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051c6:	4b2a      	ldr	r3, [pc, #168]	; (8005270 <vTaskSwitchContext+0xb0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051ce:	4b29      	ldr	r3, [pc, #164]	; (8005274 <vTaskSwitchContext+0xb4>)
 80051d0:	2201      	movs	r2, #1
 80051d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051d4:	e046      	b.n	8005264 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80051d6:	4b27      	ldr	r3, [pc, #156]	; (8005274 <vTaskSwitchContext+0xb4>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051dc:	4b26      	ldr	r3, [pc, #152]	; (8005278 <vTaskSwitchContext+0xb8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	e010      	b.n	8005206 <vTaskSwitchContext+0x46>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <vTaskSwitchContext+0x40>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	607b      	str	r3, [r7, #4]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <vTaskSwitchContext+0x3e>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3b01      	subs	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	491d      	ldr	r1, [pc, #116]	; (800527c <vTaskSwitchContext+0xbc>)
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4613      	mov	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	440b      	add	r3, r1
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0e4      	beq.n	80051e4 <vTaskSwitchContext+0x24>
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4a15      	ldr	r2, [pc, #84]	; (800527c <vTaskSwitchContext+0xbc>)
 8005226:	4413      	add	r3, r2
 8005228:	60bb      	str	r3, [r7, #8]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	605a      	str	r2, [r3, #4]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	3308      	adds	r3, #8
 800523c:	429a      	cmp	r2, r3
 800523e:	d104      	bne.n	800524a <vTaskSwitchContext+0x8a>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	605a      	str	r2, [r3, #4]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4a0b      	ldr	r2, [pc, #44]	; (8005280 <vTaskSwitchContext+0xc0>)
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	4a08      	ldr	r2, [pc, #32]	; (8005278 <vTaskSwitchContext+0xb8>)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800525a:	4b09      	ldr	r3, [pc, #36]	; (8005280 <vTaskSwitchContext+0xc0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3354      	adds	r3, #84	; 0x54
 8005260:	4a08      	ldr	r2, [pc, #32]	; (8005284 <vTaskSwitchContext+0xc4>)
 8005262:	6013      	str	r3, [r2, #0]
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	20000f1c 	.word	0x20000f1c
 8005274:	20000f08 	.word	0x20000f08
 8005278:	20000efc 	.word	0x20000efc
 800527c:	20000a24 	.word	0x20000a24
 8005280:	20000a20 	.word	0x20000a20
 8005284:	20000010 	.word	0x20000010

08005288 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	60fb      	str	r3, [r7, #12]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052ae:	4b07      	ldr	r3, [pc, #28]	; (80052cc <vTaskPlaceOnEventList+0x44>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3318      	adds	r3, #24
 80052b4:	4619      	mov	r1, r3
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fe fc81 	bl	8003bbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052bc:	2101      	movs	r1, #1
 80052be:	6838      	ldr	r0, [r7, #0]
 80052c0:	f000 fb8e 	bl	80059e0 <prvAddCurrentTaskToDelayedList>
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20000a20 	.word	0x20000a20

080052d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	617b      	str	r3, [r7, #20]
}
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <vTaskPlaceOnEventListRestricted+0x54>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3318      	adds	r3, #24
 80052fe:	4619      	mov	r1, r3
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7fe fc38 	bl	8003b76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800530c:	f04f 33ff 	mov.w	r3, #4294967295
 8005310:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	68b8      	ldr	r0, [r7, #8]
 8005316:	f000 fb63 	bl	80059e0 <prvAddCurrentTaskToDelayedList>
	}
 800531a:	bf00      	nop
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20000a20 	.word	0x20000a20

08005328 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	60fb      	str	r3, [r7, #12]
}
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	3318      	adds	r3, #24
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe fc69 	bl	8003c30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800535e:	4b1e      	ldr	r3, [pc, #120]	; (80053d8 <xTaskRemoveFromEventList+0xb0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d11d      	bne.n	80053a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	3304      	adds	r3, #4
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe fc60 	bl	8003c30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005374:	4b19      	ldr	r3, [pc, #100]	; (80053dc <xTaskRemoveFromEventList+0xb4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d903      	bls.n	8005384 <xTaskRemoveFromEventList+0x5c>
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	4a16      	ldr	r2, [pc, #88]	; (80053dc <xTaskRemoveFromEventList+0xb4>)
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4a13      	ldr	r2, [pc, #76]	; (80053e0 <xTaskRemoveFromEventList+0xb8>)
 8005392:	441a      	add	r2, r3
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	3304      	adds	r3, #4
 8005398:	4619      	mov	r1, r3
 800539a:	4610      	mov	r0, r2
 800539c:	f7fe fbeb 	bl	8003b76 <vListInsertEnd>
 80053a0:	e005      	b.n	80053ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	3318      	adds	r3, #24
 80053a6:	4619      	mov	r1, r3
 80053a8:	480e      	ldr	r0, [pc, #56]	; (80053e4 <xTaskRemoveFromEventList+0xbc>)
 80053aa:	f7fe fbe4 	bl	8003b76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b2:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <xTaskRemoveFromEventList+0xc0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d905      	bls.n	80053c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053bc:	2301      	movs	r3, #1
 80053be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053c0:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <xTaskRemoveFromEventList+0xc4>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	e001      	b.n	80053cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053cc:	697b      	ldr	r3, [r7, #20]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000f1c 	.word	0x20000f1c
 80053dc:	20000efc 	.word	0x20000efc
 80053e0:	20000a24 	.word	0x20000a24
 80053e4:	20000eb4 	.word	0x20000eb4
 80053e8:	20000a20 	.word	0x20000a20
 80053ec:	20000f08 	.word	0x20000f08

080053f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053f8:	4b06      	ldr	r3, [pc, #24]	; (8005414 <vTaskInternalSetTimeOutState+0x24>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005400:	4b05      	ldr	r3, [pc, #20]	; (8005418 <vTaskInternalSetTimeOutState+0x28>)
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	605a      	str	r2, [r3, #4]
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	20000f0c 	.word	0x20000f0c
 8005418:	20000ef8 	.word	0x20000ef8

0800541c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	613b      	str	r3, [r7, #16]
}
 800543e:	bf00      	nop
 8005440:	e7fe      	b.n	8005440 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	60fb      	str	r3, [r7, #12]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800545e:	f001 f849 	bl	80064f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005462:	4b1d      	ldr	r3, [pc, #116]	; (80054d8 <xTaskCheckForTimeOut+0xbc>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d102      	bne.n	8005482 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	e023      	b.n	80054ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b15      	ldr	r3, [pc, #84]	; (80054dc <xTaskCheckForTimeOut+0xc0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d007      	beq.n	800549e <xTaskCheckForTimeOut+0x82>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	429a      	cmp	r2, r3
 8005496:	d302      	bcc.n	800549e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005498:	2301      	movs	r3, #1
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	e015      	b.n	80054ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d20b      	bcs.n	80054c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff ff9b 	bl	80053f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	e004      	b.n	80054ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054c6:	2301      	movs	r3, #1
 80054c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054ca:	f001 f843 	bl	8006554 <vPortExitCritical>

	return xReturn;
 80054ce:	69fb      	ldr	r3, [r7, #28]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	20000ef8 	.word	0x20000ef8
 80054dc:	20000f0c 	.word	0x20000f0c

080054e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054e4:	4b03      	ldr	r3, [pc, #12]	; (80054f4 <vTaskMissedYield+0x14>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
}
 80054ea:	bf00      	nop
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	20000f08 	.word	0x20000f08

080054f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005500:	f000 f852 	bl	80055a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005504:	4b06      	ldr	r3, [pc, #24]	; (8005520 <prvIdleTask+0x28>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d9f9      	bls.n	8005500 <prvIdleTask+0x8>
			{
				taskYIELD();
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <prvIdleTask+0x2c>)
 800550e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800551c:	e7f0      	b.n	8005500 <prvIdleTask+0x8>
 800551e:	bf00      	nop
 8005520:	20000a24 	.word	0x20000a24
 8005524:	e000ed04 	.word	0xe000ed04

08005528 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800552e:	2300      	movs	r3, #0
 8005530:	607b      	str	r3, [r7, #4]
 8005532:	e00c      	b.n	800554e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4a12      	ldr	r2, [pc, #72]	; (8005588 <prvInitialiseTaskLists+0x60>)
 8005540:	4413      	add	r3, r2
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe faea 	bl	8003b1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3301      	adds	r3, #1
 800554c:	607b      	str	r3, [r7, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b37      	cmp	r3, #55	; 0x37
 8005552:	d9ef      	bls.n	8005534 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005554:	480d      	ldr	r0, [pc, #52]	; (800558c <prvInitialiseTaskLists+0x64>)
 8005556:	f7fe fae1 	bl	8003b1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800555a:	480d      	ldr	r0, [pc, #52]	; (8005590 <prvInitialiseTaskLists+0x68>)
 800555c:	f7fe fade 	bl	8003b1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005560:	480c      	ldr	r0, [pc, #48]	; (8005594 <prvInitialiseTaskLists+0x6c>)
 8005562:	f7fe fadb 	bl	8003b1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005566:	480c      	ldr	r0, [pc, #48]	; (8005598 <prvInitialiseTaskLists+0x70>)
 8005568:	f7fe fad8 	bl	8003b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800556c:	480b      	ldr	r0, [pc, #44]	; (800559c <prvInitialiseTaskLists+0x74>)
 800556e:	f7fe fad5 	bl	8003b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005572:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <prvInitialiseTaskLists+0x78>)
 8005574:	4a05      	ldr	r2, [pc, #20]	; (800558c <prvInitialiseTaskLists+0x64>)
 8005576:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005578:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <prvInitialiseTaskLists+0x7c>)
 800557a:	4a05      	ldr	r2, [pc, #20]	; (8005590 <prvInitialiseTaskLists+0x68>)
 800557c:	601a      	str	r2, [r3, #0]
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000a24 	.word	0x20000a24
 800558c:	20000e84 	.word	0x20000e84
 8005590:	20000e98 	.word	0x20000e98
 8005594:	20000eb4 	.word	0x20000eb4
 8005598:	20000ec8 	.word	0x20000ec8
 800559c:	20000ee0 	.word	0x20000ee0
 80055a0:	20000eac 	.word	0x20000eac
 80055a4:	20000eb0 	.word	0x20000eb0

080055a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055ae:	e019      	b.n	80055e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055b0:	f000 ffa0 	bl	80064f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055b4:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <prvCheckTasksWaitingTermination+0x50>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fe fb35 	bl	8003c30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055c6:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <prvCheckTasksWaitingTermination+0x54>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	4a0b      	ldr	r2, [pc, #44]	; (80055fc <prvCheckTasksWaitingTermination+0x54>)
 80055ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055d0:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <prvCheckTasksWaitingTermination+0x58>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	4a0a      	ldr	r2, [pc, #40]	; (8005600 <prvCheckTasksWaitingTermination+0x58>)
 80055d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055da:	f000 ffbb 	bl	8006554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f810 	bl	8005604 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <prvCheckTasksWaitingTermination+0x58>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e1      	bne.n	80055b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000ec8 	.word	0x20000ec8
 80055fc:	20000ef4 	.word	0x20000ef4
 8005600:	20000edc 	.word	0x20000edc

08005604 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3354      	adds	r3, #84	; 0x54
 8005610:	4618      	mov	r0, r3
 8005612:	f001 fb5f 	bl	8006cd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800561c:	2b00      	cmp	r3, #0
 800561e:	d108      	bne.n	8005632 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	4618      	mov	r0, r3
 8005626:	f001 f953 	bl	80068d0 <vPortFree>
				vPortFree( pxTCB );
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f001 f950 	bl	80068d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005630:	e018      	b.n	8005664 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005638:	2b01      	cmp	r3, #1
 800563a:	d103      	bne.n	8005644 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f001 f947 	bl	80068d0 <vPortFree>
	}
 8005642:	e00f      	b.n	8005664 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800564a:	2b02      	cmp	r3, #2
 800564c:	d00a      	beq.n	8005664 <prvDeleteTCB+0x60>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	60fb      	str	r3, [r7, #12]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <prvDeleteTCB+0x5e>
	}
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005672:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <prvResetNextTaskUnblockTime+0x38>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d104      	bne.n	8005686 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800567c:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <prvResetNextTaskUnblockTime+0x3c>)
 800567e:	f04f 32ff 	mov.w	r2, #4294967295
 8005682:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005684:	e008      	b.n	8005698 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005686:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <prvResetNextTaskUnblockTime+0x38>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4a04      	ldr	r2, [pc, #16]	; (80056a8 <prvResetNextTaskUnblockTime+0x3c>)
 8005696:	6013      	str	r3, [r2, #0]
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	20000eac 	.word	0x20000eac
 80056a8:	20000f14 	.word	0x20000f14

080056ac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <xTaskGetCurrentTaskHandle+0x1c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80056b8:	687b      	ldr	r3, [r7, #4]
	}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20000a20 	.word	0x20000a20

080056cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056d2:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <xTaskGetSchedulerState+0x34>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056da:	2301      	movs	r3, #1
 80056dc:	607b      	str	r3, [r7, #4]
 80056de:	e008      	b.n	80056f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056e0:	4b08      	ldr	r3, [pc, #32]	; (8005704 <xTaskGetSchedulerState+0x38>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056e8:	2302      	movs	r3, #2
 80056ea:	607b      	str	r3, [r7, #4]
 80056ec:	e001      	b.n	80056f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056ee:	2300      	movs	r3, #0
 80056f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056f2:	687b      	ldr	r3, [r7, #4]
	}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	20000f00 	.word	0x20000f00
 8005704:	20000f1c 	.word	0x20000f1c

08005708 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d051      	beq.n	80057c2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005722:	4b2a      	ldr	r3, [pc, #168]	; (80057cc <xTaskPriorityInherit+0xc4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	429a      	cmp	r2, r3
 800572a:	d241      	bcs.n	80057b0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	db06      	blt.n	8005742 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005734:	4b25      	ldr	r3, [pc, #148]	; (80057cc <xTaskPriorityInherit+0xc4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6959      	ldr	r1, [r3, #20]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4a1f      	ldr	r2, [pc, #124]	; (80057d0 <xTaskPriorityInherit+0xc8>)
 8005754:	4413      	add	r3, r2
 8005756:	4299      	cmp	r1, r3
 8005758:	d122      	bne.n	80057a0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	3304      	adds	r3, #4
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fa66 	bl	8003c30 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005764:	4b19      	ldr	r3, [pc, #100]	; (80057cc <xTaskPriorityInherit+0xc4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005772:	4b18      	ldr	r3, [pc, #96]	; (80057d4 <xTaskPriorityInherit+0xcc>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d903      	bls.n	8005782 <xTaskPriorityInherit+0x7a>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	4a15      	ldr	r2, [pc, #84]	; (80057d4 <xTaskPriorityInherit+0xcc>)
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4a10      	ldr	r2, [pc, #64]	; (80057d0 <xTaskPriorityInherit+0xc8>)
 8005790:	441a      	add	r2, r3
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	3304      	adds	r3, #4
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f7fe f9ec 	bl	8003b76 <vListInsertEnd>
 800579e:	e004      	b.n	80057aa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057a0:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <xTaskPriorityInherit+0xc4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80057aa:	2301      	movs	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	e008      	b.n	80057c2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <xTaskPriorityInherit+0xc4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d201      	bcs.n	80057c2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80057be:	2301      	movs	r3, #1
 80057c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057c2:	68fb      	ldr	r3, [r7, #12]
	}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	20000a20 	.word	0x20000a20
 80057d0:	20000a24 	.word	0x20000a24
 80057d4:	20000efc 	.word	0x20000efc

080057d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d056      	beq.n	800589c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057ee:	4b2e      	ldr	r3, [pc, #184]	; (80058a8 <xTaskPriorityDisinherit+0xd0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d00a      	beq.n	800580e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	60fb      	str	r3, [r7, #12]
}
 800580a:	bf00      	nop
 800580c:	e7fe      	b.n	800580c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10a      	bne.n	800582c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	60bb      	str	r3, [r7, #8]
}
 8005828:	bf00      	nop
 800582a:	e7fe      	b.n	800582a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005830:	1e5a      	subs	r2, r3, #1
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583e:	429a      	cmp	r2, r3
 8005840:	d02c      	beq.n	800589c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005846:	2b00      	cmp	r3, #0
 8005848:	d128      	bne.n	800589c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	3304      	adds	r3, #4
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe f9ee 	bl	8003c30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <xTaskPriorityDisinherit+0xd4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d903      	bls.n	800587c <xTaskPriorityDisinherit+0xa4>
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	4a0c      	ldr	r2, [pc, #48]	; (80058ac <xTaskPriorityDisinherit+0xd4>)
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4a09      	ldr	r2, [pc, #36]	; (80058b0 <xTaskPriorityDisinherit+0xd8>)
 800588a:	441a      	add	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	3304      	adds	r3, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f7fe f96f 	bl	8003b76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005898:	2301      	movs	r3, #1
 800589a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800589c:	697b      	ldr	r3, [r7, #20]
	}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000a20 	.word	0x20000a20
 80058ac:	20000efc 	.word	0x20000efc
 80058b0:	20000a24 	.word	0x20000a24

080058b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80058c2:	2301      	movs	r3, #1
 80058c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d06a      	beq.n	80059a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10a      	bne.n	80058ea <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	60fb      	str	r3, [r7, #12]
}
 80058e6:	bf00      	nop
 80058e8:	e7fe      	b.n	80058e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d902      	bls.n	80058fa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	e002      	b.n	8005900 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	429a      	cmp	r2, r3
 8005908:	d04b      	beq.n	80059a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	429a      	cmp	r2, r3
 8005912:	d146      	bne.n	80059a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005914:	4b25      	ldr	r3, [pc, #148]	; (80059ac <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	429a      	cmp	r2, r3
 800591c:	d10a      	bne.n	8005934 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	60bb      	str	r3, [r7, #8]
}
 8005930:	bf00      	nop
 8005932:	e7fe      	b.n	8005932 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	db04      	blt.n	8005952 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	6959      	ldr	r1, [r3, #20]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005962:	4413      	add	r3, r2
 8005964:	4299      	cmp	r1, r3
 8005966:	d11c      	bne.n	80059a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	3304      	adds	r3, #4
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe f95f 	bl	8003c30 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005976:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d903      	bls.n	8005986 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	4a0c      	ldr	r2, [pc, #48]	; (80059b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4a07      	ldr	r2, [pc, #28]	; (80059b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005994:	441a      	add	r2, r3
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	3304      	adds	r3, #4
 800599a:	4619      	mov	r1, r3
 800599c:	4610      	mov	r0, r2
 800599e:	f7fe f8ea 	bl	8003b76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059a2:	bf00      	nop
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000a20 	.word	0x20000a20
 80059b0:	20000a24 	.word	0x20000a24
 80059b4:	20000efc 	.word	0x20000efc

080059b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80059bc:	4b07      	ldr	r3, [pc, #28]	; (80059dc <pvTaskIncrementMutexHeldCount+0x24>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80059c4:	4b05      	ldr	r3, [pc, #20]	; (80059dc <pvTaskIncrementMutexHeldCount+0x24>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059ca:	3201      	adds	r2, #1
 80059cc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80059ce:	4b03      	ldr	r3, [pc, #12]	; (80059dc <pvTaskIncrementMutexHeldCount+0x24>)
 80059d0:	681b      	ldr	r3, [r3, #0]
	}
 80059d2:	4618      	mov	r0, r3
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	20000a20 	.word	0x20000a20

080059e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059ea:	4b21      	ldr	r3, [pc, #132]	; (8005a70 <prvAddCurrentTaskToDelayedList+0x90>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059f0:	4b20      	ldr	r3, [pc, #128]	; (8005a74 <prvAddCurrentTaskToDelayedList+0x94>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe f91a 	bl	8003c30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a02:	d10a      	bne.n	8005a1a <prvAddCurrentTaskToDelayedList+0x3a>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a0a:	4b1a      	ldr	r3, [pc, #104]	; (8005a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4819      	ldr	r0, [pc, #100]	; (8005a78 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a14:	f7fe f8af 	bl	8003b76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a18:	e026      	b.n	8005a68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4413      	add	r3, r2
 8005a20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a22:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d209      	bcs.n	8005a46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a32:	4b12      	ldr	r3, [pc, #72]	; (8005a7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b0f      	ldr	r3, [pc, #60]	; (8005a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f7fe f8bd 	bl	8003bbe <vListInsert>
}
 8005a44:	e010      	b.n	8005a68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a46:	4b0e      	ldr	r3, [pc, #56]	; (8005a80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4619      	mov	r1, r3
 8005a52:	4610      	mov	r0, r2
 8005a54:	f7fe f8b3 	bl	8003bbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d202      	bcs.n	8005a68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a62:	4a08      	ldr	r2, [pc, #32]	; (8005a84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	6013      	str	r3, [r2, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000ef8 	.word	0x20000ef8
 8005a74:	20000a20 	.word	0x20000a20
 8005a78:	20000ee0 	.word	0x20000ee0
 8005a7c:	20000eb0 	.word	0x20000eb0
 8005a80:	20000eac 	.word	0x20000eac
 8005a84:	20000f14 	.word	0x20000f14

08005a88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	; 0x28
 8005a8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a92:	f000 fba1 	bl	80061d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a96:	4b1c      	ldr	r3, [pc, #112]	; (8005b08 <xTimerCreateTimerTask+0x80>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d021      	beq.n	8005ae2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005aa6:	1d3a      	adds	r2, r7, #4
 8005aa8:	f107 0108 	add.w	r1, r7, #8
 8005aac:	f107 030c 	add.w	r3, r7, #12
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fe f819 	bl	8003ae8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	9202      	str	r2, [sp, #8]
 8005abe:	9301      	str	r3, [sp, #4]
 8005ac0:	2328      	movs	r3, #40	; 0x28
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	460a      	mov	r2, r1
 8005ac8:	4910      	ldr	r1, [pc, #64]	; (8005b0c <xTimerCreateTimerTask+0x84>)
 8005aca:	4811      	ldr	r0, [pc, #68]	; (8005b10 <xTimerCreateTimerTask+0x88>)
 8005acc:	f7fe ffda 	bl	8004a84 <xTaskCreateStatic>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	4a10      	ldr	r2, [pc, #64]	; (8005b14 <xTimerCreateTimerTask+0x8c>)
 8005ad4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ad6:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <xTimerCreateTimerTask+0x8c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	613b      	str	r3, [r7, #16]
}
 8005afa:	bf00      	nop
 8005afc:	e7fe      	b.n	8005afc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005afe:	697b      	ldr	r3, [r7, #20]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20000f50 	.word	0x20000f50
 8005b0c:	08007600 	.word	0x08007600
 8005b10:	08005d81 	.word	0x08005d81
 8005b14:	20000f54 	.word	0x20000f54

08005b18 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005b26:	202c      	movs	r0, #44	; 0x2c
 8005b28:	f000 fe06 	bl	8006738 <pvPortMalloc>
 8005b2c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00d      	beq.n	8005b50 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f843 	bl	8005bd6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005b50:	697b      	ldr	r3, [r7, #20]
	}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b08a      	sub	sp, #40	; 0x28
 8005b5e:	af02      	add	r7, sp, #8
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005b68:	232c      	movs	r3, #44	; 0x2c
 8005b6a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b2c      	cmp	r3, #44	; 0x2c
 8005b70:	d00a      	beq.n	8005b88 <xTimerCreateStatic+0x2e>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	61bb      	str	r3, [r7, #24]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <xTimerCreateStatic+0x4c>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	617b      	str	r3, [r7, #20]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00d      	beq.n	8005bcc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	9301      	str	r3, [sp, #4]
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f805 	bl	8005bd6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
	}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3720      	adds	r7, #32
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b086      	sub	sp, #24
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	607a      	str	r2, [r7, #4]
 8005be2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	617b      	str	r3, [r7, #20]
}
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d01e      	beq.n	8005c44 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005c06:	f000 fae7 	bl	80061d8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	6a3a      	ldr	r2, [r7, #32]
 8005c20:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	3304      	adds	r3, #4
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fd ff98 	bl	8003b5c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d008      	beq.n	8005c44 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c38:	f043 0304 	orr.w	r3, r3, #4
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005c44:	bf00      	nop
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	; 0x28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	623b      	str	r3, [r7, #32]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <xTimerGenericCommand+0x98>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d02a      	beq.n	8005cd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	dc18      	bgt.n	8005cc6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c94:	f7ff fd1a 	bl	80056cc <xTaskGetSchedulerState>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d109      	bne.n	8005cb2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c9e:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <xTimerGenericCommand+0x98>)
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	f107 0110 	add.w	r1, r7, #16
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005caa:	f7fe f9df 	bl	800406c <xQueueGenericSend>
 8005cae:	6278      	str	r0, [r7, #36]	; 0x24
 8005cb0:	e012      	b.n	8005cd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <xTimerGenericCommand+0x98>)
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	f107 0110 	add.w	r1, r7, #16
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f7fe f9d5 	bl	800406c <xQueueGenericSend>
 8005cc2:	6278      	str	r0, [r7, #36]	; 0x24
 8005cc4:	e008      	b.n	8005cd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005cc6:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <xTimerGenericCommand+0x98>)
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	f107 0110 	add.w	r1, r7, #16
 8005cce:	2300      	movs	r3, #0
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	f7fe fac9 	bl	8004268 <xQueueGenericSendFromISR>
 8005cd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3728      	adds	r7, #40	; 0x28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000f50 	.word	0x20000f50

08005ce8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf2:	4b22      	ldr	r3, [pc, #136]	; (8005d7c <prvProcessExpiredTimer+0x94>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fd ff95 	bl	8003c30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d022      	beq.n	8005d5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	699a      	ldr	r2, [r3, #24]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	18d1      	adds	r1, r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	6978      	ldr	r0, [r7, #20]
 8005d22:	f000 f8d1 	bl	8005ec8 <prvInsertTimerInActiveList>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01f      	beq.n	8005d6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	2300      	movs	r3, #0
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	2100      	movs	r1, #0
 8005d36:	6978      	ldr	r0, [r7, #20]
 8005d38:	f7ff ff88 	bl	8005c4c <xTimerGenericCommand>
 8005d3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d113      	bne.n	8005d6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	60fb      	str	r3, [r7, #12]
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d60:	f023 0301 	bic.w	r3, r3, #1
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	6978      	ldr	r0, [r7, #20]
 8005d72:	4798      	blx	r3
}
 8005d74:	bf00      	nop
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20000f48 	.word	0x20000f48

08005d80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d88:	f107 0308 	add.w	r3, r7, #8
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 f857 	bl	8005e40 <prvGetNextExpireTime>
 8005d92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4619      	mov	r1, r3
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f803 	bl	8005da4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d9e:	f000 f8d5 	bl	8005f4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005da2:	e7f1      	b.n	8005d88 <prvTimerTask+0x8>

08005da4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005dae:	f7ff f891 	bl	8004ed4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005db2:	f107 0308 	add.w	r3, r7, #8
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 f866 	bl	8005e88 <prvSampleTimeNow>
 8005dbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d130      	bne.n	8005e26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <prvProcessTimerOrBlockTask+0x3c>
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d806      	bhi.n	8005de0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005dd2:	f7ff f88d 	bl	8004ef0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005dd6:	68f9      	ldr	r1, [r7, #12]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff ff85 	bl	8005ce8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005dde:	e024      	b.n	8005e2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d008      	beq.n	8005df8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005de6:	4b13      	ldr	r3, [pc, #76]	; (8005e34 <prvProcessTimerOrBlockTask+0x90>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <prvProcessTimerOrBlockTask+0x50>
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <prvProcessTimerOrBlockTask+0x52>
 8005df4:	2300      	movs	r3, #0
 8005df6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005df8:	4b0f      	ldr	r3, [pc, #60]	; (8005e38 <prvProcessTimerOrBlockTask+0x94>)
 8005dfa:	6818      	ldr	r0, [r3, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	4619      	mov	r1, r3
 8005e06:	f7fe fe09 	bl	8004a1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e0a:	f7ff f871 	bl	8004ef0 <xTaskResumeAll>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e14:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <prvProcessTimerOrBlockTask+0x98>)
 8005e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	f3bf 8f6f 	isb	sy
}
 8005e24:	e001      	b.n	8005e2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e26:	f7ff f863 	bl	8004ef0 <xTaskResumeAll>
}
 8005e2a:	bf00      	nop
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000f4c 	.word	0x20000f4c
 8005e38:	20000f50 	.word	0x20000f50
 8005e3c:	e000ed04 	.word	0xe000ed04

08005e40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e48:	4b0e      	ldr	r3, [pc, #56]	; (8005e84 <prvGetNextExpireTime+0x44>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <prvGetNextExpireTime+0x16>
 8005e52:	2201      	movs	r2, #1
 8005e54:	e000      	b.n	8005e58 <prvGetNextExpireTime+0x18>
 8005e56:	2200      	movs	r2, #0
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d105      	bne.n	8005e70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e64:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <prvGetNextExpireTime+0x44>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	e001      	b.n	8005e74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e74:	68fb      	ldr	r3, [r7, #12]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	20000f48 	.word	0x20000f48

08005e88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e90:	f7ff f8cc 	bl	800502c <xTaskGetTickCount>
 8005e94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e96:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <prvSampleTimeNow+0x3c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d205      	bcs.n	8005eac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ea0:	f000 f936 	bl	8006110 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	e002      	b.n	8005eb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005eb2:	4a04      	ldr	r2, [pc, #16]	; (8005ec4 <prvSampleTimeNow+0x3c>)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000f58 	.word	0x20000f58

08005ec8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d812      	bhi.n	8005f14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	1ad2      	subs	r2, r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d302      	bcc.n	8005f02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005efc:	2301      	movs	r3, #1
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e01b      	b.n	8005f3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <prvInsertTimerInActiveList+0x7c>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f7fd fe56 	bl	8003bbe <vListInsert>
 8005f12:	e012      	b.n	8005f3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d206      	bcs.n	8005f2a <prvInsertTimerInActiveList+0x62>
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d302      	bcc.n	8005f2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	617b      	str	r3, [r7, #20]
 8005f28:	e007      	b.n	8005f3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f2a:	4b07      	ldr	r3, [pc, #28]	; (8005f48 <prvInsertTimerInActiveList+0x80>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f7fd fe42 	bl	8003bbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f3a:	697b      	ldr	r3, [r7, #20]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20000f4c 	.word	0x20000f4c
 8005f48:	20000f48 	.word	0x20000f48

08005f4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08e      	sub	sp, #56	; 0x38
 8005f50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f52:	e0ca      	b.n	80060ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	da18      	bge.n	8005f8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f5a:	1d3b      	adds	r3, r7, #4
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	61fb      	str	r3, [r7, #28]
}
 8005f78:	bf00      	nop
 8005f7a:	e7fe      	b.n	8005f7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f82:	6850      	ldr	r0, [r2, #4]
 8005f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f86:	6892      	ldr	r2, [r2, #8]
 8005f88:	4611      	mov	r1, r2
 8005f8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f2c0 80aa 	blt.w	80060e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d004      	beq.n	8005faa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fd fe43 	bl	8003c30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005faa:	463b      	mov	r3, r7
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff ff6b 	bl	8005e88 <prvSampleTimeNow>
 8005fb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b09      	cmp	r3, #9
 8005fb8:	f200 8097 	bhi.w	80060ea <prvProcessReceivedCommands+0x19e>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <prvProcessReceivedCommands+0x78>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005fed 	.word	0x08005fed
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08005fed 	.word	0x08005fed
 8005fd0:	08006061 	.word	0x08006061
 8005fd4:	08006075 	.word	0x08006075
 8005fd8:	080060bf 	.word	0x080060bf
 8005fdc:	08005fed 	.word	0x08005fed
 8005fe0:	08005fed 	.word	0x08005fed
 8005fe4:	08006061 	.word	0x08006061
 8005fe8:	08006075 	.word	0x08006075
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	18d1      	adds	r1, r2, r3
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800600a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800600c:	f7ff ff5c 	bl	8005ec8 <prvInsertTimerInActiveList>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d069      	beq.n	80060ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800601c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d05e      	beq.n	80060ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	441a      	add	r2, r3
 8006034:	2300      	movs	r3, #0
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	2300      	movs	r3, #0
 800603a:	2100      	movs	r1, #0
 800603c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800603e:	f7ff fe05 	bl	8005c4c <xTimerGenericCommand>
 8006042:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d14f      	bne.n	80060ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	61bb      	str	r3, [r7, #24]
}
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006066:	f023 0301 	bic.w	r3, r3, #1
 800606a:	b2da      	uxtb	r2, r3
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006072:	e03a      	b.n	80060ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800607a:	f043 0301 	orr.w	r3, r3, #1
 800607e:	b2da      	uxtb	r2, r3
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	617b      	str	r3, [r7, #20]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	18d1      	adds	r1, r2, r3
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060b8:	f7ff ff06 	bl	8005ec8 <prvInsertTimerInActiveList>
					break;
 80060bc:	e015      	b.n	80060ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d103      	bne.n	80060d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80060cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ce:	f000 fbff 	bl	80068d0 <vPortFree>
 80060d2:	e00a      	b.n	80060ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060da:	f023 0301 	bic.w	r3, r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060e6:	e000      	b.n	80060ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80060e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060ea:	4b08      	ldr	r3, [pc, #32]	; (800610c <prvProcessReceivedCommands+0x1c0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	1d39      	adds	r1, r7, #4
 80060f0:	2200      	movs	r2, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe f954 	bl	80043a0 <xQueueReceive>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f47f af2a 	bne.w	8005f54 <prvProcessReceivedCommands+0x8>
	}
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	3730      	adds	r7, #48	; 0x30
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000f50 	.word	0x20000f50

08006110 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006116:	e048      	b.n	80061aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006118:	4b2d      	ldr	r3, [pc, #180]	; (80061d0 <prvSwitchTimerLists+0xc0>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006122:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <prvSwitchTimerLists+0xc0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3304      	adds	r3, #4
 8006130:	4618      	mov	r0, r3
 8006132:	f7fd fd7d 	bl	8003c30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d02e      	beq.n	80061aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4413      	add	r3, r2
 8006154:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	429a      	cmp	r2, r3
 800615c:	d90e      	bls.n	800617c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800616a:	4b19      	ldr	r3, [pc, #100]	; (80061d0 <prvSwitchTimerLists+0xc0>)
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3304      	adds	r3, #4
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f7fd fd22 	bl	8003bbe <vListInsert>
 800617a:	e016      	b.n	80061aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800617c:	2300      	movs	r3, #0
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	2300      	movs	r3, #0
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	2100      	movs	r1, #0
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff fd60 	bl	8005c4c <xTimerGenericCommand>
 800618c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	603b      	str	r3, [r7, #0]
}
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061aa:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <prvSwitchTimerLists+0xc0>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1b1      	bne.n	8006118 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80061b4:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <prvSwitchTimerLists+0xc0>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <prvSwitchTimerLists+0xc4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a04      	ldr	r2, [pc, #16]	; (80061d0 <prvSwitchTimerLists+0xc0>)
 80061c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061c2:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <prvSwitchTimerLists+0xc4>)
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	6013      	str	r3, [r2, #0]
}
 80061c8:	bf00      	nop
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000f48 	.word	0x20000f48
 80061d4:	20000f4c 	.word	0x20000f4c

080061d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061de:	f000 f989 	bl	80064f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061e2:	4b15      	ldr	r3, [pc, #84]	; (8006238 <prvCheckForValidListAndQueue+0x60>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d120      	bne.n	800622c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061ea:	4814      	ldr	r0, [pc, #80]	; (800623c <prvCheckForValidListAndQueue+0x64>)
 80061ec:	f7fd fc96 	bl	8003b1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061f0:	4813      	ldr	r0, [pc, #76]	; (8006240 <prvCheckForValidListAndQueue+0x68>)
 80061f2:	f7fd fc93 	bl	8003b1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061f6:	4b13      	ldr	r3, [pc, #76]	; (8006244 <prvCheckForValidListAndQueue+0x6c>)
 80061f8:	4a10      	ldr	r2, [pc, #64]	; (800623c <prvCheckForValidListAndQueue+0x64>)
 80061fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061fc:	4b12      	ldr	r3, [pc, #72]	; (8006248 <prvCheckForValidListAndQueue+0x70>)
 80061fe:	4a10      	ldr	r2, [pc, #64]	; (8006240 <prvCheckForValidListAndQueue+0x68>)
 8006200:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006202:	2300      	movs	r3, #0
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	4b11      	ldr	r3, [pc, #68]	; (800624c <prvCheckForValidListAndQueue+0x74>)
 8006208:	4a11      	ldr	r2, [pc, #68]	; (8006250 <prvCheckForValidListAndQueue+0x78>)
 800620a:	2110      	movs	r1, #16
 800620c:	200a      	movs	r0, #10
 800620e:	f7fd fda1 	bl	8003d54 <xQueueGenericCreateStatic>
 8006212:	4603      	mov	r3, r0
 8006214:	4a08      	ldr	r2, [pc, #32]	; (8006238 <prvCheckForValidListAndQueue+0x60>)
 8006216:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006218:	4b07      	ldr	r3, [pc, #28]	; (8006238 <prvCheckForValidListAndQueue+0x60>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006220:	4b05      	ldr	r3, [pc, #20]	; (8006238 <prvCheckForValidListAndQueue+0x60>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	490b      	ldr	r1, [pc, #44]	; (8006254 <prvCheckForValidListAndQueue+0x7c>)
 8006226:	4618      	mov	r0, r3
 8006228:	f7fe fbce 	bl	80049c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800622c:	f000 f992 	bl	8006554 <vPortExitCritical>
}
 8006230:	bf00      	nop
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20000f50 	.word	0x20000f50
 800623c:	20000f20 	.word	0x20000f20
 8006240:	20000f34 	.word	0x20000f34
 8006244:	20000f48 	.word	0x20000f48
 8006248:	20000f4c 	.word	0x20000f4c
 800624c:	20000ffc 	.word	0x20000ffc
 8006250:	20000f5c 	.word	0x20000f5c
 8006254:	08007608 	.word	0x08007608

08006258 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <pvTimerGetTimerID+0x28>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	60fb      	str	r3, [r7, #12]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006280:	f000 f938 	bl	80064f4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800628a:	f000 f963 	bl	8006554 <vPortExitCritical>

	return pvReturn;
 800628e:	693b      	ldr	r3, [r7, #16]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3b04      	subs	r3, #4
 80062a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3b04      	subs	r3, #4
 80062b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f023 0201 	bic.w	r2, r3, #1
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3b04      	subs	r3, #4
 80062c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062c8:	4a0c      	ldr	r2, [pc, #48]	; (80062fc <pxPortInitialiseStack+0x64>)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3b14      	subs	r3, #20
 80062d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3b04      	subs	r3, #4
 80062de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f06f 0202 	mvn.w	r2, #2
 80062e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3b20      	subs	r3, #32
 80062ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062ee:	68fb      	ldr	r3, [r7, #12]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	08006301 	.word	0x08006301

08006300 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006306:	2300      	movs	r3, #0
 8006308:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800630a:	4b12      	ldr	r3, [pc, #72]	; (8006354 <prvTaskExitError+0x54>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006312:	d00a      	beq.n	800632a <prvTaskExitError+0x2a>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	60fb      	str	r3, [r7, #12]
}
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <prvTaskExitError+0x28>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	60bb      	str	r3, [r7, #8]
}
 800633c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800633e:	bf00      	nop
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0fc      	beq.n	8006340 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006346:	bf00      	nop
 8006348:	bf00      	nop
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	2000000c 	.word	0x2000000c
	...

08006360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006360:	4b07      	ldr	r3, [pc, #28]	; (8006380 <pxCurrentTCBConst2>)
 8006362:	6819      	ldr	r1, [r3, #0]
 8006364:	6808      	ldr	r0, [r1, #0]
 8006366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636a:	f380 8809 	msr	PSP, r0
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f380 8811 	msr	BASEPRI, r0
 800637a:	4770      	bx	lr
 800637c:	f3af 8000 	nop.w

08006380 <pxCurrentTCBConst2>:
 8006380:	20000a20 	.word	0x20000a20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop

08006388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006388:	4808      	ldr	r0, [pc, #32]	; (80063ac <prvPortStartFirstTask+0x24>)
 800638a:	6800      	ldr	r0, [r0, #0]
 800638c:	6800      	ldr	r0, [r0, #0]
 800638e:	f380 8808 	msr	MSP, r0
 8006392:	f04f 0000 	mov.w	r0, #0
 8006396:	f380 8814 	msr	CONTROL, r0
 800639a:	b662      	cpsie	i
 800639c:	b661      	cpsie	f
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	df00      	svc	0
 80063a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063aa:	bf00      	nop
 80063ac:	e000ed08 	.word	0xe000ed08

080063b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063b6:	4b46      	ldr	r3, [pc, #280]	; (80064d0 <xPortStartScheduler+0x120>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a46      	ldr	r2, [pc, #280]	; (80064d4 <xPortStartScheduler+0x124>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d10a      	bne.n	80063d6 <xPortStartScheduler+0x26>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	613b      	str	r3, [r7, #16]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063d6:	4b3e      	ldr	r3, [pc, #248]	; (80064d0 <xPortStartScheduler+0x120>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a3f      	ldr	r2, [pc, #252]	; (80064d8 <xPortStartScheduler+0x128>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d10a      	bne.n	80063f6 <xPortStartScheduler+0x46>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	60fb      	str	r3, [r7, #12]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063f6:	4b39      	ldr	r3, [pc, #228]	; (80064dc <xPortStartScheduler+0x12c>)
 80063f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	22ff      	movs	r2, #255	; 0xff
 8006406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006418:	b2da      	uxtb	r2, r3
 800641a:	4b31      	ldr	r3, [pc, #196]	; (80064e0 <xPortStartScheduler+0x130>)
 800641c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800641e:	4b31      	ldr	r3, [pc, #196]	; (80064e4 <xPortStartScheduler+0x134>)
 8006420:	2207      	movs	r2, #7
 8006422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006424:	e009      	b.n	800643a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006426:	4b2f      	ldr	r3, [pc, #188]	; (80064e4 <xPortStartScheduler+0x134>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3b01      	subs	r3, #1
 800642c:	4a2d      	ldr	r2, [pc, #180]	; (80064e4 <xPortStartScheduler+0x134>)
 800642e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	b2db      	uxtb	r3, r3
 8006438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006442:	2b80      	cmp	r3, #128	; 0x80
 8006444:	d0ef      	beq.n	8006426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006446:	4b27      	ldr	r3, [pc, #156]	; (80064e4 <xPortStartScheduler+0x134>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f1c3 0307 	rsb	r3, r3, #7
 800644e:	2b04      	cmp	r3, #4
 8006450:	d00a      	beq.n	8006468 <xPortStartScheduler+0xb8>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	60bb      	str	r3, [r7, #8]
}
 8006464:	bf00      	nop
 8006466:	e7fe      	b.n	8006466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006468:	4b1e      	ldr	r3, [pc, #120]	; (80064e4 <xPortStartScheduler+0x134>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <xPortStartScheduler+0x134>)
 8006470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006472:	4b1c      	ldr	r3, [pc, #112]	; (80064e4 <xPortStartScheduler+0x134>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800647a:	4a1a      	ldr	r2, [pc, #104]	; (80064e4 <xPortStartScheduler+0x134>)
 800647c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	b2da      	uxtb	r2, r3
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006486:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <xPortStartScheduler+0x138>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a17      	ldr	r2, [pc, #92]	; (80064e8 <xPortStartScheduler+0x138>)
 800648c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006492:	4b15      	ldr	r3, [pc, #84]	; (80064e8 <xPortStartScheduler+0x138>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a14      	ldr	r2, [pc, #80]	; (80064e8 <xPortStartScheduler+0x138>)
 8006498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800649c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800649e:	f000 f8dd 	bl	800665c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064a2:	4b12      	ldr	r3, [pc, #72]	; (80064ec <xPortStartScheduler+0x13c>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80064a8:	f000 f8fc 	bl	80066a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064ac:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <xPortStartScheduler+0x140>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a0f      	ldr	r2, [pc, #60]	; (80064f0 <xPortStartScheduler+0x140>)
 80064b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80064b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064b8:	f7ff ff66 	bl	8006388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064bc:	f7fe fe80 	bl	80051c0 <vTaskSwitchContext>
	prvTaskExitError();
 80064c0:	f7ff ff1e 	bl	8006300 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	e000ed00 	.word	0xe000ed00
 80064d4:	410fc271 	.word	0x410fc271
 80064d8:	410fc270 	.word	0x410fc270
 80064dc:	e000e400 	.word	0xe000e400
 80064e0:	2000104c 	.word	0x2000104c
 80064e4:	20001050 	.word	0x20001050
 80064e8:	e000ed20 	.word	0xe000ed20
 80064ec:	2000000c 	.word	0x2000000c
 80064f0:	e000ef34 	.word	0xe000ef34

080064f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	607b      	str	r3, [r7, #4]
}
 800650c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800650e:	4b0f      	ldr	r3, [pc, #60]	; (800654c <vPortEnterCritical+0x58>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3301      	adds	r3, #1
 8006514:	4a0d      	ldr	r2, [pc, #52]	; (800654c <vPortEnterCritical+0x58>)
 8006516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <vPortEnterCritical+0x58>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d10f      	bne.n	8006540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <vPortEnterCritical+0x5c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <vPortEnterCritical+0x4c>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	603b      	str	r3, [r7, #0]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <vPortEnterCritical+0x4a>
	}
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	2000000c 	.word	0x2000000c
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800655a:	4b12      	ldr	r3, [pc, #72]	; (80065a4 <vPortExitCritical+0x50>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <vPortExitCritical+0x24>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	607b      	str	r3, [r7, #4]
}
 8006574:	bf00      	nop
 8006576:	e7fe      	b.n	8006576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006578:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <vPortExitCritical+0x50>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3b01      	subs	r3, #1
 800657e:	4a09      	ldr	r2, [pc, #36]	; (80065a4 <vPortExitCritical+0x50>)
 8006580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006582:	4b08      	ldr	r3, [pc, #32]	; (80065a4 <vPortExitCritical+0x50>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d105      	bne.n	8006596 <vPortExitCritical+0x42>
 800658a:	2300      	movs	r3, #0
 800658c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	f383 8811 	msr	BASEPRI, r3
}
 8006594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	2000000c 	.word	0x2000000c
	...

080065b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065b0:	f3ef 8009 	mrs	r0, PSP
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	4b15      	ldr	r3, [pc, #84]	; (8006610 <pxCurrentTCBConst>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	f01e 0f10 	tst.w	lr, #16
 80065c0:	bf08      	it	eq
 80065c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ca:	6010      	str	r0, [r2, #0]
 80065cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065d4:	f380 8811 	msr	BASEPRI, r0
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f7fe fdee 	bl	80051c0 <vTaskSwitchContext>
 80065e4:	f04f 0000 	mov.w	r0, #0
 80065e8:	f380 8811 	msr	BASEPRI, r0
 80065ec:	bc09      	pop	{r0, r3}
 80065ee:	6819      	ldr	r1, [r3, #0]
 80065f0:	6808      	ldr	r0, [r1, #0]
 80065f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f6:	f01e 0f10 	tst.w	lr, #16
 80065fa:	bf08      	it	eq
 80065fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006600:	f380 8809 	msr	PSP, r0
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	f3af 8000 	nop.w

08006610 <pxCurrentTCBConst>:
 8006610:	20000a20 	.word	0x20000a20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop

08006618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	607b      	str	r3, [r7, #4]
}
 8006630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006632:	f7fe fd0b 	bl	800504c <xTaskIncrementTick>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800663c:	4b06      	ldr	r3, [pc, #24]	; (8006658 <xPortSysTickHandler+0x40>)
 800663e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	2300      	movs	r3, #0
 8006646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	f383 8811 	msr	BASEPRI, r3
}
 800664e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006650:	bf00      	nop
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	e000ed04 	.word	0xe000ed04

0800665c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <vPortSetupTimerInterrupt+0x34>)
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006666:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <vPortSetupTimerInterrupt+0x38>)
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800666c:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <vPortSetupTimerInterrupt+0x3c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a0a      	ldr	r2, [pc, #40]	; (800669c <vPortSetupTimerInterrupt+0x40>)
 8006672:	fba2 2303 	umull	r2, r3, r2, r3
 8006676:	099b      	lsrs	r3, r3, #6
 8006678:	4a09      	ldr	r2, [pc, #36]	; (80066a0 <vPortSetupTimerInterrupt+0x44>)
 800667a:	3b01      	subs	r3, #1
 800667c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800667e:	4b04      	ldr	r3, [pc, #16]	; (8006690 <vPortSetupTimerInterrupt+0x34>)
 8006680:	2207      	movs	r2, #7
 8006682:	601a      	str	r2, [r3, #0]
}
 8006684:	bf00      	nop
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	e000e010 	.word	0xe000e010
 8006694:	e000e018 	.word	0xe000e018
 8006698:	20000000 	.word	0x20000000
 800669c:	10624dd3 	.word	0x10624dd3
 80066a0:	e000e014 	.word	0xe000e014

080066a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80066b4 <vPortEnableVFP+0x10>
 80066a8:	6801      	ldr	r1, [r0, #0]
 80066aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80066ae:	6001      	str	r1, [r0, #0]
 80066b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066b2:	bf00      	nop
 80066b4:	e000ed88 	.word	0xe000ed88

080066b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066be:	f3ef 8305 	mrs	r3, IPSR
 80066c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b0f      	cmp	r3, #15
 80066c8:	d914      	bls.n	80066f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066ca:	4a17      	ldr	r2, [pc, #92]	; (8006728 <vPortValidateInterruptPriority+0x70>)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066d4:	4b15      	ldr	r3, [pc, #84]	; (800672c <vPortValidateInterruptPriority+0x74>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	7afa      	ldrb	r2, [r7, #11]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d20a      	bcs.n	80066f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066f4:	4b0e      	ldr	r3, [pc, #56]	; (8006730 <vPortValidateInterruptPriority+0x78>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066fc:	4b0d      	ldr	r3, [pc, #52]	; (8006734 <vPortValidateInterruptPriority+0x7c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d90a      	bls.n	800671a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	603b      	str	r3, [r7, #0]
}
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <vPortValidateInterruptPriority+0x60>
	}
 800671a:	bf00      	nop
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	e000e3f0 	.word	0xe000e3f0
 800672c:	2000104c 	.word	0x2000104c
 8006730:	e000ed0c 	.word	0xe000ed0c
 8006734:	20001050 	.word	0x20001050

08006738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08a      	sub	sp, #40	; 0x28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006744:	f7fe fbc6 	bl	8004ed4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006748:	4b5b      	ldr	r3, [pc, #364]	; (80068b8 <pvPortMalloc+0x180>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006750:	f000 f920 	bl	8006994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006754:	4b59      	ldr	r3, [pc, #356]	; (80068bc <pvPortMalloc+0x184>)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4013      	ands	r3, r2
 800675c:	2b00      	cmp	r3, #0
 800675e:	f040 8093 	bne.w	8006888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01d      	beq.n	80067a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006768:	2208      	movs	r2, #8
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	2b00      	cmp	r3, #0
 8006778:	d014      	beq.n	80067a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f023 0307 	bic.w	r3, r3, #7
 8006780:	3308      	adds	r3, #8
 8006782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <pvPortMalloc+0x6c>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	617b      	str	r3, [r7, #20]
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d06e      	beq.n	8006888 <pvPortMalloc+0x150>
 80067aa:	4b45      	ldr	r3, [pc, #276]	; (80068c0 <pvPortMalloc+0x188>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d869      	bhi.n	8006888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067b4:	4b43      	ldr	r3, [pc, #268]	; (80068c4 <pvPortMalloc+0x18c>)
 80067b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067b8:	4b42      	ldr	r3, [pc, #264]	; (80068c4 <pvPortMalloc+0x18c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067be:	e004      	b.n	80067ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d903      	bls.n	80067dc <pvPortMalloc+0xa4>
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1f1      	bne.n	80067c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067dc:	4b36      	ldr	r3, [pc, #216]	; (80068b8 <pvPortMalloc+0x180>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d050      	beq.n	8006888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2208      	movs	r2, #8
 80067ec:	4413      	add	r3, r2
 80067ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	2308      	movs	r3, #8
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	429a      	cmp	r2, r3
 8006806:	d91f      	bls.n	8006848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4413      	add	r3, r2
 800680e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <pvPortMalloc+0xf8>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	613b      	str	r3, [r7, #16]
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	1ad2      	subs	r2, r2, r3
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006842:	69b8      	ldr	r0, [r7, #24]
 8006844:	f000 f908 	bl	8006a58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006848:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <pvPortMalloc+0x188>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	4a1b      	ldr	r2, [pc, #108]	; (80068c0 <pvPortMalloc+0x188>)
 8006854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006856:	4b1a      	ldr	r3, [pc, #104]	; (80068c0 <pvPortMalloc+0x188>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <pvPortMalloc+0x190>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d203      	bcs.n	800686a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006862:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <pvPortMalloc+0x188>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a18      	ldr	r2, [pc, #96]	; (80068c8 <pvPortMalloc+0x190>)
 8006868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	4b13      	ldr	r3, [pc, #76]	; (80068bc <pvPortMalloc+0x184>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	431a      	orrs	r2, r3
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800687e:	4b13      	ldr	r3, [pc, #76]	; (80068cc <pvPortMalloc+0x194>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	4a11      	ldr	r2, [pc, #68]	; (80068cc <pvPortMalloc+0x194>)
 8006886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006888:	f7fe fb32 	bl	8004ef0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <pvPortMalloc+0x174>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	60fb      	str	r3, [r7, #12]
}
 80068a8:	bf00      	nop
 80068aa:	e7fe      	b.n	80068aa <pvPortMalloc+0x172>
	return pvReturn;
 80068ac:	69fb      	ldr	r3, [r7, #28]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3728      	adds	r7, #40	; 0x28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	20004c5c 	.word	0x20004c5c
 80068bc:	20004c70 	.word	0x20004c70
 80068c0:	20004c60 	.word	0x20004c60
 80068c4:	20004c54 	.word	0x20004c54
 80068c8:	20004c64 	.word	0x20004c64
 80068cc:	20004c68 	.word	0x20004c68

080068d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d04d      	beq.n	800697e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068e2:	2308      	movs	r3, #8
 80068e4:	425b      	negs	r3, r3
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	4413      	add	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	4b24      	ldr	r3, [pc, #144]	; (8006988 <vPortFree+0xb8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4013      	ands	r3, r2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <vPortFree+0x44>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	60fb      	str	r3, [r7, #12]
}
 8006910:	bf00      	nop
 8006912:	e7fe      	b.n	8006912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00a      	beq.n	8006932 <vPortFree+0x62>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	60bb      	str	r3, [r7, #8]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	4b14      	ldr	r3, [pc, #80]	; (8006988 <vPortFree+0xb8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4013      	ands	r3, r2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01e      	beq.n	800697e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d11a      	bne.n	800697e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	4b0e      	ldr	r3, [pc, #56]	; (8006988 <vPortFree+0xb8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	43db      	mvns	r3, r3
 8006952:	401a      	ands	r2, r3
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006958:	f7fe fabc 	bl	8004ed4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	4b0a      	ldr	r3, [pc, #40]	; (800698c <vPortFree+0xbc>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4413      	add	r3, r2
 8006966:	4a09      	ldr	r2, [pc, #36]	; (800698c <vPortFree+0xbc>)
 8006968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800696a:	6938      	ldr	r0, [r7, #16]
 800696c:	f000 f874 	bl	8006a58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <vPortFree+0xc0>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3301      	adds	r3, #1
 8006976:	4a06      	ldr	r2, [pc, #24]	; (8006990 <vPortFree+0xc0>)
 8006978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800697a:	f7fe fab9 	bl	8004ef0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800697e:	bf00      	nop
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20004c70 	.word	0x20004c70
 800698c:	20004c60 	.word	0x20004c60
 8006990:	20004c6c 	.word	0x20004c6c

08006994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800699a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800699e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069a0:	4b27      	ldr	r3, [pc, #156]	; (8006a40 <prvHeapInit+0xac>)
 80069a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00c      	beq.n	80069c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3307      	adds	r3, #7
 80069b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0307 	bic.w	r3, r3, #7
 80069ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	4a1f      	ldr	r2, [pc, #124]	; (8006a40 <prvHeapInit+0xac>)
 80069c4:	4413      	add	r3, r2
 80069c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069cc:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <prvHeapInit+0xb0>)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069d2:	4b1c      	ldr	r3, [pc, #112]	; (8006a44 <prvHeapInit+0xb0>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	4413      	add	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069e0:	2208      	movs	r2, #8
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0307 	bic.w	r3, r3, #7
 80069ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4a15      	ldr	r2, [pc, #84]	; (8006a48 <prvHeapInit+0xb4>)
 80069f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069f6:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <prvHeapInit+0xb4>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2200      	movs	r2, #0
 80069fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069fe:	4b12      	ldr	r3, [pc, #72]	; (8006a48 <prvHeapInit+0xb4>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	1ad2      	subs	r2, r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a14:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <prvHeapInit+0xb4>)
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <prvHeapInit+0xb8>)
 8006a22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	4a09      	ldr	r2, [pc, #36]	; (8006a50 <prvHeapInit+0xbc>)
 8006a2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a2c:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <prvHeapInit+0xc0>)
 8006a2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a32:	601a      	str	r2, [r3, #0]
}
 8006a34:	bf00      	nop
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	20001054 	.word	0x20001054
 8006a44:	20004c54 	.word	0x20004c54
 8006a48:	20004c5c 	.word	0x20004c5c
 8006a4c:	20004c64 	.word	0x20004c64
 8006a50:	20004c60 	.word	0x20004c60
 8006a54:	20004c70 	.word	0x20004c70

08006a58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a60:	4b28      	ldr	r3, [pc, #160]	; (8006b04 <prvInsertBlockIntoFreeList+0xac>)
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	e002      	b.n	8006a6c <prvInsertBlockIntoFreeList+0x14>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d8f7      	bhi.n	8006a66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4413      	add	r3, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d108      	bne.n	8006a9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	441a      	add	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	441a      	add	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d118      	bne.n	8006ae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b15      	ldr	r3, [pc, #84]	; (8006b08 <prvInsertBlockIntoFreeList+0xb0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d00d      	beq.n	8006ad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	441a      	add	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	e008      	b.n	8006ae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ad6:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <prvInsertBlockIntoFreeList+0xb0>)
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	e003      	b.n	8006ae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d002      	beq.n	8006af6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006af6:	bf00      	nop
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20004c54 	.word	0x20004c54
 8006b08:	20004c5c 	.word	0x20004c5c

08006b0c <__errno>:
 8006b0c:	4b01      	ldr	r3, [pc, #4]	; (8006b14 <__errno+0x8>)
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20000010 	.word	0x20000010

08006b18 <__libc_init_array>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	4d0d      	ldr	r5, [pc, #52]	; (8006b50 <__libc_init_array+0x38>)
 8006b1c:	4c0d      	ldr	r4, [pc, #52]	; (8006b54 <__libc_init_array+0x3c>)
 8006b1e:	1b64      	subs	r4, r4, r5
 8006b20:	10a4      	asrs	r4, r4, #2
 8006b22:	2600      	movs	r6, #0
 8006b24:	42a6      	cmp	r6, r4
 8006b26:	d109      	bne.n	8006b3c <__libc_init_array+0x24>
 8006b28:	4d0b      	ldr	r5, [pc, #44]	; (8006b58 <__libc_init_array+0x40>)
 8006b2a:	4c0c      	ldr	r4, [pc, #48]	; (8006b5c <__libc_init_array+0x44>)
 8006b2c:	f000 fd16 	bl	800755c <_init>
 8006b30:	1b64      	subs	r4, r4, r5
 8006b32:	10a4      	asrs	r4, r4, #2
 8006b34:	2600      	movs	r6, #0
 8006b36:	42a6      	cmp	r6, r4
 8006b38:	d105      	bne.n	8006b46 <__libc_init_array+0x2e>
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b40:	4798      	blx	r3
 8006b42:	3601      	adds	r6, #1
 8006b44:	e7ee      	b.n	8006b24 <__libc_init_array+0xc>
 8006b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4a:	4798      	blx	r3
 8006b4c:	3601      	adds	r6, #1
 8006b4e:	e7f2      	b.n	8006b36 <__libc_init_array+0x1e>
 8006b50:	08007718 	.word	0x08007718
 8006b54:	08007718 	.word	0x08007718
 8006b58:	08007718 	.word	0x08007718
 8006b5c:	0800771c 	.word	0x0800771c

08006b60 <__retarget_lock_acquire_recursive>:
 8006b60:	4770      	bx	lr

08006b62 <__retarget_lock_release_recursive>:
 8006b62:	4770      	bx	lr

08006b64 <memcpy>:
 8006b64:	440a      	add	r2, r1
 8006b66:	4291      	cmp	r1, r2
 8006b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b6c:	d100      	bne.n	8006b70 <memcpy+0xc>
 8006b6e:	4770      	bx	lr
 8006b70:	b510      	push	{r4, lr}
 8006b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b7a:	4291      	cmp	r1, r2
 8006b7c:	d1f9      	bne.n	8006b72 <memcpy+0xe>
 8006b7e:	bd10      	pop	{r4, pc}

08006b80 <memset>:
 8006b80:	4402      	add	r2, r0
 8006b82:	4603      	mov	r3, r0
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d100      	bne.n	8006b8a <memset+0xa>
 8006b88:	4770      	bx	lr
 8006b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8e:	e7f9      	b.n	8006b84 <memset+0x4>

08006b90 <sbrk_aligned>:
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	4e0e      	ldr	r6, [pc, #56]	; (8006bcc <sbrk_aligned+0x3c>)
 8006b94:	460c      	mov	r4, r1
 8006b96:	6831      	ldr	r1, [r6, #0]
 8006b98:	4605      	mov	r5, r0
 8006b9a:	b911      	cbnz	r1, 8006ba2 <sbrk_aligned+0x12>
 8006b9c:	f000 f8f6 	bl	8006d8c <_sbrk_r>
 8006ba0:	6030      	str	r0, [r6, #0]
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f000 f8f1 	bl	8006d8c <_sbrk_r>
 8006baa:	1c43      	adds	r3, r0, #1
 8006bac:	d00a      	beq.n	8006bc4 <sbrk_aligned+0x34>
 8006bae:	1cc4      	adds	r4, r0, #3
 8006bb0:	f024 0403 	bic.w	r4, r4, #3
 8006bb4:	42a0      	cmp	r0, r4
 8006bb6:	d007      	beq.n	8006bc8 <sbrk_aligned+0x38>
 8006bb8:	1a21      	subs	r1, r4, r0
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f000 f8e6 	bl	8006d8c <_sbrk_r>
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d101      	bne.n	8006bc8 <sbrk_aligned+0x38>
 8006bc4:	f04f 34ff 	mov.w	r4, #4294967295
 8006bc8:	4620      	mov	r0, r4
 8006bca:	bd70      	pop	{r4, r5, r6, pc}
 8006bcc:	20004c7c 	.word	0x20004c7c

08006bd0 <_malloc_r>:
 8006bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd4:	1ccd      	adds	r5, r1, #3
 8006bd6:	f025 0503 	bic.w	r5, r5, #3
 8006bda:	3508      	adds	r5, #8
 8006bdc:	2d0c      	cmp	r5, #12
 8006bde:	bf38      	it	cc
 8006be0:	250c      	movcc	r5, #12
 8006be2:	2d00      	cmp	r5, #0
 8006be4:	4607      	mov	r7, r0
 8006be6:	db01      	blt.n	8006bec <_malloc_r+0x1c>
 8006be8:	42a9      	cmp	r1, r5
 8006bea:	d905      	bls.n	8006bf8 <_malloc_r+0x28>
 8006bec:	230c      	movs	r3, #12
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	2600      	movs	r6, #0
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf8:	4e2e      	ldr	r6, [pc, #184]	; (8006cb4 <_malloc_r+0xe4>)
 8006bfa:	f000 f915 	bl	8006e28 <__malloc_lock>
 8006bfe:	6833      	ldr	r3, [r6, #0]
 8006c00:	461c      	mov	r4, r3
 8006c02:	bb34      	cbnz	r4, 8006c52 <_malloc_r+0x82>
 8006c04:	4629      	mov	r1, r5
 8006c06:	4638      	mov	r0, r7
 8006c08:	f7ff ffc2 	bl	8006b90 <sbrk_aligned>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	4604      	mov	r4, r0
 8006c10:	d14d      	bne.n	8006cae <_malloc_r+0xde>
 8006c12:	6834      	ldr	r4, [r6, #0]
 8006c14:	4626      	mov	r6, r4
 8006c16:	2e00      	cmp	r6, #0
 8006c18:	d140      	bne.n	8006c9c <_malloc_r+0xcc>
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4638      	mov	r0, r7
 8006c20:	eb04 0803 	add.w	r8, r4, r3
 8006c24:	f000 f8b2 	bl	8006d8c <_sbrk_r>
 8006c28:	4580      	cmp	r8, r0
 8006c2a:	d13a      	bne.n	8006ca2 <_malloc_r+0xd2>
 8006c2c:	6821      	ldr	r1, [r4, #0]
 8006c2e:	3503      	adds	r5, #3
 8006c30:	1a6d      	subs	r5, r5, r1
 8006c32:	f025 0503 	bic.w	r5, r5, #3
 8006c36:	3508      	adds	r5, #8
 8006c38:	2d0c      	cmp	r5, #12
 8006c3a:	bf38      	it	cc
 8006c3c:	250c      	movcc	r5, #12
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4638      	mov	r0, r7
 8006c42:	f7ff ffa5 	bl	8006b90 <sbrk_aligned>
 8006c46:	3001      	adds	r0, #1
 8006c48:	d02b      	beq.n	8006ca2 <_malloc_r+0xd2>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	442b      	add	r3, r5
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	e00e      	b.n	8006c70 <_malloc_r+0xa0>
 8006c52:	6822      	ldr	r2, [r4, #0]
 8006c54:	1b52      	subs	r2, r2, r5
 8006c56:	d41e      	bmi.n	8006c96 <_malloc_r+0xc6>
 8006c58:	2a0b      	cmp	r2, #11
 8006c5a:	d916      	bls.n	8006c8a <_malloc_r+0xba>
 8006c5c:	1961      	adds	r1, r4, r5
 8006c5e:	42a3      	cmp	r3, r4
 8006c60:	6025      	str	r5, [r4, #0]
 8006c62:	bf18      	it	ne
 8006c64:	6059      	strne	r1, [r3, #4]
 8006c66:	6863      	ldr	r3, [r4, #4]
 8006c68:	bf08      	it	eq
 8006c6a:	6031      	streq	r1, [r6, #0]
 8006c6c:	5162      	str	r2, [r4, r5]
 8006c6e:	604b      	str	r3, [r1, #4]
 8006c70:	4638      	mov	r0, r7
 8006c72:	f104 060b 	add.w	r6, r4, #11
 8006c76:	f000 f8dd 	bl	8006e34 <__malloc_unlock>
 8006c7a:	f026 0607 	bic.w	r6, r6, #7
 8006c7e:	1d23      	adds	r3, r4, #4
 8006c80:	1af2      	subs	r2, r6, r3
 8006c82:	d0b6      	beq.n	8006bf2 <_malloc_r+0x22>
 8006c84:	1b9b      	subs	r3, r3, r6
 8006c86:	50a3      	str	r3, [r4, r2]
 8006c88:	e7b3      	b.n	8006bf2 <_malloc_r+0x22>
 8006c8a:	6862      	ldr	r2, [r4, #4]
 8006c8c:	42a3      	cmp	r3, r4
 8006c8e:	bf0c      	ite	eq
 8006c90:	6032      	streq	r2, [r6, #0]
 8006c92:	605a      	strne	r2, [r3, #4]
 8006c94:	e7ec      	b.n	8006c70 <_malloc_r+0xa0>
 8006c96:	4623      	mov	r3, r4
 8006c98:	6864      	ldr	r4, [r4, #4]
 8006c9a:	e7b2      	b.n	8006c02 <_malloc_r+0x32>
 8006c9c:	4634      	mov	r4, r6
 8006c9e:	6876      	ldr	r6, [r6, #4]
 8006ca0:	e7b9      	b.n	8006c16 <_malloc_r+0x46>
 8006ca2:	230c      	movs	r3, #12
 8006ca4:	603b      	str	r3, [r7, #0]
 8006ca6:	4638      	mov	r0, r7
 8006ca8:	f000 f8c4 	bl	8006e34 <__malloc_unlock>
 8006cac:	e7a1      	b.n	8006bf2 <_malloc_r+0x22>
 8006cae:	6025      	str	r5, [r4, #0]
 8006cb0:	e7de      	b.n	8006c70 <_malloc_r+0xa0>
 8006cb2:	bf00      	nop
 8006cb4:	20004c78 	.word	0x20004c78

08006cb8 <cleanup_glue>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	460c      	mov	r4, r1
 8006cbc:	6809      	ldr	r1, [r1, #0]
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	b109      	cbz	r1, 8006cc6 <cleanup_glue+0xe>
 8006cc2:	f7ff fff9 	bl	8006cb8 <cleanup_glue>
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	4628      	mov	r0, r5
 8006cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cce:	f000 b8b7 	b.w	8006e40 <_free_r>
	...

08006cd4 <_reclaim_reent>:
 8006cd4:	4b2c      	ldr	r3, [pc, #176]	; (8006d88 <_reclaim_reent+0xb4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4283      	cmp	r3, r0
 8006cda:	b570      	push	{r4, r5, r6, lr}
 8006cdc:	4604      	mov	r4, r0
 8006cde:	d051      	beq.n	8006d84 <_reclaim_reent+0xb0>
 8006ce0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ce2:	b143      	cbz	r3, 8006cf6 <_reclaim_reent+0x22>
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d14a      	bne.n	8006d80 <_reclaim_reent+0xac>
 8006cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cec:	6819      	ldr	r1, [r3, #0]
 8006cee:	b111      	cbz	r1, 8006cf6 <_reclaim_reent+0x22>
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f000 f8a5 	bl	8006e40 <_free_r>
 8006cf6:	6961      	ldr	r1, [r4, #20]
 8006cf8:	b111      	cbz	r1, 8006d00 <_reclaim_reent+0x2c>
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 f8a0 	bl	8006e40 <_free_r>
 8006d00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d02:	b111      	cbz	r1, 8006d0a <_reclaim_reent+0x36>
 8006d04:	4620      	mov	r0, r4
 8006d06:	f000 f89b 	bl	8006e40 <_free_r>
 8006d0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d0c:	b111      	cbz	r1, 8006d14 <_reclaim_reent+0x40>
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f000 f896 	bl	8006e40 <_free_r>
 8006d14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006d16:	b111      	cbz	r1, 8006d1e <_reclaim_reent+0x4a>
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 f891 	bl	8006e40 <_free_r>
 8006d1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006d20:	b111      	cbz	r1, 8006d28 <_reclaim_reent+0x54>
 8006d22:	4620      	mov	r0, r4
 8006d24:	f000 f88c 	bl	8006e40 <_free_r>
 8006d28:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006d2a:	b111      	cbz	r1, 8006d32 <_reclaim_reent+0x5e>
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f000 f887 	bl	8006e40 <_free_r>
 8006d32:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006d34:	b111      	cbz	r1, 8006d3c <_reclaim_reent+0x68>
 8006d36:	4620      	mov	r0, r4
 8006d38:	f000 f882 	bl	8006e40 <_free_r>
 8006d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d3e:	b111      	cbz	r1, 8006d46 <_reclaim_reent+0x72>
 8006d40:	4620      	mov	r0, r4
 8006d42:	f000 f87d 	bl	8006e40 <_free_r>
 8006d46:	69a3      	ldr	r3, [r4, #24]
 8006d48:	b1e3      	cbz	r3, 8006d84 <_reclaim_reent+0xb0>
 8006d4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	4798      	blx	r3
 8006d50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d52:	b1b9      	cbz	r1, 8006d84 <_reclaim_reent+0xb0>
 8006d54:	4620      	mov	r0, r4
 8006d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d5a:	f7ff bfad 	b.w	8006cb8 <cleanup_glue>
 8006d5e:	5949      	ldr	r1, [r1, r5]
 8006d60:	b941      	cbnz	r1, 8006d74 <_reclaim_reent+0xa0>
 8006d62:	3504      	adds	r5, #4
 8006d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d66:	2d80      	cmp	r5, #128	; 0x80
 8006d68:	68d9      	ldr	r1, [r3, #12]
 8006d6a:	d1f8      	bne.n	8006d5e <_reclaim_reent+0x8a>
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f000 f867 	bl	8006e40 <_free_r>
 8006d72:	e7ba      	b.n	8006cea <_reclaim_reent+0x16>
 8006d74:	680e      	ldr	r6, [r1, #0]
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 f862 	bl	8006e40 <_free_r>
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	e7ef      	b.n	8006d60 <_reclaim_reent+0x8c>
 8006d80:	2500      	movs	r5, #0
 8006d82:	e7ef      	b.n	8006d64 <_reclaim_reent+0x90>
 8006d84:	bd70      	pop	{r4, r5, r6, pc}
 8006d86:	bf00      	nop
 8006d88:	20000010 	.word	0x20000010

08006d8c <_sbrk_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d06      	ldr	r5, [pc, #24]	; (8006da8 <_sbrk_r+0x1c>)
 8006d90:	2300      	movs	r3, #0
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	f7fa f868 	bl	8000e6c <_sbrk>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d102      	bne.n	8006da6 <_sbrk_r+0x1a>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	b103      	cbz	r3, 8006da6 <_sbrk_r+0x1a>
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	20004c80 	.word	0x20004c80

08006dac <_vasniprintf_r>:
 8006dac:	b530      	push	{r4, r5, lr}
 8006dae:	4615      	mov	r5, r2
 8006db0:	b09b      	sub	sp, #108	; 0x6c
 8006db2:	682c      	ldr	r4, [r5, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	b189      	cbz	r1, 8006ddc <_vasniprintf_r+0x30>
 8006db8:	2c00      	cmp	r4, #0
 8006dba:	bf12      	itee	ne
 8006dbc:	f44f 63c1 	movne.w	r3, #1544	; 0x608
 8006dc0:	f44f 7322 	moveq.w	r3, #648	; 0x288
 8006dc4:	2100      	moveq	r1, #0
 8006dc6:	2c00      	cmp	r4, #0
 8006dc8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006dcc:	9100      	str	r1, [sp, #0]
 8006dce:	9104      	str	r1, [sp, #16]
 8006dd0:	da08      	bge.n	8006de4 <_vasniprintf_r+0x38>
 8006dd2:	238b      	movs	r3, #139	; 0x8b
 8006dd4:	6003      	str	r3, [r0, #0]
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	b01b      	add	sp, #108	; 0x6c
 8006dda:	bd30      	pop	{r4, r5, pc}
 8006ddc:	f44f 7322 	mov.w	r3, #648	; 0x288
 8006de0:	460c      	mov	r4, r1
 8006de2:	e7f0      	b.n	8006dc6 <_vasniprintf_r+0x1a>
 8006de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006de8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006dec:	4669      	mov	r1, sp
 8006dee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006df0:	9402      	str	r4, [sp, #8]
 8006df2:	9405      	str	r4, [sp, #20]
 8006df4:	f000 f8cc 	bl	8006f90 <_svfiprintf_r>
 8006df8:	1e03      	subs	r3, r0, #0
 8006dfa:	bfa4      	itt	ge
 8006dfc:	602b      	strge	r3, [r5, #0]
 8006dfe:	9b00      	ldrge	r3, [sp, #0]
 8006e00:	f04f 0000 	mov.w	r0, #0
 8006e04:	bfa4      	itt	ge
 8006e06:	7018      	strbge	r0, [r3, #0]
 8006e08:	9804      	ldrge	r0, [sp, #16]
 8006e0a:	e7e5      	b.n	8006dd8 <_vasniprintf_r+0x2c>

08006e0c <vasniprintf>:
 8006e0c:	b507      	push	{r0, r1, r2, lr}
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	4613      	mov	r3, r2
 8006e12:	460a      	mov	r2, r1
 8006e14:	4601      	mov	r1, r0
 8006e16:	4803      	ldr	r0, [pc, #12]	; (8006e24 <vasniprintf+0x18>)
 8006e18:	6800      	ldr	r0, [r0, #0]
 8006e1a:	f7ff ffc7 	bl	8006dac <_vasniprintf_r>
 8006e1e:	b003      	add	sp, #12
 8006e20:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e24:	20000010 	.word	0x20000010

08006e28 <__malloc_lock>:
 8006e28:	4801      	ldr	r0, [pc, #4]	; (8006e30 <__malloc_lock+0x8>)
 8006e2a:	f7ff be99 	b.w	8006b60 <__retarget_lock_acquire_recursive>
 8006e2e:	bf00      	nop
 8006e30:	20004c74 	.word	0x20004c74

08006e34 <__malloc_unlock>:
 8006e34:	4801      	ldr	r0, [pc, #4]	; (8006e3c <__malloc_unlock+0x8>)
 8006e36:	f7ff be94 	b.w	8006b62 <__retarget_lock_release_recursive>
 8006e3a:	bf00      	nop
 8006e3c:	20004c74 	.word	0x20004c74

08006e40 <_free_r>:
 8006e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e42:	2900      	cmp	r1, #0
 8006e44:	d044      	beq.n	8006ed0 <_free_r+0x90>
 8006e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e4a:	9001      	str	r0, [sp, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e52:	bfb8      	it	lt
 8006e54:	18e4      	addlt	r4, r4, r3
 8006e56:	f7ff ffe7 	bl	8006e28 <__malloc_lock>
 8006e5a:	4a1e      	ldr	r2, [pc, #120]	; (8006ed4 <_free_r+0x94>)
 8006e5c:	9801      	ldr	r0, [sp, #4]
 8006e5e:	6813      	ldr	r3, [r2, #0]
 8006e60:	b933      	cbnz	r3, 8006e70 <_free_r+0x30>
 8006e62:	6063      	str	r3, [r4, #4]
 8006e64:	6014      	str	r4, [r2, #0]
 8006e66:	b003      	add	sp, #12
 8006e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e6c:	f7ff bfe2 	b.w	8006e34 <__malloc_unlock>
 8006e70:	42a3      	cmp	r3, r4
 8006e72:	d908      	bls.n	8006e86 <_free_r+0x46>
 8006e74:	6825      	ldr	r5, [r4, #0]
 8006e76:	1961      	adds	r1, r4, r5
 8006e78:	428b      	cmp	r3, r1
 8006e7a:	bf01      	itttt	eq
 8006e7c:	6819      	ldreq	r1, [r3, #0]
 8006e7e:	685b      	ldreq	r3, [r3, #4]
 8006e80:	1949      	addeq	r1, r1, r5
 8006e82:	6021      	streq	r1, [r4, #0]
 8006e84:	e7ed      	b.n	8006e62 <_free_r+0x22>
 8006e86:	461a      	mov	r2, r3
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	b10b      	cbz	r3, 8006e90 <_free_r+0x50>
 8006e8c:	42a3      	cmp	r3, r4
 8006e8e:	d9fa      	bls.n	8006e86 <_free_r+0x46>
 8006e90:	6811      	ldr	r1, [r2, #0]
 8006e92:	1855      	adds	r5, r2, r1
 8006e94:	42a5      	cmp	r5, r4
 8006e96:	d10b      	bne.n	8006eb0 <_free_r+0x70>
 8006e98:	6824      	ldr	r4, [r4, #0]
 8006e9a:	4421      	add	r1, r4
 8006e9c:	1854      	adds	r4, r2, r1
 8006e9e:	42a3      	cmp	r3, r4
 8006ea0:	6011      	str	r1, [r2, #0]
 8006ea2:	d1e0      	bne.n	8006e66 <_free_r+0x26>
 8006ea4:	681c      	ldr	r4, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	6053      	str	r3, [r2, #4]
 8006eaa:	4421      	add	r1, r4
 8006eac:	6011      	str	r1, [r2, #0]
 8006eae:	e7da      	b.n	8006e66 <_free_r+0x26>
 8006eb0:	d902      	bls.n	8006eb8 <_free_r+0x78>
 8006eb2:	230c      	movs	r3, #12
 8006eb4:	6003      	str	r3, [r0, #0]
 8006eb6:	e7d6      	b.n	8006e66 <_free_r+0x26>
 8006eb8:	6825      	ldr	r5, [r4, #0]
 8006eba:	1961      	adds	r1, r4, r5
 8006ebc:	428b      	cmp	r3, r1
 8006ebe:	bf04      	itt	eq
 8006ec0:	6819      	ldreq	r1, [r3, #0]
 8006ec2:	685b      	ldreq	r3, [r3, #4]
 8006ec4:	6063      	str	r3, [r4, #4]
 8006ec6:	bf04      	itt	eq
 8006ec8:	1949      	addeq	r1, r1, r5
 8006eca:	6021      	streq	r1, [r4, #0]
 8006ecc:	6054      	str	r4, [r2, #4]
 8006ece:	e7ca      	b.n	8006e66 <_free_r+0x26>
 8006ed0:	b003      	add	sp, #12
 8006ed2:	bd30      	pop	{r4, r5, pc}
 8006ed4:	20004c78 	.word	0x20004c78

08006ed8 <__ssputs_r>:
 8006ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006edc:	688e      	ldr	r6, [r1, #8]
 8006ede:	429e      	cmp	r6, r3
 8006ee0:	4682      	mov	sl, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	4690      	mov	r8, r2
 8006ee6:	461f      	mov	r7, r3
 8006ee8:	d838      	bhi.n	8006f5c <__ssputs_r+0x84>
 8006eea:	898a      	ldrh	r2, [r1, #12]
 8006eec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ef0:	d032      	beq.n	8006f58 <__ssputs_r+0x80>
 8006ef2:	6825      	ldr	r5, [r4, #0]
 8006ef4:	6909      	ldr	r1, [r1, #16]
 8006ef6:	eba5 0901 	sub.w	r9, r5, r1
 8006efa:	6965      	ldr	r5, [r4, #20]
 8006efc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f04:	3301      	adds	r3, #1
 8006f06:	444b      	add	r3, r9
 8006f08:	106d      	asrs	r5, r5, #1
 8006f0a:	429d      	cmp	r5, r3
 8006f0c:	bf38      	it	cc
 8006f0e:	461d      	movcc	r5, r3
 8006f10:	0553      	lsls	r3, r2, #21
 8006f12:	d531      	bpl.n	8006f78 <__ssputs_r+0xa0>
 8006f14:	4629      	mov	r1, r5
 8006f16:	f7ff fe5b 	bl	8006bd0 <_malloc_r>
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	b950      	cbnz	r0, 8006f34 <__ssputs_r+0x5c>
 8006f1e:	230c      	movs	r3, #12
 8006f20:	f8ca 3000 	str.w	r3, [sl]
 8006f24:	89a3      	ldrh	r3, [r4, #12]
 8006f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f2a:	81a3      	strh	r3, [r4, #12]
 8006f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f34:	6921      	ldr	r1, [r4, #16]
 8006f36:	464a      	mov	r2, r9
 8006f38:	f7ff fe14 	bl	8006b64 <memcpy>
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f46:	81a3      	strh	r3, [r4, #12]
 8006f48:	6126      	str	r6, [r4, #16]
 8006f4a:	6165      	str	r5, [r4, #20]
 8006f4c:	444e      	add	r6, r9
 8006f4e:	eba5 0509 	sub.w	r5, r5, r9
 8006f52:	6026      	str	r6, [r4, #0]
 8006f54:	60a5      	str	r5, [r4, #8]
 8006f56:	463e      	mov	r6, r7
 8006f58:	42be      	cmp	r6, r7
 8006f5a:	d900      	bls.n	8006f5e <__ssputs_r+0x86>
 8006f5c:	463e      	mov	r6, r7
 8006f5e:	6820      	ldr	r0, [r4, #0]
 8006f60:	4632      	mov	r2, r6
 8006f62:	4641      	mov	r1, r8
 8006f64:	f000 faa8 	bl	80074b8 <memmove>
 8006f68:	68a3      	ldr	r3, [r4, #8]
 8006f6a:	1b9b      	subs	r3, r3, r6
 8006f6c:	60a3      	str	r3, [r4, #8]
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	4433      	add	r3, r6
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	2000      	movs	r0, #0
 8006f76:	e7db      	b.n	8006f30 <__ssputs_r+0x58>
 8006f78:	462a      	mov	r2, r5
 8006f7a:	f000 fab7 	bl	80074ec <_realloc_r>
 8006f7e:	4606      	mov	r6, r0
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d1e1      	bne.n	8006f48 <__ssputs_r+0x70>
 8006f84:	6921      	ldr	r1, [r4, #16]
 8006f86:	4650      	mov	r0, sl
 8006f88:	f7ff ff5a 	bl	8006e40 <_free_r>
 8006f8c:	e7c7      	b.n	8006f1e <__ssputs_r+0x46>
	...

08006f90 <_svfiprintf_r>:
 8006f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f94:	4698      	mov	r8, r3
 8006f96:	898b      	ldrh	r3, [r1, #12]
 8006f98:	061b      	lsls	r3, r3, #24
 8006f9a:	b09d      	sub	sp, #116	; 0x74
 8006f9c:	4607      	mov	r7, r0
 8006f9e:	460d      	mov	r5, r1
 8006fa0:	4614      	mov	r4, r2
 8006fa2:	d50e      	bpl.n	8006fc2 <_svfiprintf_r+0x32>
 8006fa4:	690b      	ldr	r3, [r1, #16]
 8006fa6:	b963      	cbnz	r3, 8006fc2 <_svfiprintf_r+0x32>
 8006fa8:	2140      	movs	r1, #64	; 0x40
 8006faa:	f7ff fe11 	bl	8006bd0 <_malloc_r>
 8006fae:	6028      	str	r0, [r5, #0]
 8006fb0:	6128      	str	r0, [r5, #16]
 8006fb2:	b920      	cbnz	r0, 8006fbe <_svfiprintf_r+0x2e>
 8006fb4:	230c      	movs	r3, #12
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fbc:	e0d1      	b.n	8007162 <_svfiprintf_r+0x1d2>
 8006fbe:	2340      	movs	r3, #64	; 0x40
 8006fc0:	616b      	str	r3, [r5, #20]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc6:	2320      	movs	r3, #32
 8006fc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fd0:	2330      	movs	r3, #48	; 0x30
 8006fd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800717c <_svfiprintf_r+0x1ec>
 8006fd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fda:	f04f 0901 	mov.w	r9, #1
 8006fde:	4623      	mov	r3, r4
 8006fe0:	469a      	mov	sl, r3
 8006fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe6:	b10a      	cbz	r2, 8006fec <_svfiprintf_r+0x5c>
 8006fe8:	2a25      	cmp	r2, #37	; 0x25
 8006fea:	d1f9      	bne.n	8006fe0 <_svfiprintf_r+0x50>
 8006fec:	ebba 0b04 	subs.w	fp, sl, r4
 8006ff0:	d00b      	beq.n	800700a <_svfiprintf_r+0x7a>
 8006ff2:	465b      	mov	r3, fp
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	f7ff ff6d 	bl	8006ed8 <__ssputs_r>
 8006ffe:	3001      	adds	r0, #1
 8007000:	f000 80aa 	beq.w	8007158 <_svfiprintf_r+0x1c8>
 8007004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007006:	445a      	add	r2, fp
 8007008:	9209      	str	r2, [sp, #36]	; 0x24
 800700a:	f89a 3000 	ldrb.w	r3, [sl]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 80a2 	beq.w	8007158 <_svfiprintf_r+0x1c8>
 8007014:	2300      	movs	r3, #0
 8007016:	f04f 32ff 	mov.w	r2, #4294967295
 800701a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800701e:	f10a 0a01 	add.w	sl, sl, #1
 8007022:	9304      	str	r3, [sp, #16]
 8007024:	9307      	str	r3, [sp, #28]
 8007026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800702a:	931a      	str	r3, [sp, #104]	; 0x68
 800702c:	4654      	mov	r4, sl
 800702e:	2205      	movs	r2, #5
 8007030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007034:	4851      	ldr	r0, [pc, #324]	; (800717c <_svfiprintf_r+0x1ec>)
 8007036:	f7f9 f8db 	bl	80001f0 <memchr>
 800703a:	9a04      	ldr	r2, [sp, #16]
 800703c:	b9d8      	cbnz	r0, 8007076 <_svfiprintf_r+0xe6>
 800703e:	06d0      	lsls	r0, r2, #27
 8007040:	bf44      	itt	mi
 8007042:	2320      	movmi	r3, #32
 8007044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007048:	0711      	lsls	r1, r2, #28
 800704a:	bf44      	itt	mi
 800704c:	232b      	movmi	r3, #43	; 0x2b
 800704e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007052:	f89a 3000 	ldrb.w	r3, [sl]
 8007056:	2b2a      	cmp	r3, #42	; 0x2a
 8007058:	d015      	beq.n	8007086 <_svfiprintf_r+0xf6>
 800705a:	9a07      	ldr	r2, [sp, #28]
 800705c:	4654      	mov	r4, sl
 800705e:	2000      	movs	r0, #0
 8007060:	f04f 0c0a 	mov.w	ip, #10
 8007064:	4621      	mov	r1, r4
 8007066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800706a:	3b30      	subs	r3, #48	; 0x30
 800706c:	2b09      	cmp	r3, #9
 800706e:	d94e      	bls.n	800710e <_svfiprintf_r+0x17e>
 8007070:	b1b0      	cbz	r0, 80070a0 <_svfiprintf_r+0x110>
 8007072:	9207      	str	r2, [sp, #28]
 8007074:	e014      	b.n	80070a0 <_svfiprintf_r+0x110>
 8007076:	eba0 0308 	sub.w	r3, r0, r8
 800707a:	fa09 f303 	lsl.w	r3, r9, r3
 800707e:	4313      	orrs	r3, r2
 8007080:	9304      	str	r3, [sp, #16]
 8007082:	46a2      	mov	sl, r4
 8007084:	e7d2      	b.n	800702c <_svfiprintf_r+0x9c>
 8007086:	9b03      	ldr	r3, [sp, #12]
 8007088:	1d19      	adds	r1, r3, #4
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	9103      	str	r1, [sp, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	bfbb      	ittet	lt
 8007092:	425b      	neglt	r3, r3
 8007094:	f042 0202 	orrlt.w	r2, r2, #2
 8007098:	9307      	strge	r3, [sp, #28]
 800709a:	9307      	strlt	r3, [sp, #28]
 800709c:	bfb8      	it	lt
 800709e:	9204      	strlt	r2, [sp, #16]
 80070a0:	7823      	ldrb	r3, [r4, #0]
 80070a2:	2b2e      	cmp	r3, #46	; 0x2e
 80070a4:	d10c      	bne.n	80070c0 <_svfiprintf_r+0x130>
 80070a6:	7863      	ldrb	r3, [r4, #1]
 80070a8:	2b2a      	cmp	r3, #42	; 0x2a
 80070aa:	d135      	bne.n	8007118 <_svfiprintf_r+0x188>
 80070ac:	9b03      	ldr	r3, [sp, #12]
 80070ae:	1d1a      	adds	r2, r3, #4
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	9203      	str	r2, [sp, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bfb8      	it	lt
 80070b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80070bc:	3402      	adds	r4, #2
 80070be:	9305      	str	r3, [sp, #20]
 80070c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800718c <_svfiprintf_r+0x1fc>
 80070c4:	7821      	ldrb	r1, [r4, #0]
 80070c6:	2203      	movs	r2, #3
 80070c8:	4650      	mov	r0, sl
 80070ca:	f7f9 f891 	bl	80001f0 <memchr>
 80070ce:	b140      	cbz	r0, 80070e2 <_svfiprintf_r+0x152>
 80070d0:	2340      	movs	r3, #64	; 0x40
 80070d2:	eba0 000a 	sub.w	r0, r0, sl
 80070d6:	fa03 f000 	lsl.w	r0, r3, r0
 80070da:	9b04      	ldr	r3, [sp, #16]
 80070dc:	4303      	orrs	r3, r0
 80070de:	3401      	adds	r4, #1
 80070e0:	9304      	str	r3, [sp, #16]
 80070e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e6:	4826      	ldr	r0, [pc, #152]	; (8007180 <_svfiprintf_r+0x1f0>)
 80070e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070ec:	2206      	movs	r2, #6
 80070ee:	f7f9 f87f 	bl	80001f0 <memchr>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d038      	beq.n	8007168 <_svfiprintf_r+0x1d8>
 80070f6:	4b23      	ldr	r3, [pc, #140]	; (8007184 <_svfiprintf_r+0x1f4>)
 80070f8:	bb1b      	cbnz	r3, 8007142 <_svfiprintf_r+0x1b2>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	3307      	adds	r3, #7
 80070fe:	f023 0307 	bic.w	r3, r3, #7
 8007102:	3308      	adds	r3, #8
 8007104:	9303      	str	r3, [sp, #12]
 8007106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007108:	4433      	add	r3, r6
 800710a:	9309      	str	r3, [sp, #36]	; 0x24
 800710c:	e767      	b.n	8006fde <_svfiprintf_r+0x4e>
 800710e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007112:	460c      	mov	r4, r1
 8007114:	2001      	movs	r0, #1
 8007116:	e7a5      	b.n	8007064 <_svfiprintf_r+0xd4>
 8007118:	2300      	movs	r3, #0
 800711a:	3401      	adds	r4, #1
 800711c:	9305      	str	r3, [sp, #20]
 800711e:	4619      	mov	r1, r3
 8007120:	f04f 0c0a 	mov.w	ip, #10
 8007124:	4620      	mov	r0, r4
 8007126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800712a:	3a30      	subs	r2, #48	; 0x30
 800712c:	2a09      	cmp	r2, #9
 800712e:	d903      	bls.n	8007138 <_svfiprintf_r+0x1a8>
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0c5      	beq.n	80070c0 <_svfiprintf_r+0x130>
 8007134:	9105      	str	r1, [sp, #20]
 8007136:	e7c3      	b.n	80070c0 <_svfiprintf_r+0x130>
 8007138:	fb0c 2101 	mla	r1, ip, r1, r2
 800713c:	4604      	mov	r4, r0
 800713e:	2301      	movs	r3, #1
 8007140:	e7f0      	b.n	8007124 <_svfiprintf_r+0x194>
 8007142:	ab03      	add	r3, sp, #12
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	462a      	mov	r2, r5
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <_svfiprintf_r+0x1f8>)
 800714a:	a904      	add	r1, sp, #16
 800714c:	4638      	mov	r0, r7
 800714e:	f3af 8000 	nop.w
 8007152:	1c42      	adds	r2, r0, #1
 8007154:	4606      	mov	r6, r0
 8007156:	d1d6      	bne.n	8007106 <_svfiprintf_r+0x176>
 8007158:	89ab      	ldrh	r3, [r5, #12]
 800715a:	065b      	lsls	r3, r3, #25
 800715c:	f53f af2c 	bmi.w	8006fb8 <_svfiprintf_r+0x28>
 8007160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007162:	b01d      	add	sp, #116	; 0x74
 8007164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007168:	ab03      	add	r3, sp, #12
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	462a      	mov	r2, r5
 800716e:	4b06      	ldr	r3, [pc, #24]	; (8007188 <_svfiprintf_r+0x1f8>)
 8007170:	a904      	add	r1, sp, #16
 8007172:	4638      	mov	r0, r7
 8007174:	f000 f87a 	bl	800726c <_printf_i>
 8007178:	e7eb      	b.n	8007152 <_svfiprintf_r+0x1c2>
 800717a:	bf00      	nop
 800717c:	080076dc 	.word	0x080076dc
 8007180:	080076e6 	.word	0x080076e6
 8007184:	00000000 	.word	0x00000000
 8007188:	08006ed9 	.word	0x08006ed9
 800718c:	080076e2 	.word	0x080076e2

08007190 <_printf_common>:
 8007190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	4616      	mov	r6, r2
 8007196:	4699      	mov	r9, r3
 8007198:	688a      	ldr	r2, [r1, #8]
 800719a:	690b      	ldr	r3, [r1, #16]
 800719c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071a0:	4293      	cmp	r3, r2
 80071a2:	bfb8      	it	lt
 80071a4:	4613      	movlt	r3, r2
 80071a6:	6033      	str	r3, [r6, #0]
 80071a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071ac:	4607      	mov	r7, r0
 80071ae:	460c      	mov	r4, r1
 80071b0:	b10a      	cbz	r2, 80071b6 <_printf_common+0x26>
 80071b2:	3301      	adds	r3, #1
 80071b4:	6033      	str	r3, [r6, #0]
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	0699      	lsls	r1, r3, #26
 80071ba:	bf42      	ittt	mi
 80071bc:	6833      	ldrmi	r3, [r6, #0]
 80071be:	3302      	addmi	r3, #2
 80071c0:	6033      	strmi	r3, [r6, #0]
 80071c2:	6825      	ldr	r5, [r4, #0]
 80071c4:	f015 0506 	ands.w	r5, r5, #6
 80071c8:	d106      	bne.n	80071d8 <_printf_common+0x48>
 80071ca:	f104 0a19 	add.w	sl, r4, #25
 80071ce:	68e3      	ldr	r3, [r4, #12]
 80071d0:	6832      	ldr	r2, [r6, #0]
 80071d2:	1a9b      	subs	r3, r3, r2
 80071d4:	42ab      	cmp	r3, r5
 80071d6:	dc26      	bgt.n	8007226 <_printf_common+0x96>
 80071d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071dc:	1e13      	subs	r3, r2, #0
 80071de:	6822      	ldr	r2, [r4, #0]
 80071e0:	bf18      	it	ne
 80071e2:	2301      	movne	r3, #1
 80071e4:	0692      	lsls	r2, r2, #26
 80071e6:	d42b      	bmi.n	8007240 <_printf_common+0xb0>
 80071e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071ec:	4649      	mov	r1, r9
 80071ee:	4638      	mov	r0, r7
 80071f0:	47c0      	blx	r8
 80071f2:	3001      	adds	r0, #1
 80071f4:	d01e      	beq.n	8007234 <_printf_common+0xa4>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	68e5      	ldr	r5, [r4, #12]
 80071fa:	6832      	ldr	r2, [r6, #0]
 80071fc:	f003 0306 	and.w	r3, r3, #6
 8007200:	2b04      	cmp	r3, #4
 8007202:	bf08      	it	eq
 8007204:	1aad      	subeq	r5, r5, r2
 8007206:	68a3      	ldr	r3, [r4, #8]
 8007208:	6922      	ldr	r2, [r4, #16]
 800720a:	bf0c      	ite	eq
 800720c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007210:	2500      	movne	r5, #0
 8007212:	4293      	cmp	r3, r2
 8007214:	bfc4      	itt	gt
 8007216:	1a9b      	subgt	r3, r3, r2
 8007218:	18ed      	addgt	r5, r5, r3
 800721a:	2600      	movs	r6, #0
 800721c:	341a      	adds	r4, #26
 800721e:	42b5      	cmp	r5, r6
 8007220:	d11a      	bne.n	8007258 <_printf_common+0xc8>
 8007222:	2000      	movs	r0, #0
 8007224:	e008      	b.n	8007238 <_printf_common+0xa8>
 8007226:	2301      	movs	r3, #1
 8007228:	4652      	mov	r2, sl
 800722a:	4649      	mov	r1, r9
 800722c:	4638      	mov	r0, r7
 800722e:	47c0      	blx	r8
 8007230:	3001      	adds	r0, #1
 8007232:	d103      	bne.n	800723c <_printf_common+0xac>
 8007234:	f04f 30ff 	mov.w	r0, #4294967295
 8007238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800723c:	3501      	adds	r5, #1
 800723e:	e7c6      	b.n	80071ce <_printf_common+0x3e>
 8007240:	18e1      	adds	r1, r4, r3
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	2030      	movs	r0, #48	; 0x30
 8007246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800724a:	4422      	add	r2, r4
 800724c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007254:	3302      	adds	r3, #2
 8007256:	e7c7      	b.n	80071e8 <_printf_common+0x58>
 8007258:	2301      	movs	r3, #1
 800725a:	4622      	mov	r2, r4
 800725c:	4649      	mov	r1, r9
 800725e:	4638      	mov	r0, r7
 8007260:	47c0      	blx	r8
 8007262:	3001      	adds	r0, #1
 8007264:	d0e6      	beq.n	8007234 <_printf_common+0xa4>
 8007266:	3601      	adds	r6, #1
 8007268:	e7d9      	b.n	800721e <_printf_common+0x8e>
	...

0800726c <_printf_i>:
 800726c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007270:	7e0f      	ldrb	r7, [r1, #24]
 8007272:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007274:	2f78      	cmp	r7, #120	; 0x78
 8007276:	4691      	mov	r9, r2
 8007278:	4680      	mov	r8, r0
 800727a:	460c      	mov	r4, r1
 800727c:	469a      	mov	sl, r3
 800727e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007282:	d807      	bhi.n	8007294 <_printf_i+0x28>
 8007284:	2f62      	cmp	r7, #98	; 0x62
 8007286:	d80a      	bhi.n	800729e <_printf_i+0x32>
 8007288:	2f00      	cmp	r7, #0
 800728a:	f000 80d8 	beq.w	800743e <_printf_i+0x1d2>
 800728e:	2f58      	cmp	r7, #88	; 0x58
 8007290:	f000 80a3 	beq.w	80073da <_printf_i+0x16e>
 8007294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007298:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800729c:	e03a      	b.n	8007314 <_printf_i+0xa8>
 800729e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072a2:	2b15      	cmp	r3, #21
 80072a4:	d8f6      	bhi.n	8007294 <_printf_i+0x28>
 80072a6:	a101      	add	r1, pc, #4	; (adr r1, 80072ac <_printf_i+0x40>)
 80072a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072ac:	08007305 	.word	0x08007305
 80072b0:	08007319 	.word	0x08007319
 80072b4:	08007295 	.word	0x08007295
 80072b8:	08007295 	.word	0x08007295
 80072bc:	08007295 	.word	0x08007295
 80072c0:	08007295 	.word	0x08007295
 80072c4:	08007319 	.word	0x08007319
 80072c8:	08007295 	.word	0x08007295
 80072cc:	08007295 	.word	0x08007295
 80072d0:	08007295 	.word	0x08007295
 80072d4:	08007295 	.word	0x08007295
 80072d8:	08007425 	.word	0x08007425
 80072dc:	08007349 	.word	0x08007349
 80072e0:	08007407 	.word	0x08007407
 80072e4:	08007295 	.word	0x08007295
 80072e8:	08007295 	.word	0x08007295
 80072ec:	08007447 	.word	0x08007447
 80072f0:	08007295 	.word	0x08007295
 80072f4:	08007349 	.word	0x08007349
 80072f8:	08007295 	.word	0x08007295
 80072fc:	08007295 	.word	0x08007295
 8007300:	0800740f 	.word	0x0800740f
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	1d1a      	adds	r2, r3, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	602a      	str	r2, [r5, #0]
 800730c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007314:	2301      	movs	r3, #1
 8007316:	e0a3      	b.n	8007460 <_printf_i+0x1f4>
 8007318:	6820      	ldr	r0, [r4, #0]
 800731a:	6829      	ldr	r1, [r5, #0]
 800731c:	0606      	lsls	r6, r0, #24
 800731e:	f101 0304 	add.w	r3, r1, #4
 8007322:	d50a      	bpl.n	800733a <_printf_i+0xce>
 8007324:	680e      	ldr	r6, [r1, #0]
 8007326:	602b      	str	r3, [r5, #0]
 8007328:	2e00      	cmp	r6, #0
 800732a:	da03      	bge.n	8007334 <_printf_i+0xc8>
 800732c:	232d      	movs	r3, #45	; 0x2d
 800732e:	4276      	negs	r6, r6
 8007330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007334:	485e      	ldr	r0, [pc, #376]	; (80074b0 <_printf_i+0x244>)
 8007336:	230a      	movs	r3, #10
 8007338:	e019      	b.n	800736e <_printf_i+0x102>
 800733a:	680e      	ldr	r6, [r1, #0]
 800733c:	602b      	str	r3, [r5, #0]
 800733e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007342:	bf18      	it	ne
 8007344:	b236      	sxthne	r6, r6
 8007346:	e7ef      	b.n	8007328 <_printf_i+0xbc>
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	6820      	ldr	r0, [r4, #0]
 800734c:	1d19      	adds	r1, r3, #4
 800734e:	6029      	str	r1, [r5, #0]
 8007350:	0601      	lsls	r1, r0, #24
 8007352:	d501      	bpl.n	8007358 <_printf_i+0xec>
 8007354:	681e      	ldr	r6, [r3, #0]
 8007356:	e002      	b.n	800735e <_printf_i+0xf2>
 8007358:	0646      	lsls	r6, r0, #25
 800735a:	d5fb      	bpl.n	8007354 <_printf_i+0xe8>
 800735c:	881e      	ldrh	r6, [r3, #0]
 800735e:	4854      	ldr	r0, [pc, #336]	; (80074b0 <_printf_i+0x244>)
 8007360:	2f6f      	cmp	r7, #111	; 0x6f
 8007362:	bf0c      	ite	eq
 8007364:	2308      	moveq	r3, #8
 8007366:	230a      	movne	r3, #10
 8007368:	2100      	movs	r1, #0
 800736a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800736e:	6865      	ldr	r5, [r4, #4]
 8007370:	60a5      	str	r5, [r4, #8]
 8007372:	2d00      	cmp	r5, #0
 8007374:	bfa2      	ittt	ge
 8007376:	6821      	ldrge	r1, [r4, #0]
 8007378:	f021 0104 	bicge.w	r1, r1, #4
 800737c:	6021      	strge	r1, [r4, #0]
 800737e:	b90e      	cbnz	r6, 8007384 <_printf_i+0x118>
 8007380:	2d00      	cmp	r5, #0
 8007382:	d04d      	beq.n	8007420 <_printf_i+0x1b4>
 8007384:	4615      	mov	r5, r2
 8007386:	fbb6 f1f3 	udiv	r1, r6, r3
 800738a:	fb03 6711 	mls	r7, r3, r1, r6
 800738e:	5dc7      	ldrb	r7, [r0, r7]
 8007390:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007394:	4637      	mov	r7, r6
 8007396:	42bb      	cmp	r3, r7
 8007398:	460e      	mov	r6, r1
 800739a:	d9f4      	bls.n	8007386 <_printf_i+0x11a>
 800739c:	2b08      	cmp	r3, #8
 800739e:	d10b      	bne.n	80073b8 <_printf_i+0x14c>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	07de      	lsls	r6, r3, #31
 80073a4:	d508      	bpl.n	80073b8 <_printf_i+0x14c>
 80073a6:	6923      	ldr	r3, [r4, #16]
 80073a8:	6861      	ldr	r1, [r4, #4]
 80073aa:	4299      	cmp	r1, r3
 80073ac:	bfde      	ittt	le
 80073ae:	2330      	movle	r3, #48	; 0x30
 80073b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073b8:	1b52      	subs	r2, r2, r5
 80073ba:	6122      	str	r2, [r4, #16]
 80073bc:	f8cd a000 	str.w	sl, [sp]
 80073c0:	464b      	mov	r3, r9
 80073c2:	aa03      	add	r2, sp, #12
 80073c4:	4621      	mov	r1, r4
 80073c6:	4640      	mov	r0, r8
 80073c8:	f7ff fee2 	bl	8007190 <_printf_common>
 80073cc:	3001      	adds	r0, #1
 80073ce:	d14c      	bne.n	800746a <_printf_i+0x1fe>
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	b004      	add	sp, #16
 80073d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073da:	4835      	ldr	r0, [pc, #212]	; (80074b0 <_printf_i+0x244>)
 80073dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073e0:	6829      	ldr	r1, [r5, #0]
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80073e8:	6029      	str	r1, [r5, #0]
 80073ea:	061d      	lsls	r5, r3, #24
 80073ec:	d514      	bpl.n	8007418 <_printf_i+0x1ac>
 80073ee:	07df      	lsls	r7, r3, #31
 80073f0:	bf44      	itt	mi
 80073f2:	f043 0320 	orrmi.w	r3, r3, #32
 80073f6:	6023      	strmi	r3, [r4, #0]
 80073f8:	b91e      	cbnz	r6, 8007402 <_printf_i+0x196>
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	f023 0320 	bic.w	r3, r3, #32
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	2310      	movs	r3, #16
 8007404:	e7b0      	b.n	8007368 <_printf_i+0xfc>
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	f043 0320 	orr.w	r3, r3, #32
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	2378      	movs	r3, #120	; 0x78
 8007410:	4828      	ldr	r0, [pc, #160]	; (80074b4 <_printf_i+0x248>)
 8007412:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007416:	e7e3      	b.n	80073e0 <_printf_i+0x174>
 8007418:	0659      	lsls	r1, r3, #25
 800741a:	bf48      	it	mi
 800741c:	b2b6      	uxthmi	r6, r6
 800741e:	e7e6      	b.n	80073ee <_printf_i+0x182>
 8007420:	4615      	mov	r5, r2
 8007422:	e7bb      	b.n	800739c <_printf_i+0x130>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	6826      	ldr	r6, [r4, #0]
 8007428:	6961      	ldr	r1, [r4, #20]
 800742a:	1d18      	adds	r0, r3, #4
 800742c:	6028      	str	r0, [r5, #0]
 800742e:	0635      	lsls	r5, r6, #24
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	d501      	bpl.n	8007438 <_printf_i+0x1cc>
 8007434:	6019      	str	r1, [r3, #0]
 8007436:	e002      	b.n	800743e <_printf_i+0x1d2>
 8007438:	0670      	lsls	r0, r6, #25
 800743a:	d5fb      	bpl.n	8007434 <_printf_i+0x1c8>
 800743c:	8019      	strh	r1, [r3, #0]
 800743e:	2300      	movs	r3, #0
 8007440:	6123      	str	r3, [r4, #16]
 8007442:	4615      	mov	r5, r2
 8007444:	e7ba      	b.n	80073bc <_printf_i+0x150>
 8007446:	682b      	ldr	r3, [r5, #0]
 8007448:	1d1a      	adds	r2, r3, #4
 800744a:	602a      	str	r2, [r5, #0]
 800744c:	681d      	ldr	r5, [r3, #0]
 800744e:	6862      	ldr	r2, [r4, #4]
 8007450:	2100      	movs	r1, #0
 8007452:	4628      	mov	r0, r5
 8007454:	f7f8 fecc 	bl	80001f0 <memchr>
 8007458:	b108      	cbz	r0, 800745e <_printf_i+0x1f2>
 800745a:	1b40      	subs	r0, r0, r5
 800745c:	6060      	str	r0, [r4, #4]
 800745e:	6863      	ldr	r3, [r4, #4]
 8007460:	6123      	str	r3, [r4, #16]
 8007462:	2300      	movs	r3, #0
 8007464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007468:	e7a8      	b.n	80073bc <_printf_i+0x150>
 800746a:	6923      	ldr	r3, [r4, #16]
 800746c:	462a      	mov	r2, r5
 800746e:	4649      	mov	r1, r9
 8007470:	4640      	mov	r0, r8
 8007472:	47d0      	blx	sl
 8007474:	3001      	adds	r0, #1
 8007476:	d0ab      	beq.n	80073d0 <_printf_i+0x164>
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	079b      	lsls	r3, r3, #30
 800747c:	d413      	bmi.n	80074a6 <_printf_i+0x23a>
 800747e:	68e0      	ldr	r0, [r4, #12]
 8007480:	9b03      	ldr	r3, [sp, #12]
 8007482:	4298      	cmp	r0, r3
 8007484:	bfb8      	it	lt
 8007486:	4618      	movlt	r0, r3
 8007488:	e7a4      	b.n	80073d4 <_printf_i+0x168>
 800748a:	2301      	movs	r3, #1
 800748c:	4632      	mov	r2, r6
 800748e:	4649      	mov	r1, r9
 8007490:	4640      	mov	r0, r8
 8007492:	47d0      	blx	sl
 8007494:	3001      	adds	r0, #1
 8007496:	d09b      	beq.n	80073d0 <_printf_i+0x164>
 8007498:	3501      	adds	r5, #1
 800749a:	68e3      	ldr	r3, [r4, #12]
 800749c:	9903      	ldr	r1, [sp, #12]
 800749e:	1a5b      	subs	r3, r3, r1
 80074a0:	42ab      	cmp	r3, r5
 80074a2:	dcf2      	bgt.n	800748a <_printf_i+0x21e>
 80074a4:	e7eb      	b.n	800747e <_printf_i+0x212>
 80074a6:	2500      	movs	r5, #0
 80074a8:	f104 0619 	add.w	r6, r4, #25
 80074ac:	e7f5      	b.n	800749a <_printf_i+0x22e>
 80074ae:	bf00      	nop
 80074b0:	080076ed 	.word	0x080076ed
 80074b4:	080076fe 	.word	0x080076fe

080074b8 <memmove>:
 80074b8:	4288      	cmp	r0, r1
 80074ba:	b510      	push	{r4, lr}
 80074bc:	eb01 0402 	add.w	r4, r1, r2
 80074c0:	d902      	bls.n	80074c8 <memmove+0x10>
 80074c2:	4284      	cmp	r4, r0
 80074c4:	4623      	mov	r3, r4
 80074c6:	d807      	bhi.n	80074d8 <memmove+0x20>
 80074c8:	1e43      	subs	r3, r0, #1
 80074ca:	42a1      	cmp	r1, r4
 80074cc:	d008      	beq.n	80074e0 <memmove+0x28>
 80074ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074d6:	e7f8      	b.n	80074ca <memmove+0x12>
 80074d8:	4402      	add	r2, r0
 80074da:	4601      	mov	r1, r0
 80074dc:	428a      	cmp	r2, r1
 80074de:	d100      	bne.n	80074e2 <memmove+0x2a>
 80074e0:	bd10      	pop	{r4, pc}
 80074e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074ea:	e7f7      	b.n	80074dc <memmove+0x24>

080074ec <_realloc_r>:
 80074ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f0:	4680      	mov	r8, r0
 80074f2:	4614      	mov	r4, r2
 80074f4:	460e      	mov	r6, r1
 80074f6:	b921      	cbnz	r1, 8007502 <_realloc_r+0x16>
 80074f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074fc:	4611      	mov	r1, r2
 80074fe:	f7ff bb67 	b.w	8006bd0 <_malloc_r>
 8007502:	b92a      	cbnz	r2, 8007510 <_realloc_r+0x24>
 8007504:	f7ff fc9c 	bl	8006e40 <_free_r>
 8007508:	4625      	mov	r5, r4
 800750a:	4628      	mov	r0, r5
 800750c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007510:	f000 f81b 	bl	800754a <_malloc_usable_size_r>
 8007514:	4284      	cmp	r4, r0
 8007516:	4607      	mov	r7, r0
 8007518:	d802      	bhi.n	8007520 <_realloc_r+0x34>
 800751a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800751e:	d812      	bhi.n	8007546 <_realloc_r+0x5a>
 8007520:	4621      	mov	r1, r4
 8007522:	4640      	mov	r0, r8
 8007524:	f7ff fb54 	bl	8006bd0 <_malloc_r>
 8007528:	4605      	mov	r5, r0
 800752a:	2800      	cmp	r0, #0
 800752c:	d0ed      	beq.n	800750a <_realloc_r+0x1e>
 800752e:	42bc      	cmp	r4, r7
 8007530:	4622      	mov	r2, r4
 8007532:	4631      	mov	r1, r6
 8007534:	bf28      	it	cs
 8007536:	463a      	movcs	r2, r7
 8007538:	f7ff fb14 	bl	8006b64 <memcpy>
 800753c:	4631      	mov	r1, r6
 800753e:	4640      	mov	r0, r8
 8007540:	f7ff fc7e 	bl	8006e40 <_free_r>
 8007544:	e7e1      	b.n	800750a <_realloc_r+0x1e>
 8007546:	4635      	mov	r5, r6
 8007548:	e7df      	b.n	800750a <_realloc_r+0x1e>

0800754a <_malloc_usable_size_r>:
 800754a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800754e:	1f18      	subs	r0, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	bfbc      	itt	lt
 8007554:	580b      	ldrlt	r3, [r1, r0]
 8007556:	18c0      	addlt	r0, r0, r3
 8007558:	4770      	bx	lr
	...

0800755c <_init>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	bf00      	nop
 8007560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007562:	bc08      	pop	{r3}
 8007564:	469e      	mov	lr, r3
 8007566:	4770      	bx	lr

08007568 <_fini>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	bf00      	nop
 800756c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756e:	bc08      	pop	{r3}
 8007570:	469e      	mov	lr, r3
 8007572:	4770      	bx	lr
